
motorcontrol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f398  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e48  0800f568  0800f568  0001f568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080103b0  080103b0  0003021c  2**0
                  CONTENTS
  4 .ARM          00000008  080103b0  080103b0  000203b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080103b8  080103b8  0003021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080103b8  080103b8  000203b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080103bc  080103bc  000203bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  080103c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009268  20000220  080105dc  00030220  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20009488  080105dc  00039488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002287d  00000000  00000000  0003024c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000469d  00000000  00000000  00052ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001720  00000000  00000000  00057168  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001500  00000000  00000000  00058888  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000283da  00000000  00000000  00059d88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016337  00000000  00000000  00082162  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd7cd  00000000  00000000  00098499  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00175c66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000749c  00000000  00000000  00175ce4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f550 	.word	0x0800f550

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800f550 	.word	0x0800f550

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000fe6:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <MX_ADC1_Init+0xc8>)
 8000fe8:	4a2a      	ldr	r2, [pc, #168]	; (8001094 <MX_ADC1_Init+0xcc>)
 8000fea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fec:	4b28      	ldr	r3, [pc, #160]	; (8001090 <MX_ADC1_Init+0xc8>)
 8000fee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ff2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ff4:	4b26      	ldr	r3, [pc, #152]	; (8001090 <MX_ADC1_Init+0xc8>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ffa:	4b25      	ldr	r3, [pc, #148]	; (8001090 <MX_ADC1_Init+0xc8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001000:	4b23      	ldr	r3, [pc, #140]	; (8001090 <MX_ADC1_Init+0xc8>)
 8001002:	2200      	movs	r2, #0
 8001004:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001006:	4b22      	ldr	r3, [pc, #136]	; (8001090 <MX_ADC1_Init+0xc8>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800100e:	4b20      	ldr	r3, [pc, #128]	; (8001090 <MX_ADC1_Init+0xc8>)
 8001010:	2200      	movs	r2, #0
 8001012:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <MX_ADC1_Init+0xc8>)
 8001016:	4a20      	ldr	r2, [pc, #128]	; (8001098 <MX_ADC1_Init+0xd0>)
 8001018:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800101a:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <MX_ADC1_Init+0xc8>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <MX_ADC1_Init+0xc8>)
 8001022:	2201      	movs	r2, #1
 8001024:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001026:	4b1a      	ldr	r3, [pc, #104]	; (8001090 <MX_ADC1_Init+0xc8>)
 8001028:	2200      	movs	r2, #0
 800102a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102e:	4b18      	ldr	r3, [pc, #96]	; (8001090 <MX_ADC1_Init+0xc8>)
 8001030:	2201      	movs	r2, #1
 8001032:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001034:	4816      	ldr	r0, [pc, #88]	; (8001090 <MX_ADC1_Init+0xc8>)
 8001036:	f004 fd63 	bl	8005b00 <HAL_ADC_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8001040:	f003 fa92 	bl	8004568 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_TRIPLEMODE_REGSIMULT;
 8001044:	2316      	movs	r3, #22
 8001046:	617b      	str	r3, [r7, #20]
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 800104c:	2300      	movs	r3, #0
 800104e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	480e      	ldr	r0, [pc, #56]	; (8001090 <MX_ADC1_Init+0xc8>)
 8001058:	f005 f91c 	bl	8006294 <HAL_ADCEx_MultiModeConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8001062:	f003 fa81 	bl	8004568 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001066:	230a      	movs	r3, #10
 8001068:	607b      	str	r3, [r7, #4]
  sConfig.Rank = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	; (8001090 <MX_ADC1_Init+0xc8>)
 8001078:	f004 fede 	bl	8005e38 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8001082:	f003 fa71 	bl	8004568 <Error_Handler>
  }

}
 8001086:	bf00      	nop
 8001088:	3720      	adds	r7, #32
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000290 	.word	0x20000290
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80010a2:	463b      	mov	r3, r7
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <MX_ADC2_Init+0x8c>)
 80010b0:	4a1e      	ldr	r2, [pc, #120]	; (800112c <MX_ADC2_Init+0x90>)
 80010b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <MX_ADC2_Init+0x8c>)
 80010b6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_ADC2_Init+0x8c>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80010c2:	4b19      	ldr	r3, [pc, #100]	; (8001128 <MX_ADC2_Init+0x8c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_ADC2_Init+0x8c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_ADC2_Init+0x8c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_ADC2_Init+0x8c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_ADC2_Init+0x8c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_ADC2_Init+0x8c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_ADC2_Init+0x8c>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_ADC2_Init+0x8c>)
 80010f2:	f004 fd05 	bl	8005b00 <HAL_ADC_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC2_Init+0x64>
  {
    Error_Handler();
 80010fc:	f003 fa34 	bl	8004568 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001100:	230b      	movs	r3, #11
 8001102:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001108:	2300      	movs	r3, #0
 800110a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_ADC2_Init+0x8c>)
 8001112:	f004 fe91 	bl	8005e38 <HAL_ADC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 800111c:	f003 fa24 	bl	8004568 <Error_Handler>
  }

}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000248 	.word	0x20000248
 800112c:	40012100 	.word	0x40012100

08001130 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8001136:	463b      	mov	r3, r7
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <MX_ADC3_Init+0x8c>)
 8001144:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <MX_ADC3_Init+0x90>)
 8001146:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_ADC3_Init+0x8c>)
 800114a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800114e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_ADC3_Init+0x8c>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <MX_ADC3_Init+0x8c>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <MX_ADC3_Init+0x8c>)
 800115e:	2200      	movs	r2, #0
 8001160:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <MX_ADC3_Init+0x8c>)
 8001164:	2200      	movs	r2, #0
 8001166:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <MX_ADC3_Init+0x8c>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <MX_ADC3_Init+0x8c>)
 8001172:	2201      	movs	r2, #1
 8001174:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001176:	4b11      	ldr	r3, [pc, #68]	; (80011bc <MX_ADC3_Init+0x8c>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_ADC3_Init+0x8c>)
 8001180:	2201      	movs	r2, #1
 8001182:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_ADC3_Init+0x8c>)
 8001186:	f004 fcbb 	bl	8005b00 <HAL_ADC_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_ADC3_Init+0x64>
  {
    Error_Handler();
 8001190:	f003 f9ea 	bl	8004568 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001194:	2300      	movs	r3, #0
 8001196:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001198:	2301      	movs	r3, #1
 800119a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011a0:	463b      	mov	r3, r7
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <MX_ADC3_Init+0x8c>)
 80011a6:	f004 fe47 	bl	8005e38 <HAL_ADC_ConfigChannel>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC3_Init+0x84>
  {
    Error_Handler();
 80011b0:	f003 f9da 	bl	8004568 <Error_Handler>
  }

}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200002d8 	.word	0x200002d8
 80011c0:	40012200 	.word	0x40012200

080011c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	; 0x38
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a45      	ldr	r2, [pc, #276]	; (80012f8 <HAL_ADC_MspInit+0x134>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d128      	bne.n	8001238 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	623b      	str	r3, [r7, #32]
 80011ea:	4b44      	ldr	r3, [pc, #272]	; (80012fc <HAL_ADC_MspInit+0x138>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	4a43      	ldr	r2, [pc, #268]	; (80012fc <HAL_ADC_MspInit+0x138>)
 80011f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f4:	6453      	str	r3, [r2, #68]	; 0x44
 80011f6:	4b41      	ldr	r3, [pc, #260]	; (80012fc <HAL_ADC_MspInit+0x138>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fe:	623b      	str	r3, [r7, #32]
 8001200:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	4b3d      	ldr	r3, [pc, #244]	; (80012fc <HAL_ADC_MspInit+0x138>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a3c      	ldr	r2, [pc, #240]	; (80012fc <HAL_ADC_MspInit+0x138>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b3a      	ldr	r3, [pc, #232]	; (80012fc <HAL_ADC_MspInit+0x138>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	61fb      	str	r3, [r7, #28]
 800121c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800121e:	2301      	movs	r3, #1
 8001220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001222:	2303      	movs	r3, #3
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	4833      	ldr	r0, [pc, #204]	; (8001300 <HAL_ADC_MspInit+0x13c>)
 8001232:	f005 ffe9 	bl	8007208 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001236:	e05a      	b.n	80012ee <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC2)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a31      	ldr	r2, [pc, #196]	; (8001304 <HAL_ADC_MspInit+0x140>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d128      	bne.n	8001294 <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <HAL_ADC_MspInit+0x138>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a2c      	ldr	r2, [pc, #176]	; (80012fc <HAL_ADC_MspInit+0x138>)
 800124c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <HAL_ADC_MspInit+0x138>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	4b26      	ldr	r3, [pc, #152]	; (80012fc <HAL_ADC_MspInit+0x138>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a25      	ldr	r2, [pc, #148]	; (80012fc <HAL_ADC_MspInit+0x138>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b23      	ldr	r3, [pc, #140]	; (80012fc <HAL_ADC_MspInit+0x138>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800127a:	2302      	movs	r3, #2
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127e:	2303      	movs	r3, #3
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128a:	4619      	mov	r1, r3
 800128c:	481c      	ldr	r0, [pc, #112]	; (8001300 <HAL_ADC_MspInit+0x13c>)
 800128e:	f005 ffbb 	bl	8007208 <HAL_GPIO_Init>
}
 8001292:	e02c      	b.n	80012ee <HAL_ADC_MspInit+0x12a>
  else if(adcHandle->Instance==ADC3)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a1b      	ldr	r2, [pc, #108]	; (8001308 <HAL_ADC_MspInit+0x144>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d127      	bne.n	80012ee <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <HAL_ADC_MspInit+0x138>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a15      	ldr	r2, [pc, #84]	; (80012fc <HAL_ADC_MspInit+0x138>)
 80012a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_ADC_MspInit+0x138>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <HAL_ADC_MspInit+0x138>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <HAL_ADC_MspInit+0x138>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <HAL_ADC_MspInit+0x138>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d6:	2301      	movs	r3, #1
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012da:	2303      	movs	r3, #3
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e6:	4619      	mov	r1, r3
 80012e8:	4808      	ldr	r0, [pc, #32]	; (800130c <HAL_ADC_MspInit+0x148>)
 80012ea:	f005 ff8d 	bl	8007208 <HAL_GPIO_Init>
}
 80012ee:	bf00      	nop
 80012f0:	3738      	adds	r7, #56	; 0x38
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40012000 	.word	0x40012000
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020800 	.word	0x40020800
 8001304:	40012100 	.word	0x40012100
 8001308:	40012200 	.word	0x40012200
 800130c:	40020000 	.word	0x40020000

08001310 <order_phases>:
#include <stdio.h>
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001312:	b089      	sub	sp, #36	; 0x24
 8001314:	af02      	add	r7, sp, #8
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */

	if(!cal->started){
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	7c1b      	ldrb	r3, [r3, #16]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d108      	bne.n	8001338 <order_phases+0x28>
		printf("Checking phase sign, pole pairs\r\n");
 8001326:	486e      	ldr	r0, [pc, #440]	; (80014e0 <order_phases+0x1d0>)
 8001328:	f00a ff4a 	bl	800c1c0 <puts>
		cal->started = 1;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2201      	movs	r2, #1
 8001330:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001348:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80014e4 <order_phases+0x1d4>
 800134c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	edd3 7a05 	vldr	s15, [r3, #20]
 800135c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001364:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001368:	d520      	bpl.n	80013ac <order_phases+0x9c>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689a      	ldr	r2, [r3, #8]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800137c:	3388      	adds	r3, #136	; 0x88
 800137e:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	4a59      	ldr	r2, [pc, #356]	; (80014e8 <order_phases+0x1d8>)
 8001384:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001398:	332c      	adds	r3, #44	; 0x2c
 800139a:	4619      	mov	r1, r3
 800139c:	68b8      	ldr	r0, [r7, #8]
 800139e:	f001 fd6f 	bl	8002e80 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	68da      	ldr	r2, [r3, #12]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	619a      	str	r2, [r3, #24]
    	return;
 80013aa:	e096      	b.n	80014da <order_phases+0x1ca>
    }

    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80013b2:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80014ec <order_phases+0x1dc>
 80013b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013be:	d51d      	bpl.n	80013fc <order_phases+0xec>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80013c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ce:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80013e6:	3388      	adds	r3, #136	; 0x88
 80013e8:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80013f0:	332c      	adds	r3, #44	; 0x2c
 80013f2:	4619      	mov	r1, r3
 80013f4:	68b8      	ldr	r0, [r7, #8]
 80013f6:	f001 fd43 	bl	8002e80 <commutate>
    	return;
 80013fa:	e06e      	b.n	80014da <order_phases+0x1ca>
    }

	reset_foc(controller);
 80013fc:	68b8      	ldr	r0, [r7, #8]
 80013fe:	f001 fc55 	bl	8002cac <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	edd3 7a06 	vldr	s15, [r3, #24]
 800140e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001412:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001416:	eef0 7ae7 	vabs.f32	s15, s15
 800141a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80014f0 <order_phases+0x1e0>
 800141e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001422:	ee16 0a90 	vmov	r0, s13
 8001426:	f7ff f8af 	bl	8000588 <__aeabi_f2d>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	ec44 3b10 	vmov	d0, r3, r4
 8001432:	f008 ff4f 	bl	800a2d4 <round>
 8001436:	ec54 3b10 	vmov	r3, r4, d0
 800143a:	4618      	mov	r0, r3
 800143c:	4621      	mov	r1, r4
 800143e:	f7ff fbd3 	bl	8000be8 <__aeabi_d2uiz>
 8001442:	4603      	mov	r3, r0
 8001444:	b2da      	uxtb	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001450:	ed97 7a05 	vldr	s14, [r7, #20]
 8001454:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800145c:	dd07      	ble.n	800146e <order_phases+0x15e>
		cal->phase_order = 0;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001466:	4823      	ldr	r0, [pc, #140]	; (80014f4 <order_phases+0x1e4>)
 8001468:	f00a feaa 	bl	800c1c0 <puts>
 800146c:	e006      	b.n	800147c <order_phases+0x16c>
	}
	else{
		cal->phase_order = 1;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Swapping phase sign\r\n");
 8001476:	4820      	ldr	r0, [pc, #128]	; (80014f8 <order_phases+0x1e8>)
 8001478:	f00a fea2 	bl	800c1c0 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	4619      	mov	r1, r3
 8001482:	481e      	ldr	r0, [pc, #120]	; (80014fc <order_phases+0x1ec>)
 8001484:	f00a fe28 	bl	800c0d8 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f87b 	bl	8000588 <__aeabi_f2d>
 8001492:	4605      	mov	r5, r0
 8001494:	460e      	mov	r6, r1
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff f876 	bl	8000588 <__aeabi_f2d>
 800149c:	4603      	mov	r3, r0
 800149e:	460c      	mov	r4, r1
 80014a0:	e9cd 3400 	strd	r3, r4, [sp]
 80014a4:	462a      	mov	r2, r5
 80014a6:	4633      	mov	r3, r6
 80014a8:	4815      	ldr	r0, [pc, #84]	; (8001500 <order_phases+0x1f0>)
 80014aa:	f00a fe15 	bl	800c0d8 <iprintf>
    PHASE_ORDER = cal->phase_order;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <order_phases+0x1f4>)
 80014b8:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <order_phases+0x1f8>)
 80014c8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80014da:	371c      	adds	r7, #28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014e0:	0800f568 	.word	0x0800f568
 80014e4:	37d1b717 	.word	0x37d1b717
 80014e8:	40a00000 	.word	0x40a00000
 80014ec:	3fd06cbe 	.word	0x3fd06cbe
 80014f0:	40c90fdb 	.word	0x40c90fdb
 80014f4:	0800f58c 	.word	0x0800f58c
 80014f8:	0800f5a4 	.word	0x0800f5a4
 80014fc:	0800f5bc 	.word	0x0800f5bc
 8001500:	0800f5d0 	.word	0x0800f5d0
 8001504:	20008eac 	.word	0x20008eac
 8001508:	20000600 	.word	0x20000600

0800150c <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150e:	b095      	sub	sp, #84	; 0x54
 8001510:	af02      	add	r7, sp, #8
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
 8001518:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7c1b      	ldrb	r3, [r3, #16]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10f      	bne.n	8001542 <calibrate_encoder+0x36>
			printf("Starting offset cal and linearization\r\n");
 8001522:	489d      	ldr	r0, [pc, #628]	; (8001798 <calibrate_encoder+0x28c>)
 8001524:	f00a fe4c 	bl	800c1c0 <puts>
			cal->started = 1;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	741a      	strb	r2, [r3, #16]
			cal->start_count = loop_count;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	683a      	ldr	r2, [r7, #0]
 8001532:	60da      	str	r2, [r3, #12]
			cal->next_sample_time = T1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
			cal->sample_count = 0;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	849a      	strh	r2, [r3, #36]	; 0x24
		}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	68db      	ldr	r3, [r3, #12]
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001552:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800179c <calibrate_encoder+0x290>
 8001556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	edd3 7a05 	vldr	s15, [r3, #20]
 8001566:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800156a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800156e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001572:	d524      	bpl.n	80015be <calibrate_encoder+0xb2>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001586:	3388      	adds	r3, #136	; 0x88
 8001588:	601a      	str	r2, [r3, #0]
        controller->i_d_des = I_CAL;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	4a84      	ldr	r2, [pc, #528]	; (80017a0 <calibrate_encoder+0x294>)
 800158e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 80015a2:	332c      	adds	r3, #44	; 0x2c
 80015a4:	4619      	mov	r1, r3
 80015a6:	68b8      	ldr	r0, [r7, #8]
 80015a8:	f001 fc6a 	bl	8002e80 <commutate>

    	cal->theta_start = encoder->angle_multiturn[0];
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	68da      	ldr	r2, [r3, #12]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	695a      	ldr	r2, [r3, #20]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 80015bc:	e25c      	b.n	8001a78 <calibrate_encoder+0x56c>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015c4:	4b77      	ldr	r3, [pc, #476]	; (80017a4 <calibrate_encoder+0x298>)
 80015c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80015ca:	eddf 6a77 	vldr	s13, [pc, #476]	; 80017a8 <calibrate_encoder+0x29c>
 80015ce:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80015d2:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80015d6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80015da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80015e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	f140 808f 	bpl.w	800170c <calibrate_encoder+0x200>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80015f4:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80017ac <calibrate_encoder+0x2a0>
 80015f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800160c:	3388      	adds	r3, #136	; 0x88
 800160e:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001616:	332c      	adds	r3, #44	; 0x2c
 8001618:	4619      	mov	r1, r3
 800161a:	68b8      	ldr	r0, [r7, #8]
 800161c:	f001 fc30 	bl	8002e80 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	ed93 7a05 	vldr	s14, [r3, #20]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800162c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001634:	dc00      	bgt.n	8001638 <calibrate_encoder+0x12c>
				return;
			}
			cal->sample_count++;

		}
		return;
 8001636:	e21f      	b.n	8001a78 <calibrate_encoder+0x56c>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	edd3 7a02 	vldr	s15, [r3, #8]
 800163e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80017c0 <calibrate_encoder+0x2b4>
 8001642:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001646:	4b57      	ldr	r3, [pc, #348]	; (80017a4 <calibrate_encoder+0x298>)
 8001648:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800164c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80017a8 <calibrate_encoder+0x29c>
 8001650:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001654:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001658:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800165c:	ee17 3a90 	vmov	r3, s15
 8001660:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	13db      	asrs	r3, r3, #15
 8001670:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001678:	4618      	mov	r0, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	441a      	add	r2, r3
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f100 030a 	add.w	r3, r0, #10
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800168e:	461e      	mov	r6, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	330a      	adds	r3, #10
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	685d      	ldr	r5, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff70 	bl	8000588 <__aeabi_f2d>
 80016a8:	4603      	mov	r3, r0
 80016aa:	460c      	mov	r4, r1
 80016ac:	e9cd 3400 	strd	r3, r4, [sp]
 80016b0:	462b      	mov	r3, r5
 80016b2:	69ba      	ldr	r2, [r7, #24]
 80016b4:	4631      	mov	r1, r6
 80016b6:	483e      	ldr	r0, [pc, #248]	; (80017b0 <calibrate_encoder+0x2a4>)
 80016b8:	f00a fd0e 	bl	800c0d8 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016c2:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80017b4 <calibrate_encoder+0x2a8>
 80016c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <calibrate_encoder+0x298>)
 80016de:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016e2:	eddf 6a35 	vldr	s13, [pc, #212]	; 80017b8 <calibrate_encoder+0x2ac>
 80016e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80016f2:	eeb4 7a67 	vcmp.f32	s14, s15
 80016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fa:	f000 81ba 	beq.w	8001a72 <calibrate_encoder+0x566>
			cal->sample_count++;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001702:	3301      	adds	r3, #1
 8001704:	b29a      	uxth	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 800170a:	e1b5      	b.n	8001a78 <calibrate_encoder+0x56c>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001712:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <calibrate_encoder+0x298>)
 8001714:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001718:	eddf 6a28 	vldr	s13, [pc, #160]	; 80017bc <calibrate_encoder+0x2b0>
 800171c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001720:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001724:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001728:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800172c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001730:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	f140 80aa 	bpl.w	8001890 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001742:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80017ac <calibrate_encoder+0x2a0>
 8001746:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <calibrate_encoder+0x294>)
 8001754:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		controller->i_q_des = 0.0f;
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f04f 0200 	mov.w	r2, #0
 800175e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	689a      	ldr	r2, [r3, #8]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800176c:	3388      	adds	r3, #136	; 0x88
 800176e:	601a      	str	r2, [r3, #0]
		commutate(controller, &cal->cal_position);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 8001776:	332c      	adds	r3, #44	; 0x2c
 8001778:	4619      	mov	r1, r3
 800177a:	68b8      	ldr	r0, [r7, #8]
 800177c:	f001 fb80 	bl	8002e80 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	ed93 7a05 	vldr	s14, [r3, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800178c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001794:	dc16      	bgt.n	80017c4 <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001796:	e16e      	b.n	8001a76 <calibrate_encoder+0x56a>
 8001798:	0800f5ec 	.word	0x0800f5ec
 800179c:	37d1b717 	.word	0x37d1b717
 80017a0:	40a00000 	.word	0x40a00000
 80017a4:	20000600 	.word	0x20000600
 80017a8:	40c90fdb 	.word	0x40c90fdb
 80017ac:	3983126e 	.word	0x3983126e
 80017b0:	0800f614 	.word	0x0800f614
 80017b4:	3ba0d97c 	.word	0x3ba0d97c
 80017b8:	43000000 	.word	0x43000000
 80017bc:	41490fdb 	.word	0x41490fdb
 80017c0:	47800000 	.word	0x47800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 8154 	beq.w	8001a76 <calibrate_encoder+0x56a>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80017d4:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80017c0 <calibrate_encoder+0x2b4>
 80017d8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017dc:	4ba8      	ldr	r3, [pc, #672]	; (8001a80 <calibrate_encoder+0x574>)
 80017de:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017e2:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001a84 <calibrate_encoder+0x578>
 80017e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017f2:	ee17 3a90 	vmov	r3, s15
 80017f6:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80017fc:	6a3b      	ldr	r3, [r7, #32]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	13db      	asrs	r3, r3, #15
 8001806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	4413      	add	r3, r2
 800180e:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	330a      	adds	r3, #10
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	4413      	add	r3, r2
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8001826:	4610      	mov	r0, r2
 8001828:	0fda      	lsrs	r2, r3, #31
 800182a:	4413      	add	r3, r2
 800182c:	105b      	asrs	r3, r3, #1
 800182e:	4619      	mov	r1, r3
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	f100 030a 	add.w	r3, r0, #10
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001840:	461e      	mov	r6, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	330a      	adds	r3, #10
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	685d      	ldr	r5, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	4618      	mov	r0, r3
 8001856:	f7fe fe97 	bl	8000588 <__aeabi_f2d>
 800185a:	4603      	mov	r3, r0
 800185c:	460c      	mov	r4, r1
 800185e:	e9cd 3400 	strd	r3, r4, [sp]
 8001862:	462b      	mov	r3, r5
 8001864:	6a3a      	ldr	r2, [r7, #32]
 8001866:	4631      	mov	r1, r6
 8001868:	4887      	ldr	r0, [pc, #540]	; (8001a88 <calibrate_encoder+0x57c>)
 800186a:	f00a fc35 	bl	800c0d8 <iprintf>
			cal->sample_count--;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001872:	3b01      	subs	r3, #1
 8001874:	b29a      	uxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001880:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8001a8c <calibrate_encoder+0x580>
 8001884:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 800188e:	e0f2      	b.n	8001a76 <calibrate_encoder+0x56a>
    }

    reset_foc(controller);
 8001890:	68b8      	ldr	r0, [r7, #8]
 8001892:	f001 fa0b 	bl	8002cac <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800189a:	2300      	movs	r3, #0
 800189c:	643b      	str	r3, [r7, #64]	; 0x40
 800189e:	e00b      	b.n	80018b8 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018a4:	330a      	adds	r3, #10
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018ae:	4413      	add	r3, r2
 80018b0:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80018b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018b4:	3301      	adds	r3, #1
 80018b6:	643b      	str	r3, [r7, #64]	; 0x40
 80018b8:	4b71      	ldr	r3, [pc, #452]	; (8001a80 <calibrate_encoder+0x574>)
 80018ba:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018c2:	ee17 3a90 	vmov	r3, s15
 80018c6:	01db      	lsls	r3, r3, #7
 80018c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018ca:	429a      	cmp	r2, r3
 80018cc:	dbe8      	blt.n	80018a0 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 80018ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018d8:	4b69      	ldr	r3, [pc, #420]	; (8001a80 <calibrate_encoder+0x574>)
 80018da:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018de:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001a90 <calibrate_encoder+0x584>
 80018e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ee:	ee17 2a90 	vmov	r2, s15
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 80018f6:	2380      	movs	r3, #128	; 0x80
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (ENC_CPR-cal->error_arr[0])*N_LUT/ENC_CPR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fe:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 8001902:	01db      	lsls	r3, r3, #7
 8001904:	2b00      	cmp	r3, #0
 8001906:	da02      	bge.n	800190e <calibrate_encoder+0x402>
 8001908:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800190c:	33ff      	adds	r3, #255	; 0xff
 800190e:	141b      	asrs	r3, r3, #16
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001912:	2300      	movs	r3, #0
 8001914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001916:	e0a0      	b.n	8001a5a <calibrate_encoder+0x54e>
			int moving_avg = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 800191c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191e:	425b      	negs	r3, r3
 8001920:	0fda      	lsrs	r2, r3, #31
 8001922:	4413      	add	r3, r2
 8001924:	105b      	asrs	r3, r3, #1
 8001926:	637b      	str	r3, [r7, #52]	; 0x34
 8001928:	e068      	b.n	80019fc <calibrate_encoder+0x4f0>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 800192a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001934:	4b52      	ldr	r3, [pc, #328]	; (8001a80 <calibrate_encoder+0x574>)
 8001936:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800193a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193e:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8001a90 <calibrate_encoder+0x584>
 8001942:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001946:	eddf 6a52 	vldr	s13, [pc, #328]	; 8001a90 <calibrate_encoder+0x584>
 800194a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800194e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800195c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001960:	ee17 3a90 	vmov	r3, s15
 8001964:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001968:	2b00      	cmp	r3, #0
 800196a:	da13      	bge.n	8001994 <calibrate_encoder+0x488>
 800196c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800196e:	ee07 3a90 	vmov	s15, r3
 8001972:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001976:	4b42      	ldr	r3, [pc, #264]	; (8001a80 <calibrate_encoder+0x574>)
 8001978:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800197c:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001a90 <calibrate_encoder+0x584>
 8001980:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001988:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800198c:	ee17 3a90 	vmov	r3, s15
 8001990:	633b      	str	r3, [r7, #48]	; 0x30
 8001992:	e027      	b.n	80019e4 <calibrate_encoder+0x4d8>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001996:	ee07 3a90 	vmov	s15, r3
 800199a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800199e:	4b38      	ldr	r3, [pc, #224]	; (8001a80 <calibrate_encoder+0x574>)
 80019a0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019a4:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001a90 <calibrate_encoder+0x584>
 80019a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80019b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019bc:	dd12      	ble.n	80019e4 <calibrate_encoder+0x4d8>
 80019be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019c8:	4b2d      	ldr	r3, [pc, #180]	; (8001a80 <calibrate_encoder+0x574>)
 80019ca:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019ce:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001a90 <calibrate_encoder+0x584>
 80019d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019de:	ee17 3a90 	vmov	r3, s15
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019e8:	330a      	adds	r3, #10
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80019f2:	4413      	add	r3, r2
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 80019f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019f8:	3301      	adds	r3, #1
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
 80019fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fe:	0fda      	lsrs	r2, r3, #31
 8001a00:	4413      	add	r3, r2
 8001a02:	105b      	asrs	r3, r3, #1
 8001a04:	461a      	mov	r2, r3
 8001a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	db8e      	blt.n	800192a <calibrate_encoder+0x41e>
			}
			moving_avg = moving_avg/window;
 8001a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a14:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a1a:	4413      	add	r3, r2
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a20:	2b7f      	cmp	r3, #127	; 0x7f
 8001a22:	dd02      	ble.n	8001a2a <calibrate_encoder+0x51e>
 8001a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a26:	3b80      	subs	r3, #128	; 0x80
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a30:	1ad2      	subs	r2, r2, r3
 8001a32:	6879      	ldr	r1, [r7, #4]
 8001a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a36:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001a3a:	330a      	adds	r3, #10
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	69db      	ldr	r3, [r3, #28]
 8001a46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a4e:	4811      	ldr	r0, [pc, #68]	; (8001a94 <calibrate_encoder+0x588>)
 8001a50:	f00a fb42 	bl	800c0d8 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a56:	3301      	adds	r3, #1
 8001a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8001a5e:	f77f af5b 	ble.w	8001918 <calibrate_encoder+0x40c>

		}

	cal->started = 0;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001a70:	e002      	b.n	8001a78 <calibrate_encoder+0x56c>
				return;
 8001a72:	bf00      	nop
 8001a74:	e000      	b.n	8001a78 <calibrate_encoder+0x56c>
		return;
 8001a76:	bf00      	nop
}
 8001a78:	374c      	adds	r7, #76	; 0x4c
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000600 	.word	0x20000600
 8001a84:	40c90fdb 	.word	0x40c90fdb
 8001a88:	0800f614 	.word	0x0800f614
 8001a8c:	3ba0d97c 	.word	0x3ba0d97c
 8001a90:	43000000 	.word	0x43000000
 8001a94:	0800f624 	.word	0x0800f624

08001a98 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8001a9c:	4b17      	ldr	r3, [pc, #92]	; (8001afc <MX_CAN1_Init+0x64>)
 8001a9e:	4a18      	ldr	r2, [pc, #96]	; (8001b00 <MX_CAN1_Init+0x68>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001aa2:	4b16      	ldr	r3, [pc, #88]	; (8001afc <MX_CAN1_Init+0x64>)
 8001aa4:	2205      	movs	r2, #5
 8001aa6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	; (8001afc <MX_CAN1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001aae:	4b13      	ldr	r3, [pc, #76]	; (8001afc <MX_CAN1_Init+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <MX_CAN1_Init+0x64>)
 8001ab6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001aba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001abc:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <MX_CAN1_Init+0x64>)
 8001abe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001ac2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001ac4:	4b0d      	ldr	r3, [pc, #52]	; (8001afc <MX_CAN1_Init+0x64>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001aca:	4b0c      	ldr	r3, [pc, #48]	; (8001afc <MX_CAN1_Init+0x64>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001ad0:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <MX_CAN1_Init+0x64>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001ad6:	4b09      	ldr	r3, [pc, #36]	; (8001afc <MX_CAN1_Init+0x64>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <MX_CAN1_Init+0x64>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001ae2:	4b06      	ldr	r3, [pc, #24]	; (8001afc <MX_CAN1_Init+0x64>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001ae8:	4804      	ldr	r0, [pc, #16]	; (8001afc <MX_CAN1_Init+0x64>)
 8001aea:	f004 fc19 	bl	8006320 <HAL_CAN_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001af4:	f002 fd38 	bl	8004568 <Error_Handler>
  }

}
 8001af8:	bf00      	nop
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000320 	.word	0x20000320
 8001b00:	40006400 	.word	0x40006400

08001b04 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08a      	sub	sp, #40	; 0x28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	60da      	str	r2, [r3, #12]
 8001b1a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_CAN_MspInit+0x94>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d134      	bne.n	8001b90 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <HAL_CAN_MspInit+0x98>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a1b      	ldr	r2, [pc, #108]	; (8001b9c <HAL_CAN_MspInit+0x98>)
 8001b30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b19      	ldr	r3, [pc, #100]	; (8001b9c <HAL_CAN_MspInit+0x98>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <HAL_CAN_MspInit+0x98>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	4a14      	ldr	r2, [pc, #80]	; (8001b9c <HAL_CAN_MspInit+0x98>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6313      	str	r3, [r2, #48]	; 0x30
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_CAN_MspInit+0x98>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001b70:	2309      	movs	r3, #9
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <HAL_CAN_MspInit+0x9c>)
 8001b7c:	f005 fb44 	bl	8007208 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	2014      	movs	r0, #20
 8001b86:	f005 fae6 	bl	8007156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001b8a:	2014      	movs	r0, #20
 8001b8c:	f005 faff 	bl	800718e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001b90:	bf00      	nop
 8001b92:	3728      	adds	r7, #40	; 0x28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40006400 	.word	0x40006400
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020400 	.word	0x40020400

08001ba4 <can_rx_init>:
  }
} 

/* USER CODE BEGIN 1 */

void can_rx_init(CANRxMessage *msg){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	msg->filter.FilterFIFOAssignment=CAN_FILTER_FIFO0; 	// set fifo assignment
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterIdHigh=CAN_ID<<5; 				// CAN ID
 8001bb2:	4b11      	ldr	r3, [pc, #68]	; (8001bf8 <can_rx_init+0x54>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	015b      	lsls	r3, r3, #5
 8001bb8:	461a      	mov	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
	msg->filter.FilterIdLow=0x0;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	62da      	str	r2, [r3, #44]	; 0x2c
	msg->filter.FilterMaskIdHigh=0xFFF;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001bca:	631a      	str	r2, [r3, #48]	; 0x30
	msg->filter.FilterMaskIdLow=0;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterScale=CAN_FILTERSCALE_32BIT;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterActivation=ENABLE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2201      	movs	r2, #1
 8001be2:	649a      	str	r2, [r3, #72]	; 0x48
	HAL_CAN_ConfigFilter(&CAN_H, &msg->filter);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3328      	adds	r3, #40	; 0x28
 8001be8:	4619      	mov	r1, r3
 8001bea:	4804      	ldr	r0, [pc, #16]	; (8001bfc <can_rx_init+0x58>)
 8001bec:	f004 fc94 	bl	8006518 <HAL_CAN_ConfigFilter>
}
 8001bf0:	bf00      	nop
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20008eac 	.word	0x20008eac
 8001bfc:	20000320 	.word	0x20000320

08001c00 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	msg->tx_header.DLC = 6; 			// message size of 8 byte
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2206      	movs	r2, #6
 8001c0c:	619a      	str	r2, [r3, #24]
	msg->tx_header.IDE=CAN_ID_STD; 		// set identifier to standard
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	611a      	str	r2, [r3, #16]
	msg->tx_header.RTR=CAN_RTR_DATA; 	// set data type to remote transmission request?
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	615a      	str	r2, [r3, #20]
	msg->tx_header.StdId = CAN_MASTER;  // recipient CAN ID
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <can_tx_init+0x30>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	609a      	str	r2, [r3, #8]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	20008eac 	.word	0x20008eac

08001c34 <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t){
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6178      	str	r0, [r7, #20]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c42:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c46:	ed87 1a01 	vstr	s2, [r7, #4]
 8001c4a:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 8001c4c:	2010      	movs	r0, #16
 8001c4e:	eeb2 1a09 	vmov.f32	s2, #41	; 0x41480000  12.5
 8001c52:	eefa 0a09 	vmov.f32	s1, #169	; 0xc1480000 -12.5
 8001c56:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c5a:	f002 fd49 	bl	80046f0 <float_to_uint>
 8001c5e:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 8001c60:	200c      	movs	r0, #12
 8001c62:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8001cd0 <pack_reply+0x9c>
 8001c66:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8001cd4 <pack_reply+0xa0>
 8001c6a:	ed97 0a02 	vldr	s0, [r7, #8]
 8001c6e:	f002 fd3f 	bl	80046f0 <float_to_uint>
 8001c72:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -T_MAX, T_MAX, 12);
 8001c74:	200c      	movs	r0, #12
 8001c76:	eeb3 1a02 	vmov.f32	s2, #50	; 0x41900000  18.0
 8001c7a:	eefb 0a02 	vmov.f32	s1, #178	; 0xc1900000 -18.0
 8001c7e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c82:	f002 fd35 	bl	80046f0 <float_to_uint>
 8001c86:	61f8      	str	r0, [r7, #28]
    msg->data[0] = id;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	7cfa      	ldrb	r2, [r7, #19]
 8001c8c:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	121b      	asrs	r3, r3, #8
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	111b      	asrs	r3, r3, #4
 8001ca4:	b2da      	uxtb	r2, r3
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	011b      	lsls	r3, r3, #4
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	121b      	asrs	r3, r3, #8
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	b2da      	uxtb	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	719a      	strb	r2, [r3, #6]
    }
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	; 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	42820000 	.word	0x42820000
 8001cd4:	c2820000 	.word	0xc2820000

08001cd8 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 8001cd8:	b084      	sub	sp, #16
 8001cda:	b590      	push	{r4, r7, lr}
 8001cdc:	b087      	sub	sp, #28
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8001ce8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 8001cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001d00:	0912      	lsrs	r2, r2, #4
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8001d08:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001d0c:	021b      	lsls	r3, r3, #8
 8001d0e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001d12:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8001d1a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001d1e:	011b      	lsls	r3, r3, #4
 8001d20:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001d24:	0912      	lsrs	r2, r2, #4
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8001d2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d30:	021b      	lsls	r3, r3, #8
 8001d32:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001d36:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8001d3e:	2110      	movs	r1, #16
 8001d40:	eef2 0a09 	vmov.f32	s1, #41	; 0x41480000  12.5
 8001d44:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 8001d48:	6978      	ldr	r0, [r7, #20]
 8001d4a:	f002 fd04 	bl	8004756 <uint_to_float>
 8001d4e:	eef0 7a40 	vmov.f32	s15, s0
 8001d52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d54:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 8001d58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d5a:	1d1c      	adds	r4, r3, #4
 8001d5c:	210c      	movs	r1, #12
 8001d5e:	eddf 0a1f 	vldr	s1, [pc, #124]	; 8001ddc <unpack_cmd+0x104>
 8001d62:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001de0 <unpack_cmd+0x108>
 8001d66:	6938      	ldr	r0, [r7, #16]
 8001d68:	f002 fcf5 	bl	8004756 <uint_to_float>
 8001d6c:	eef0 7a40 	vmov.f32	s15, s0
 8001d70:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 8001d74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d76:	f103 0408 	add.w	r4, r3, #8
 8001d7a:	210c      	movs	r1, #12
 8001d7c:	eddf 0a19 	vldr	s1, [pc, #100]	; 8001de4 <unpack_cmd+0x10c>
 8001d80:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8001de8 <unpack_cmd+0x110>
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f002 fce6 	bl	8004756 <uint_to_float>
 8001d8a:	eef0 7a40 	vmov.f32	s15, s0
 8001d8e:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 8001d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d94:	f103 040c 	add.w	r4, r3, #12
 8001d98:	210c      	movs	r1, #12
 8001d9a:	eef1 0a04 	vmov.f32	s1, #20	; 0x40a00000  5.0
 8001d9e:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8001de8 <unpack_cmd+0x110>
 8001da2:	68b8      	ldr	r0, [r7, #8]
 8001da4:	f002 fcd7 	bl	8004756 <uint_to_float>
 8001da8:	eef0 7a40 	vmov.f32	s15, s0
 8001dac:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, T_MIN, T_MAX, 12);
 8001db0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001db2:	f103 0410 	add.w	r4, r3, #16
 8001db6:	210c      	movs	r1, #12
 8001db8:	eef3 0a02 	vmov.f32	s1, #50	; 0x41900000  18.0
 8001dbc:	eebb 0a02 	vmov.f32	s0, #178	; 0xc1900000 -18.0
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f002 fcc8 	bl	8004756 <uint_to_float>
 8001dc6:	eef0 7a40 	vmov.f32	s15, s0
 8001dca:	edc4 7a00 	vstr	s15, [r4]
    //printf("Received   ");
    //printf("%.3f  %.3f  %.3f  %.3f  %.3f   %.3f", controller->p_des, controller->v_des, controller->kp, controller->kd, controller->t_ff, controller->i_q_ref);
    //printf("\n\r");
    }
 8001dce:	bf00      	nop
 8001dd0:	371c      	adds	r7, #28
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001dd8:	b004      	add	sp, #16
 8001dda:	4770      	bx	lr
 8001ddc:	42820000 	.word	0x42820000
 8001de0:	c2820000 	.word	0xc2820000
 8001de4:	43fa0000 	.word	0x43fa0000
 8001de8:	00000000 	.word	0x00000000

08001dec <drv_spi_write>:
#include "drv8323.h"
#include <stdio.h>
#include "usart.h"
#include "hw_config.h"

uint16_t drv_spi_write(DRVStruct * drv, uint16_t val){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af02      	add	r7, sp, #8
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	460b      	mov	r3, r1
 8001df6:	807b      	strh	r3, [r7, #2]
	drv->spi_tx_word = val;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	887a      	ldrh	r2, [r7, #2]
 8001dfc:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_RESET ); 	// CS low
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2110      	movs	r1, #16
 8001e02:	480f      	ldr	r0, [pc, #60]	; (8001e40 <drv_spi_write+0x54>)
 8001e04:	f005 fb92 	bl	800752c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&DRV_SPI, (uint8_t*)drv->spi_tx_buff, (uint8_t *)drv->spi_rx_buff, 1, 100);
 8001e08:	6879      	ldr	r1, [r7, #4]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	1c9a      	adds	r2, r3, #2
 8001e0e:	2364      	movs	r3, #100	; 0x64
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	2301      	movs	r3, #1
 8001e14:	480b      	ldr	r0, [pc, #44]	; (8001e44 <drv_spi_write+0x58>)
 8001e16:	f006 f96b 	bl	80080f0 <HAL_SPI_TransmitReceive>
	while( DRV_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8001e1a:	bf00      	nop
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <drv_spi_write+0x58>)
 8001e1e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d0f9      	beq.n	8001e1c <drv_spi_write+0x30>
	HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 8001e28:	2201      	movs	r2, #1
 8001e2a:	2110      	movs	r1, #16
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <drv_spi_write+0x54>)
 8001e2e:	f005 fb7d 	bl	800752c <HAL_GPIO_WritePin>
	return drv->spi_rx_word;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	885b      	ldrh	r3, [r3, #2]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40020000 	.word	0x40020000
 8001e44:	200093a8 	.word	0x200093a8

08001e48 <drv_read_FSR1>:
uint16_t drv_read_FSR1(DRVStruct drv){
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	463b      	mov	r3, r7
 8001e50:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR1);
 8001e54:	463b      	mov	r3, r7
 8001e56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff ffc6 	bl	8001dec <drv_spi_write>
 8001e60:	4603      	mov	r3, r0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <drv_read_FSR2>:

uint16_t drv_read_FSR2(DRVStruct drv){
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	463b      	mov	r3, r7
 8001e72:	e883 0003 	stmia.w	r3, {r0, r1}
	return drv_spi_write(&drv, (1<<15)|FSR2);
 8001e76:	463b      	mov	r3, r7
 8001e78:	f248 0101 	movw	r1, #32769	; 0x8001
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff ffb5 	bl	8001dec <drv_spi_write>
 8001e82:	4603      	mov	r3, r0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <drv_read_register>:

uint16_t drv_read_register(DRVStruct drv, int reg){
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	f107 0308 	add.w	r3, r7, #8
 8001e96:	e883 0003 	stmia.w	r3, {r0, r1}
 8001e9a:	607a      	str	r2, [r7, #4]
	return drv_spi_write(&drv, (1<<15)|(reg<<11));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	02db      	lsls	r3, r3, #11
 8001ea0:	b21b      	sxth	r3, r3
 8001ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eaa:	b21b      	sxth	r3, r3
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	f107 0308 	add.w	r3, r7, #8
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff99 	bl	8001dec <drv_spi_write>
 8001eba:	4603      	mov	r3, r0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <drv_write_register>:
void drv_write_register(DRVStruct drv, int reg, int val){
 8001ec4:	b590      	push	{r4, r7, lr}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	f107 0408 	add.w	r4, r7, #8
 8001ece:	e884 0003 	stmia.w	r4, {r0, r1}
 8001ed2:	607a      	str	r2, [r7, #4]
 8001ed4:	603b      	str	r3, [r7, #0]
	drv_spi_write(&drv, (reg<<11)|val);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	02db      	lsls	r3, r3, #11
 8001eda:	b21a      	sxth	r2, r3
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b21b      	sxth	r3, r3
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	f107 0308 	add.w	r3, r7, #8
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff ff7d 	bl	8001dec <drv_spi_write>
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd90      	pop	{r4, r7, pc}

08001efa <drv_write_DCR>:
void drv_write_DCR(DRVStruct drv, int DIS_CPUV, int DIS_GDF, int OTW_REP, int PWM_MODE, int PWM_COM, int PWM_DIR, int COAST, int BRAKE, int CLR_FLT){
 8001efa:	b590      	push	{r4, r7, lr}
 8001efc:	b087      	sub	sp, #28
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	f107 0408 	add.w	r4, r7, #8
 8001f04:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	603b      	str	r3, [r7, #0]
	uint16_t val = (DCR<<11) | (DIS_CPUV<<9) | (DIS_GDF<<8) | (OTW_REP<<7) | (PWM_MODE<<5) | (PWM_COM<<4) | (PWM_DIR<<3) | (COAST<<2) | (BRAKE<<1) | CLR_FLT;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	025b      	lsls	r3, r3, #9
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f16:	b21a      	sxth	r2, r3
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	01db      	lsls	r3, r3, #7
 8001f26:	b21b      	sxth	r3, r3
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	b21a      	sxth	r2, r3
 8001f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2e:	015b      	lsls	r3, r3, #5
 8001f30:	b21b      	sxth	r3, r3
 8001f32:	4313      	orrs	r3, r2
 8001f34:	b21a      	sxth	r2, r3
 8001f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	b21b      	sxth	r3, r3
 8001f46:	4313      	orrs	r3, r2
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b21a      	sxth	r2, r3
 8001f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	b21a      	sxth	r2, r3
 8001f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f60:	b21b      	sxth	r3, r3
 8001f62:	4313      	orrs	r3, r2
 8001f64:	b21b      	sxth	r3, r3
 8001f66:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8001f68:	8afa      	ldrh	r2, [r7, #22]
 8001f6a:	f107 0308 	add.w	r3, r7, #8
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff3b 	bl	8001dec <drv_spi_write>
}
 8001f76:	bf00      	nop
 8001f78:	371c      	adds	r7, #28
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd90      	pop	{r4, r7, pc}

08001f7e <drv_write_OCPCR>:
}
void drv_write_LSR(DRVStruct drv, int CBC, int TDRIVE, int IDRIVEP_LS, int IDRIVEN_LS){
	uint16_t val = (LSR<<11) | (CBC<<10) | (TDRIVE<<8) | (IDRIVEP_LS<<4) | IDRIVEN_LS;
	drv_spi_write(&drv, val);
}
void drv_write_OCPCR(DRVStruct drv, int TRETRY, int DEAD_TIME, int OCP_MODE, int OCP_DEG, int VDS_LVL){
 8001f7e:	b590      	push	{r4, r7, lr}
 8001f80:	b087      	sub	sp, #28
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	f107 0408 	add.w	r4, r7, #8
 8001f88:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	603b      	str	r3, [r7, #0]
	uint16_t val = (OCPCR<<11) | (TRETRY<<10) | (DEAD_TIME<<8) | (OCP_MODE<<6) | (OCP_DEG<<4) | VDS_LVL;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	029b      	lsls	r3, r3, #10
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	b21a      	sxth	r2, r3
 8001fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa8:	019b      	lsls	r3, r3, #6
 8001faa:	b21b      	sxth	r3, r3
 8001fac:	4313      	orrs	r3, r2
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	b21b      	sxth	r3, r3
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fbc:	b21b      	sxth	r3, r3
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	b21b      	sxth	r3, r3
 8001fc2:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8001fc4:	8afa      	ldrh	r2, [r7, #22]
 8001fc6:	f107 0308 	add.w	r3, r7, #8
 8001fca:	4611      	mov	r1, r2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff ff0d 	bl	8001dec <drv_spi_write>
}
 8001fd2:	bf00      	nop
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd90      	pop	{r4, r7, pc}

08001fda <drv_write_CSACR>:
void drv_write_CSACR(DRVStruct drv, int CSA_FET, int VREF_DIV, int LS_REF, int CSA_GAIN, int DIS_SEN, int CSA_CAL_A, int CSA_CAL_B, int CSA_CAL_C, int SEN_LVL){
 8001fda:	b590      	push	{r4, r7, lr}
 8001fdc:	b087      	sub	sp, #28
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	f107 0408 	add.w	r4, r7, #8
 8001fe4:	e884 0003 	stmia.w	r4, {r0, r1}
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	603b      	str	r3, [r7, #0]
	uint16_t val = (CSACR<<11) | (CSA_FET<<10) | (VREF_DIV<<9) | (LS_REF<<8) | (CSA_GAIN<<6) | (DIS_SEN<<5) | (CSA_CAL_A<<4) | (CSA_CAL_B<<3) | (CSA_CAL_C<<2) | SEN_LVL;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	029b      	lsls	r3, r3, #10
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001ff6:	b21a      	sxth	r2, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	025b      	lsls	r3, r3, #9
 8001ffc:	b21b      	sxth	r3, r3
 8001ffe:	4313      	orrs	r3, r2
 8002000:	b21a      	sxth	r2, r3
 8002002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	b21b      	sxth	r3, r3
 8002008:	4313      	orrs	r3, r2
 800200a:	b21a      	sxth	r2, r3
 800200c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800200e:	019b      	lsls	r3, r3, #6
 8002010:	b21b      	sxth	r3, r3
 8002012:	4313      	orrs	r3, r2
 8002014:	b21a      	sxth	r2, r3
 8002016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002018:	015b      	lsls	r3, r3, #5
 800201a:	b21b      	sxth	r3, r3
 800201c:	4313      	orrs	r3, r2
 800201e:	b21a      	sxth	r2, r3
 8002020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	b21b      	sxth	r3, r3
 8002026:	4313      	orrs	r3, r2
 8002028:	b21a      	sxth	r2, r3
 800202a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	b21b      	sxth	r3, r3
 8002030:	4313      	orrs	r3, r2
 8002032:	b21a      	sxth	r2, r3
 8002034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	b21b      	sxth	r3, r3
 800203a:	4313      	orrs	r3, r2
 800203c:	b21a      	sxth	r2, r3
 800203e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002040:	b21b      	sxth	r3, r3
 8002042:	4313      	orrs	r3, r2
 8002044:	b21b      	sxth	r3, r3
 8002046:	82fb      	strh	r3, [r7, #22]
	drv_spi_write(&drv, val);
 8002048:	8afa      	ldrh	r2, [r7, #22]
 800204a:	f107 0308 	add.w	r3, r7, #8
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f7ff fecb 	bl	8001dec <drv_spi_write>
}
 8002056:	bf00      	nop
 8002058:	371c      	adds	r7, #28
 800205a:	46bd      	mov	sp, r7
 800205c:	bd90      	pop	{r4, r7, pc}

0800205e <drv_enable_gd>:
void drv_enable_gd(DRVStruct drv){
 800205e:	b580      	push	{r7, lr}
 8002060:	b084      	sub	sp, #16
 8002062:	af00      	add	r7, sp, #0
 8002064:	463b      	mov	r3, r7
 8002066:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) & (~(0x1<<2));
 800206a:	2202      	movs	r2, #2
 800206c:	463b      	mov	r3, r7
 800206e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002072:	f7ff ff0b 	bl	8001e8c <drv_read_register>
 8002076:	4603      	mov	r3, r0
 8002078:	f023 0304 	bic.w	r3, r3, #4
 800207c:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 800207e:	89fb      	ldrh	r3, [r7, #14]
 8002080:	2202      	movs	r2, #2
 8002082:	4639      	mov	r1, r7
 8002084:	c903      	ldmia	r1, {r0, r1}
 8002086:	f7ff ff1d 	bl	8001ec4 <drv_write_register>
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <drv_disable_gd>:
void drv_disable_gd(DRVStruct drv){
 8002092:	b580      	push	{r7, lr}
 8002094:	b084      	sub	sp, #16
 8002096:	af00      	add	r7, sp, #0
 8002098:	463b      	mov	r3, r7
 800209a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t val = (drv_read_register(drv, DCR)) | (0x1<<2);
 800209e:	2202      	movs	r2, #2
 80020a0:	463b      	mov	r3, r7
 80020a2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020a6:	f7ff fef1 	bl	8001e8c <drv_read_register>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f043 0304 	orr.w	r3, r3, #4
 80020b0:	81fb      	strh	r3, [r7, #14]
	drv_write_register(drv, DCR, val);
 80020b2:	89fb      	ldrh	r3, [r7, #14]
 80020b4:	2202      	movs	r2, #2
 80020b6:	4639      	mov	r1, r7
 80020b8:	c903      	ldmia	r1, {r0, r1}
 80020ba:	f7ff ff03 	bl	8001ec4 <drv_write_register>
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <drv_print_faults>:
void drv_calibrate(DRVStruct drv){
	uint16_t val = (0x1<<4) + (0x1<<3) + (0x1<<2);
	drv_write_register(drv, CSACR, val);
}
void drv_print_faults(DRVStruct drv){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	463b      	mov	r3, r7
 80020d0:	e883 0003 	stmia.w	r3, {r0, r1}
    uint16_t val1 = drv_read_FSR1(drv);
 80020d4:	463b      	mov	r3, r7
 80020d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020da:	f7ff feb5 	bl	8001e48 <drv_read_FSR1>
 80020de:	4603      	mov	r3, r0
 80020e0:	81fb      	strh	r3, [r7, #14]
    uint16_t val2 = drv_read_FSR2(drv);
 80020e2:	463b      	mov	r3, r7
 80020e4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020e8:	f7ff febf 	bl	8001e6a <drv_read_FSR2>
 80020ec:	4603      	mov	r3, r0
 80020ee:	81bb      	strh	r3, [r7, #12]

    if(val1 & (1<<10)){printf("\n\rFAULT\n\r");}
 80020f0:	89fb      	ldrh	r3, [r7, #14]
 80020f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <drv_print_faults+0x38>
 80020fa:	4857      	ldr	r0, [pc, #348]	; (8002258 <drv_print_faults+0x190>)
 80020fc:	f009 ffec 	bl	800c0d8 <iprintf>

    if(val1 & (1<<9)){printf("VDS_OCP\n\r");}
 8002100:	89fb      	ldrh	r3, [r7, #14]
 8002102:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002106:	2b00      	cmp	r3, #0
 8002108:	d002      	beq.n	8002110 <drv_print_faults+0x48>
 800210a:	4854      	ldr	r0, [pc, #336]	; (800225c <drv_print_faults+0x194>)
 800210c:	f009 ffe4 	bl	800c0d8 <iprintf>
    if(val1 & (1<<8)){printf("GDF\n\r");}
 8002110:	89fb      	ldrh	r3, [r7, #14]
 8002112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002116:	2b00      	cmp	r3, #0
 8002118:	d002      	beq.n	8002120 <drv_print_faults+0x58>
 800211a:	4851      	ldr	r0, [pc, #324]	; (8002260 <drv_print_faults+0x198>)
 800211c:	f009 ffdc 	bl	800c0d8 <iprintf>
    if(val1 & (1<<7)){printf("UVLO\n\r");}
 8002120:	89fb      	ldrh	r3, [r7, #14]
 8002122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002126:	2b00      	cmp	r3, #0
 8002128:	d002      	beq.n	8002130 <drv_print_faults+0x68>
 800212a:	484e      	ldr	r0, [pc, #312]	; (8002264 <drv_print_faults+0x19c>)
 800212c:	f009 ffd4 	bl	800c0d8 <iprintf>
    if(val1 & (1<<6)){printf("OTSD\n\r");}
 8002130:	89fb      	ldrh	r3, [r7, #14]
 8002132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <drv_print_faults+0x78>
 800213a:	484b      	ldr	r0, [pc, #300]	; (8002268 <drv_print_faults+0x1a0>)
 800213c:	f009 ffcc 	bl	800c0d8 <iprintf>
    if(val1 & (1<<5)){printf("VDS_HA\n\r");}
 8002140:	89fb      	ldrh	r3, [r7, #14]
 8002142:	f003 0320 	and.w	r3, r3, #32
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <drv_print_faults+0x88>
 800214a:	4848      	ldr	r0, [pc, #288]	; (800226c <drv_print_faults+0x1a4>)
 800214c:	f009 ffc4 	bl	800c0d8 <iprintf>
    if(val1 & (1<<4)){printf("VDS_LA\n\r");}
 8002150:	89fb      	ldrh	r3, [r7, #14]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	d002      	beq.n	8002160 <drv_print_faults+0x98>
 800215a:	4845      	ldr	r0, [pc, #276]	; (8002270 <drv_print_faults+0x1a8>)
 800215c:	f009 ffbc 	bl	800c0d8 <iprintf>
    if(val1 & (1<<3)){printf("VDS_HB\n\r");}
 8002160:	89fb      	ldrh	r3, [r7, #14]
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <drv_print_faults+0xa8>
 800216a:	4842      	ldr	r0, [pc, #264]	; (8002274 <drv_print_faults+0x1ac>)
 800216c:	f009 ffb4 	bl	800c0d8 <iprintf>
    if(val1 & (1<<2)){printf("VDS_LB\n\r");}
 8002170:	89fb      	ldrh	r3, [r7, #14]
 8002172:	f003 0304 	and.w	r3, r3, #4
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <drv_print_faults+0xb8>
 800217a:	483f      	ldr	r0, [pc, #252]	; (8002278 <drv_print_faults+0x1b0>)
 800217c:	f009 ffac 	bl	800c0d8 <iprintf>
    if(val1 & (1<<1)){printf("VDS_HC\n\r");}
 8002180:	89fb      	ldrh	r3, [r7, #14]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d002      	beq.n	8002190 <drv_print_faults+0xc8>
 800218a:	483c      	ldr	r0, [pc, #240]	; (800227c <drv_print_faults+0x1b4>)
 800218c:	f009 ffa4 	bl	800c0d8 <iprintf>
    if(val1 & (1)){printf("VDS_LC\n\r");}
 8002190:	89fb      	ldrh	r3, [r7, #14]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d002      	beq.n	80021a0 <drv_print_faults+0xd8>
 800219a:	4839      	ldr	r0, [pc, #228]	; (8002280 <drv_print_faults+0x1b8>)
 800219c:	f009 ff9c 	bl	800c0d8 <iprintf>

    if(val2 & (1<<10)){printf("SA_OC\n\r");}
 80021a0:	89bb      	ldrh	r3, [r7, #12]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <drv_print_faults+0xe8>
 80021aa:	4836      	ldr	r0, [pc, #216]	; (8002284 <drv_print_faults+0x1bc>)
 80021ac:	f009 ff94 	bl	800c0d8 <iprintf>
    if(val2 & (1<<9)){printf("SB_OC\n\r");}
 80021b0:	89bb      	ldrh	r3, [r7, #12]
 80021b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <drv_print_faults+0xf8>
 80021ba:	4833      	ldr	r0, [pc, #204]	; (8002288 <drv_print_faults+0x1c0>)
 80021bc:	f009 ff8c 	bl	800c0d8 <iprintf>
    if(val2 & (1<<8)){printf("SC_OC\n\r");}
 80021c0:	89bb      	ldrh	r3, [r7, #12]
 80021c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d002      	beq.n	80021d0 <drv_print_faults+0x108>
 80021ca:	4830      	ldr	r0, [pc, #192]	; (800228c <drv_print_faults+0x1c4>)
 80021cc:	f009 ff84 	bl	800c0d8 <iprintf>
    if(val2 & (1<<7)){printf("OTW\n\r");}
 80021d0:	89bb      	ldrh	r3, [r7, #12]
 80021d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d002      	beq.n	80021e0 <drv_print_faults+0x118>
 80021da:	482d      	ldr	r0, [pc, #180]	; (8002290 <drv_print_faults+0x1c8>)
 80021dc:	f009 ff7c 	bl	800c0d8 <iprintf>
    if(val2 & (1<<6)){printf("CPUV\n\r");}
 80021e0:	89bb      	ldrh	r3, [r7, #12]
 80021e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d002      	beq.n	80021f0 <drv_print_faults+0x128>
 80021ea:	482a      	ldr	r0, [pc, #168]	; (8002294 <drv_print_faults+0x1cc>)
 80021ec:	f009 ff74 	bl	800c0d8 <iprintf>
    if(val2 & (1<<5)){printf("VGS_HA\n\r");}
 80021f0:	89bb      	ldrh	r3, [r7, #12]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d002      	beq.n	8002200 <drv_print_faults+0x138>
 80021fa:	4827      	ldr	r0, [pc, #156]	; (8002298 <drv_print_faults+0x1d0>)
 80021fc:	f009 ff6c 	bl	800c0d8 <iprintf>
    if(val2 & (1<<4)){printf("VGS_LA\n\r");}
 8002200:	89bb      	ldrh	r3, [r7, #12]
 8002202:	f003 0310 	and.w	r3, r3, #16
 8002206:	2b00      	cmp	r3, #0
 8002208:	d002      	beq.n	8002210 <drv_print_faults+0x148>
 800220a:	4824      	ldr	r0, [pc, #144]	; (800229c <drv_print_faults+0x1d4>)
 800220c:	f009 ff64 	bl	800c0d8 <iprintf>
    if(val2 & (1<<3)){printf("VGS_HB\n\r");}
 8002210:	89bb      	ldrh	r3, [r7, #12]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <drv_print_faults+0x158>
 800221a:	4821      	ldr	r0, [pc, #132]	; (80022a0 <drv_print_faults+0x1d8>)
 800221c:	f009 ff5c 	bl	800c0d8 <iprintf>
    if(val2 & (1<<2)){printf("VGS_LB\n\r");}
 8002220:	89bb      	ldrh	r3, [r7, #12]
 8002222:	f003 0304 	and.w	r3, r3, #4
 8002226:	2b00      	cmp	r3, #0
 8002228:	d002      	beq.n	8002230 <drv_print_faults+0x168>
 800222a:	481e      	ldr	r0, [pc, #120]	; (80022a4 <drv_print_faults+0x1dc>)
 800222c:	f009 ff54 	bl	800c0d8 <iprintf>
    if(val2 & (1<<1)){printf("VGS_HC\n\r");}
 8002230:	89bb      	ldrh	r3, [r7, #12]
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d002      	beq.n	8002240 <drv_print_faults+0x178>
 800223a:	481b      	ldr	r0, [pc, #108]	; (80022a8 <drv_print_faults+0x1e0>)
 800223c:	f009 ff4c 	bl	800c0d8 <iprintf>
    if(val2 & (1)){printf("VGS_LC\n\r");}
 8002240:	89bb      	ldrh	r3, [r7, #12]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d002      	beq.n	8002250 <drv_print_faults+0x188>
 800224a:	4818      	ldr	r0, [pc, #96]	; (80022ac <drv_print_faults+0x1e4>)
 800224c:	f009 ff44 	bl	800c0d8 <iprintf>

}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	0800f630 	.word	0x0800f630
 800225c:	0800f63c 	.word	0x0800f63c
 8002260:	0800f648 	.word	0x0800f648
 8002264:	0800f650 	.word	0x0800f650
 8002268:	0800f658 	.word	0x0800f658
 800226c:	0800f660 	.word	0x0800f660
 8002270:	0800f66c 	.word	0x0800f66c
 8002274:	0800f678 	.word	0x0800f678
 8002278:	0800f684 	.word	0x0800f684
 800227c:	0800f690 	.word	0x0800f690
 8002280:	0800f69c 	.word	0x0800f69c
 8002284:	0800f6a8 	.word	0x0800f6a8
 8002288:	0800f6b0 	.word	0x0800f6b0
 800228c:	0800f6b8 	.word	0x0800f6b8
 8002290:	0800f6c0 	.word	0x0800f6c0
 8002294:	0800f6c8 	.word	0x0800f6c8
 8002298:	0800f6d0 	.word	0x0800f6d0
 800229c:	0800f6dc 	.word	0x0800f6dc
 80022a0:	0800f6e8 	.word	0x0800f6e8
 80022a4:	0800f6f4 	.word	0x0800f6f4
 80022a8:	0800f700 	.word	0x0800f700
 80022ac:	0800f70c 	.word	0x0800f70c

080022b0 <flash_writer_init>:
#include "flash_writer.h"




void flash_writer_init(FlashWriter *fw, uint32_t sector) {
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
	if(sector>7) sector = 7;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	2b07      	cmp	r3, #7
 80022be:	d901      	bls.n	80022c4 <flash_writer_init+0x14>
 80022c0:	2307      	movs	r3, #7
 80022c2:	603b      	str	r3, [r7, #0]
	fw->sector = sector;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	609a      	str	r2, [r3, #8]
	fw->base = __SECTOR_ADDRS[sector];
 80022ca:	4a07      	ldr	r2, [pc, #28]	; (80022e8 <flash_writer_init+0x38>)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	605a      	str	r2, [r3, #4]
	fw->ready = false;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	701a      	strb	r2, [r3, #0]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	20000000 	.word	0x20000000

080022ec <flash_writer_open>:
bool flash_writer_ready(FlashWriter fw) {
    return fw.ready;
}

void flash_writer_open(FlashWriter * fw) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
    FLASH_Unlock();
 80022f4:	f002 fdd8 	bl	8004ea8 <FLASH_Unlock>
    FLASH_ClearFlag( FLASH_FLAG_EOP |  FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
 80022f8:	20f1      	movs	r0, #241	; 0xf1
 80022fa:	f002 fe91 	bl	8005020 <FLASH_ClearFlag>
    FLASH_EraseSector(__SECTORS[fw->sector], VoltageRange_3);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	4a07      	ldr	r2, [pc, #28]	; (8002320 <flash_writer_open+0x34>)
 8002304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002308:	2102      	movs	r1, #2
 800230a:	4618      	mov	r0, r3
 800230c:	f002 fdf4 	bl	8004ef8 <FLASH_EraseSector>
    fw->ready = true;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	701a      	strb	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000020 	.word	0x20000020

08002324 <flash_writer_write_int>:

void flash_writer_write_int(FlashWriter fw, uint32_t index, int x) {
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	1d3c      	adds	r4, r7, #4
 800232c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002330:	603b      	str	r3, [r7, #0]
    union UN {int a; uint32_t b;};
    union UN un;
    un.a = x;
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	617b      	str	r3, [r7, #20]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8002336:	68ba      	ldr	r2, [r7, #8]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	4611      	mov	r1, r2
 8002342:	4618      	mov	r0, r3
 8002344:	f002 fe38 	bl	8004fb8 <FLASH_ProgramWord>
}
 8002348:	bf00      	nop
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd90      	pop	{r4, r7, pc}

08002350 <flash_writer_write_float>:

void flash_writer_write_uint(FlashWriter fw, uint32_t index, unsigned int x) {
    FLASH_ProgramWord(fw.base + 4 * index, x);
}

void flash_writer_write_float(FlashWriter fw, uint32_t index, float x) {
 8002350:	b590      	push	{r4, r7, lr}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	f107 040c 	add.w	r4, r7, #12
 800235a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	ed87 0a01 	vstr	s0, [r7, #4]
    union UN {float a; uint32_t b;};
    union UN un;
    un.a = x;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	61fb      	str	r3, [r7, #28]
    FLASH_ProgramWord(fw.base + 4 * index, un.b);
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	4413      	add	r3, r2
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f002 fe1f 	bl	8004fb8 <FLASH_ProgramWord>
}
 800237a:	bf00      	nop
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}

08002382 <flash_writer_close>:

void flash_writer_close(FlashWriter * fw) {
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
    FLASH_Lock();
 800238a:	f002 fda5 	bl	8004ed8 <FLASH_Lock>
    fw->ready = false;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
}
 8002394:	bf00      	nop
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <flash_read_int>:

int flash_read_int(FlashWriter fw, uint32_t index) {
 800239c:	b490      	push	{r4, r7}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	1d3c      	adds	r4, r7, #4
 80023a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80023a8:	603b      	str	r3, [r7, #0]
    return *(int*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <flash_read_int+0x28>)
 80023ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	681b      	ldr	r3, [r3, #0]
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc90      	pop	{r4, r7}
 80023c2:	4770      	bx	lr
 80023c4:	20000000 	.word	0x20000000

080023c8 <flash_read_float>:

uint32_t flash_read_uint(FlashWriter fw, uint32_t index) {
    return *(uint32_t*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
}

float flash_read_float(FlashWriter fw, uint32_t index) {
 80023c8:	b490      	push	{r4, r7}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	1d3c      	adds	r4, r7, #4
 80023d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80023d4:	603b      	str	r3, [r7, #0]
    return *(float*) (__SECTOR_ADDRS[fw.sector] + 4 * index);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4a07      	ldr	r2, [pc, #28]	; (80023f8 <flash_read_float+0x30>)
 80023da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	ee07 3a90 	vmov	s15, r3
}
 80023ea:	eeb0 0a67 	vmov.f32	s0, s15
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc90      	pop	{r4, r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	20000000 	.word	0x20000000

080023fc <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	/* Output duty cycle from controller to the pwm timer */
	uint32_t tim_ch_u;
	uint32_t tim_ch_v;
	uint32_t tim_ch_w;
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002404:	4b8f      	ldr	r3, [pc, #572]	; (8002644 <set_dtc+0x248>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d106      	bne.n	800241a <set_dtc+0x1e>
		tim_ch_u = TIM_CH_U;
 800240c:	2300      	movs	r3, #0
 800240e:	617b      	str	r3, [r7, #20]
		tim_ch_v = TIM_CH_V;
 8002410:	2304      	movs	r3, #4
 8002412:	613b      	str	r3, [r7, #16]
		tim_ch_w = TIM_CH_W;
 8002414:	2308      	movs	r3, #8
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	e005      	b.n	8002426 <set_dtc+0x2a>
	}
	else{
		tim_ch_u = TIM_CH_U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
		tim_ch_v = TIM_CH_W;
 800241e:	2308      	movs	r3, #8
 8002420:	613b      	str	r3, [r7, #16]
		tim_ch_w = TIM_CH_V;
 8002422:	2304      	movs	r3, #4
 8002424:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_COMPARE(&TIM_PWM, tim_ch_u, ((TIM_PWM.Instance->ARR))*(1.0f-controller->dtc_u));
		__HAL_TIM_SET_COMPARE(&TIM_PWM, tim_ch_v, ((TIM_PWM.Instance->ARR))*(1.0f-controller->dtc_v));
		__HAL_TIM_SET_COMPARE(&TIM_PWM, tim_ch_w, ((TIM_PWM.Instance->ARR))*(1.0f-controller->dtc_w));
	}
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, tim_ch_u, ((TIM_PWM.Instance->ARR))*(controller->dtc_u));
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d113      	bne.n	8002454 <set_dtc+0x58>
 800242c:	4b86      	ldr	r3, [pc, #536]	; (8002648 <set_dtc+0x24c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002444:	4b80      	ldr	r3, [pc, #512]	; (8002648 <set_dtc+0x24c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800244c:	ee17 2a90 	vmov	r2, s15
 8002450:	635a      	str	r2, [r3, #52]	; 0x34
 8002452:	e040      	b.n	80024d6 <set_dtc+0xda>
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	2b04      	cmp	r3, #4
 8002458:	d113      	bne.n	8002482 <set_dtc+0x86>
 800245a:	4b7b      	ldr	r3, [pc, #492]	; (8002648 <set_dtc+0x24c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	ee07 3a90 	vmov	s15, r3
 8002464:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800246e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002472:	4b75      	ldr	r3, [pc, #468]	; (8002648 <set_dtc+0x24c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800247a:	ee17 2a90 	vmov	r2, s15
 800247e:	639a      	str	r2, [r3, #56]	; 0x38
 8002480:	e029      	b.n	80024d6 <set_dtc+0xda>
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b08      	cmp	r3, #8
 8002486:	d113      	bne.n	80024b0 <set_dtc+0xb4>
 8002488:	4b6f      	ldr	r3, [pc, #444]	; (8002648 <set_dtc+0x24c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800249c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a0:	4b69      	ldr	r3, [pc, #420]	; (8002648 <set_dtc+0x24c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a8:	ee17 2a90 	vmov	r2, s15
 80024ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80024ae:	e012      	b.n	80024d6 <set_dtc+0xda>
 80024b0:	4b65      	ldr	r3, [pc, #404]	; (8002648 <set_dtc+0x24c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80024c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c8:	4b5f      	ldr	r3, [pc, #380]	; (8002648 <set_dtc+0x24c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024d0:	ee17 2a90 	vmov	r2, s15
 80024d4:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&TIM_PWM, tim_ch_v, ((TIM_PWM.Instance->ARR))*(controller->dtc_v));
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d113      	bne.n	8002504 <set_dtc+0x108>
 80024dc:	4b5a      	ldr	r3, [pc, #360]	; (8002648 <set_dtc+0x24c>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	ee07 3a90 	vmov	s15, r3
 80024e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80024f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024f4:	4b54      	ldr	r3, [pc, #336]	; (8002648 <set_dtc+0x24c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024fc:	ee17 2a90 	vmov	r2, s15
 8002500:	635a      	str	r2, [r3, #52]	; 0x34
 8002502:	e040      	b.n	8002586 <set_dtc+0x18a>
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	2b04      	cmp	r3, #4
 8002508:	d113      	bne.n	8002532 <set_dtc+0x136>
 800250a:	4b4f      	ldr	r3, [pc, #316]	; (8002648 <set_dtc+0x24c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800251e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002522:	4b49      	ldr	r3, [pc, #292]	; (8002648 <set_dtc+0x24c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800252a:	ee17 2a90 	vmov	r2, s15
 800252e:	639a      	str	r2, [r3, #56]	; 0x38
 8002530:	e029      	b.n	8002586 <set_dtc+0x18a>
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d113      	bne.n	8002560 <set_dtc+0x164>
 8002538:	4b43      	ldr	r3, [pc, #268]	; (8002648 <set_dtc+0x24c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800254c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002550:	4b3d      	ldr	r3, [pc, #244]	; (8002648 <set_dtc+0x24c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002558:	ee17 2a90 	vmov	r2, s15
 800255c:	63da      	str	r2, [r3, #60]	; 0x3c
 800255e:	e012      	b.n	8002586 <set_dtc+0x18a>
 8002560:	4b39      	ldr	r3, [pc, #228]	; (8002648 <set_dtc+0x24c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002578:	4b33      	ldr	r3, [pc, #204]	; (8002648 <set_dtc+0x24c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002580:	ee17 2a90 	vmov	r2, s15
 8002584:	641a      	str	r2, [r3, #64]	; 0x40
		__HAL_TIM_SET_COMPARE(&TIM_PWM, tim_ch_w, ((TIM_PWM.Instance->ARR))*(controller->dtc_w));
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d113      	bne.n	80025b4 <set_dtc+0x1b8>
 800258c:	4b2e      	ldr	r3, [pc, #184]	; (8002648 <set_dtc+0x24c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	ee07 3a90 	vmov	s15, r3
 8002596:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80025a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a4:	4b28      	ldr	r3, [pc, #160]	; (8002648 <set_dtc+0x24c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ac:	ee17 2a90 	vmov	r2, s15
 80025b0:	635a      	str	r2, [r3, #52]	; 0x34
	}
}
 80025b2:	e040      	b.n	8002636 <set_dtc+0x23a>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, tim_ch_w, ((TIM_PWM.Instance->ARR))*(controller->dtc_w));
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2b04      	cmp	r3, #4
 80025b8:	d113      	bne.n	80025e2 <set_dtc+0x1e6>
 80025ba:	4b23      	ldr	r3, [pc, #140]	; (8002648 <set_dtc+0x24c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	ee07 3a90 	vmov	s15, r3
 80025c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80025ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <set_dtc+0x24c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025da:	ee17 2a90 	vmov	r2, s15
 80025de:	639a      	str	r2, [r3, #56]	; 0x38
}
 80025e0:	e029      	b.n	8002636 <set_dtc+0x23a>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, tim_ch_w, ((TIM_PWM.Instance->ARR))*(controller->dtc_w));
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d113      	bne.n	8002610 <set_dtc+0x214>
 80025e8:	4b17      	ldr	r3, [pc, #92]	; (8002648 <set_dtc+0x24c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	ee07 3a90 	vmov	s15, r3
 80025f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80025fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002600:	4b11      	ldr	r3, [pc, #68]	; (8002648 <set_dtc+0x24c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002608:	ee17 2a90 	vmov	r2, s15
 800260c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800260e:	e012      	b.n	8002636 <set_dtc+0x23a>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, tim_ch_w, ((TIM_PWM.Instance->ARR))*(controller->dtc_w));
 8002610:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <set_dtc+0x24c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002628:	4b07      	ldr	r3, [pc, #28]	; (8002648 <set_dtc+0x24c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002630:	ee17 2a90 	vmov	r2, s15
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	20008eac 	.word	0x20008eac
 8002648:	20009400 	.word	0x20009400

0800264c <analog_sample>:

void analog_sample (ControllerStruct *controller){
 800264c:	b580      	push	{r7, lr}
 800264e:	b0b8      	sub	sp, #224	; 0xe0
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	ADC_HandleTypeDef adc_ch_ia;
	ADC_HandleTypeDef adc_ch_ib;
	ADC_HandleTypeDef adc_ch_ic;

	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002654:	4b42      	ldr	r3, [pc, #264]	; (8002760 <analog_sample+0x114>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d110      	bne.n	800267e <analog_sample+0x32>
		adc_ch_ia = ADC_CH_IA;
 800265c:	4a41      	ldr	r2, [pc, #260]	; (8002764 <analog_sample+0x118>)
 800265e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002662:	4611      	mov	r1, r2
 8002664:	2248      	movs	r2, #72	; 0x48
 8002666:	4618      	mov	r0, r3
 8002668:	f009 f8c6 	bl	800b7f8 <memcpy>
		adc_ch_ib = ADC_CH_IB;
 800266c:	4a3e      	ldr	r2, [pc, #248]	; (8002768 <analog_sample+0x11c>)
 800266e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002672:	4611      	mov	r1, r2
 8002674:	2248      	movs	r2, #72	; 0x48
 8002676:	4618      	mov	r0, r3
 8002678:	f009 f8be 	bl	800b7f8 <memcpy>
 800267c:	e00f      	b.n	800269e <analog_sample+0x52>
		//adc_ch_ic = ADC_CH_IC;
	}
	else{
		adc_ch_ib = ADC_CH_IA;
 800267e:	4a39      	ldr	r2, [pc, #228]	; (8002764 <analog_sample+0x118>)
 8002680:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002684:	4611      	mov	r1, r2
 8002686:	2248      	movs	r2, #72	; 0x48
 8002688:	4618      	mov	r0, r3
 800268a:	f009 f8b5 	bl	800b7f8 <memcpy>
		adc_ch_ia = ADC_CH_IB;
 800268e:	4a36      	ldr	r2, [pc, #216]	; (8002768 <analog_sample+0x11c>)
 8002690:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002694:	4611      	mov	r1, r2
 8002696:	2248      	movs	r2, #72	; 0x48
 8002698:	4618      	mov	r0, r3
 800269a:	f009 f8ad 	bl	800b7f8 <memcpy>
		//adc_ch_ic = ADC_CH_IB;
	}

	HAL_ADC_Start(&ADC_CH_MAIN);
 800269e:	4831      	ldr	r0, [pc, #196]	; (8002764 <analog_sample+0x118>)
 80026a0:	f003 fa72 	bl	8005b88 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&ADC_CH_MAIN, HAL_MAX_DELAY);
 80026a4:	f04f 31ff 	mov.w	r1, #4294967295
 80026a8:	482e      	ldr	r0, [pc, #184]	; (8002764 <analog_sample+0x118>)
 80026aa:	f003 fb33 	bl	8005d14 <HAL_ADC_PollForConversion>
	controller->adc_b_raw = HAL_ADC_GetValue(&adc_ch_ib);
 80026ae:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026b2:	4618      	mov	r0, r3
 80026b4:	f003 fbb2 	bl	8005e1c <HAL_ADC_GetValue>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	609a      	str	r2, [r3, #8]
	controller->adc_a_raw = HAL_ADC_GetValue(&adc_ch_ia);
 80026c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80026c4:	4618      	mov	r0, r3
 80026c6:	f003 fba9 	bl	8005e1c <HAL_ADC_GetValue>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461a      	mov	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	605a      	str	r2, [r3, #4]
	controller->adc_vbus_raw = HAL_ADC_GetValue(&ADC_CH_VBUS);
 80026d2:	4826      	ldr	r0, [pc, #152]	; (800276c <analog_sample+0x120>)
 80026d4:	f003 fba2 	bl	8005e1c <HAL_ADC_GetValue>
 80026d8:	4603      	mov	r3, r0
 80026da:	461a      	mov	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	611a      	str	r2, [r3, #16]
	controller->v_bus = controller->adc_vbus_raw*V_SCALE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	ee07 3a90 	vmov	s15, r3
 80026e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ec:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002770 <analog_sample+0x124>
 80026f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	edc3 7a08 	vstr	s15, [r3, #32]

    controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800270e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002774 <analog_sample+0x128>
 8002712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	edc3 7a05 	vstr	s15, [r3, #20]
    controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	ee07 3a90 	vmov	s15, r3
 800272c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002730:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002774 <analog_sample+0x128>
 8002734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	edc3 7a06 	vstr	s15, [r3, #24]
    controller->i_c = -controller->i_a - controller->i_b;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	edd3 7a05 	vldr	s15, [r3, #20]
 8002744:	eeb1 7a67 	vneg.f32	s14, s15
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	edd3 7a06 	vldr	s15, [r3, #24]
 800274e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	edc3 7a07 	vstr	s15, [r3, #28]

}
 8002758:	bf00      	nop
 800275a:	37e0      	adds	r7, #224	; 0xe0
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	20008eac 	.word	0x20008eac
 8002764:	20000290 	.word	0x20000290
 8002768:	20000248 	.word	0x20000248
 800276c:	200002d8 	.word	0x200002d8
 8002770:	3c533333 	.word	0x3c533333
 8002774:	3ca50000 	.word	0x3ca50000

08002778 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002782:	edc7 0a04 	vstr	s1, [r7, #16]
 8002786:	ed87 1a03 	vstr	s2, [r7, #12]
 800278a:	60b8      	str	r0, [r7, #8]
 800278c:	6079      	str	r1, [r7, #4]
 800278e:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cosf(theta);
 8002790:	ed97 0a05 	vldr	s0, [r7, #20]
 8002794:	f007 fde8 	bl	800a368 <cosf>
 8002798:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sinf(theta);
 800279c:	ed97 0a05 	vldr	s0, [r7, #20]
 80027a0:	f007 fe74 	bl	800a48c <sinf>
 80027a4:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 80027a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80027ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80027b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027b4:	edd7 6a06 	vldr	s13, [r7, #24]
 80027b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80027bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80027ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80027ce:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002878 <abc+0x100>
 80027d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80027da:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80027de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80027e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80027ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80027f2:	eddf 6a22 	vldr	s13, [pc, #136]	; 800287c <abc+0x104>
 80027f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80027fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80027fe:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002802:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002806:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800280a:	edd7 7a03 	vldr	s15, [r7, #12]
 800280e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 800281c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002820:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800287c <abc+0x104>
 8002824:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002828:	edd7 7a07 	vldr	s15, [r7, #28]
 800282c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002830:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002834:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002838:	edd7 7a04 	vldr	s15, [r7, #16]
 800283c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002840:	edd7 7a07 	vldr	s15, [r7, #28]
 8002844:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002878 <abc+0x100>
 8002848:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800284c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002850:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002854:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002858:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800285c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002860:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	edc3 7a00 	vstr	s15, [r3]
    }
 800286e:	bf00      	nop
 8002870:	3720      	adds	r7, #32
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	3f5db3d7 	.word	0x3f5db3d7
 800287c:	bf5db3d7 	.word	0xbf5db3d7

08002880 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af00      	add	r7, sp, #0
 8002886:	ed87 0a05 	vstr	s0, [r7, #20]
 800288a:	edc7 0a04 	vstr	s1, [r7, #16]
 800288e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002892:	edc7 1a02 	vstr	s3, [r7, #8]
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cosf(theta);
 800289a:	ed97 0a05 	vldr	s0, [r7, #20]
 800289e:	f007 fd63 	bl	800a368 <cosf>
 80028a2:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sinf(theta);
 80028a6:	ed97 0a05 	vldr	s0, [r7, #20]
 80028aa:	f007 fdef 	bl	800a48c <sinf>
 80028ae:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80028b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80028b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80028ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028be:	edd7 7a06 	vldr	s15, [r7, #24]
 80028c2:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002994 <dq0+0x114>
 80028c6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80028ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ce:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80028d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80028d6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80028da:	edd7 7a03 	vldr	s15, [r7, #12]
 80028de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80028ea:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002998 <dq0+0x118>
 80028ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80028f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80028f6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80028fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80028fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002902:	edd7 7a02 	vldr	s15, [r7, #8]
 8002906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800290a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800290e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800299c <dq0+0x11c>
 8002912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 800291c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002920:	eeb1 7a67 	vneg.f32	s14, s15
 8002924:	edd7 7a04 	vldr	s15, [r7, #16]
 8002928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800292c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002930:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002998 <dq0+0x118>
 8002934:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002938:	edd7 7a06 	vldr	s15, [r7, #24]
 800293c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002940:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002944:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002948:	edd7 7a03 	vldr	s15, [r7, #12]
 800294c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002950:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002954:	edd7 7a07 	vldr	s15, [r7, #28]
 8002958:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002994 <dq0+0x114>
 800295c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002960:	edd7 7a06 	vldr	s15, [r7, #24]
 8002964:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002968:	ee67 7a86 	vmul.f32	s15, s15, s12
 800296c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002970:	edd7 7a02 	vldr	s15, [r7, #8]
 8002974:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800297c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800299c <dq0+0x11c>
 8002980:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	edc3 7a00 	vstr	s15, [r3]

    }
 800298a:	bf00      	nop
 800298c:	3720      	adds	r7, #32
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	3f5db3d7 	.word	0x3f5db3d7
 8002998:	bf5db3d7 	.word	0xbf5db3d7
 800299c:	3f2aaaab 	.word	0x3f2aaaab

080029a0 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 80029a0:	b580      	push	{r7, lr}
 80029a2:	ed2d 8b02 	vpush	{d8}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	ed87 0a07 	vstr	s0, [r7, #28]
 80029ae:	edc7 0a06 	vstr	s1, [r7, #24]
 80029b2:	ed87 1a05 	vstr	s2, [r7, #20]
 80029b6:	edc7 1a04 	vstr	s3, [r7, #16]
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 80029c0:	ed97 1a04 	vldr	s2, [r7, #16]
 80029c4:	edd7 0a05 	vldr	s1, [r7, #20]
 80029c8:	ed97 0a06 	vldr	s0, [r7, #24]
 80029cc:	f001 fe07 	bl	80045de <fminf3>
 80029d0:	eeb0 8a40 	vmov.f32	s16, s0
 80029d4:	ed97 1a04 	vldr	s2, [r7, #16]
 80029d8:	edd7 0a05 	vldr	s1, [r7, #20]
 80029dc:	ed97 0a06 	vldr	s0, [r7, #24]
 80029e0:	f001 fdc9 	bl	8004576 <fmaxf3>
 80029e4:	eef0 7a40 	vmov.f32	s15, s0
 80029e8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80029ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 80029f8:	4b3b      	ldr	r3, [pc, #236]	; (8002ae8 <svm+0x148>)
 80029fa:	623b      	str	r3, [r7, #32]

    *dtc_u = fminf(fmaxf((.5f*(u -v_offset)/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80029fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a00:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a08:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a0c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002a10:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a18:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a20:	eddf 0a32 	vldr	s1, [pc, #200]	; 8002aec <svm+0x14c>
 8002a24:	eeb0 0a67 	vmov.f32	s0, s15
 8002a28:	f007 fcde 	bl	800a3e8 <fmaxf>
 8002a2c:	eef0 7a40 	vmov.f32	s15, s0
 8002a30:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8002af0 <svm+0x150>
 8002a34:	eeb0 0a67 	vmov.f32	s0, s15
 8002a38:	f007 fcf1 	bl	800a41e <fminf>
 8002a3c:	eef0 7a40 	vmov.f32	s15, s0
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fminf(fmaxf((.5f*(v -v_offset)/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002a46:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a4a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a56:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002a5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a62:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6a:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002aec <svm+0x14c>
 8002a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a72:	f007 fcb9 	bl	800a3e8 <fmaxf>
 8002a76:	eef0 7a40 	vmov.f32	s15, s0
 8002a7a:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8002af0 <svm+0x150>
 8002a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a82:	f007 fccc 	bl	800a41e <fminf>
 8002a86:	eef0 7a40 	vmov.f32	s15, s0
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fminf(fmaxf((.5f*(w -v_offset)/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002a90:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002a98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002aa0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002aa4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002aa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aac:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab4:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8002aec <svm+0x14c>
 8002ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8002abc:	f007 fc94 	bl	800a3e8 <fmaxf>
 8002ac0:	eef0 7a40 	vmov.f32	s15, s0
 8002ac4:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8002af0 <svm+0x150>
 8002ac8:	eeb0 0a67 	vmov.f32	s0, s15
 8002acc:	f007 fca7 	bl	800a41e <fminf>
 8002ad0:	eef0 7a40 	vmov.f32	s15, s0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	edc3 7a00 	vstr	s15, [r3]

    }
 8002ada:	bf00      	nop
 8002adc:	3728      	adds	r7, #40	; 0x28
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	ecbd 8b02 	vpop	{d8}
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	3ef33333 	.word	0x3ef33333
 8002aec:	00000000 	.word	0x00000000
 8002af0:	3f733333 	.word	0x3f733333

08002af4 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
    int adc_b_offset = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	613b      	str	r3, [r7, #16]
    int n = 1000;
 8002b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b08:	60bb      	str	r3, [r7, #8]
    controller->dtc_u = 0.f;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f04f 0200 	mov.w	r2, #0
 8002b10:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff fc6a 	bl	80023fc <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e00f      	b.n	8002b4e <zero_current+0x5a>
    	analog_sample(controller);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff fd8c 	bl	800264c <analog_sample>
    	adc_a_offset +=  controller->adc_a_raw;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]
    	adc_b_offset += controller->adc_b_raw;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4413      	add	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
    for (int i = 0; i<n; i++){               // Average n samples
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	dbeb      	blt.n	8002b2e <zero_current+0x3a>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	fb92 f2f3 	sdiv	r2, r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->adc_b_offset = adc_b_offset/n;
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	fb92 f2f3 	sdiv	r2, r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    }
 8002b72:	bf00      	nop
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
	...

08002b7c <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 8002b7c:	b590      	push	{r4, r7, lr}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a3f      	ldr	r2, [pc, #252]	; (8002c84 <init_controller_params+0x108>)
 8002b88:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a3d      	ldr	r2, [pc, #244]	; (8002c84 <init_controller_params+0x108>)
 8002b8e:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 8002b90:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <init_controller_params+0x10c>)
 8002b92:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b96:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8002c8c <init_controller_params+0x110>
 8002b9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 8002ba4:	4b38      	ldr	r3, [pc, #224]	; (8002c88 <init_controller_params+0x10c>)
 8002ba6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002baa:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002c8c <init_controller_params+0x110>
 8002bae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002bb8:	4b33      	ldr	r3, [pc, #204]	; (8002c88 <init_controller_params+0x10c>)
 8002bba:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bbe:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002c90 <init_controller_params+0x114>
 8002bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002c94 <init_controller_params+0x118>
 8002bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bd2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002bf2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002c98 <init_controller_params+0x11c>
 8002bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	e037      	b.n	8002c76 <init_controller_params+0xfa>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	ee07 3a90 	vmov	s15, r3
 8002c0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c10:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002c9c <init_controller_params+0x120>
 8002c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c18:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002ca0 <init_controller_params+0x124>
 8002c1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c20:	ee16 0a90 	vmov	r0, s13
 8002c24:	f7fd fcb0 	bl	8000588 <__aeabi_f2d>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	460c      	mov	r4, r1
 8002c2c:	ec44 3b10 	vmov	d0, r3, r4
 8002c30:	f007 fc6e 	bl	800a510 <exp>
 8002c34:	ec51 0b10 	vmov	r0, r1, d0
 8002c38:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <init_controller_params+0x128>)
 8002c3e:	f7fd fcfb 	bl	8000638 <__aeabi_dmul>
 8002c42:	4603      	mov	r3, r0
 8002c44:	460c      	mov	r4, r1
 8002c46:	4618      	mov	r0, r3
 8002c48:	4621      	mov	r1, r4
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <init_controller_params+0x12c>)
 8002c50:	f7fd fb3c 	bl	80002cc <__adddf3>
 8002c54:	4603      	mov	r3, r0
 8002c56:	460c      	mov	r4, r1
 8002c58:	4618      	mov	r0, r3
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	f7fd ffe4 	bl	8000c28 <__aeabi_d2f>
 8002c60:	4601      	mov	r1, r0
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	333a      	adds	r3, #58	; 0x3a
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3304      	adds	r3, #4
 8002c6e:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	3301      	adds	r3, #1
 8002c74:	60fb      	str	r3, [r7, #12]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b7f      	cmp	r3, #127	; 0x7f
 8002c7a:	ddc4      	ble.n	8002c06 <init_controller_params+0x8a>
    }

    }
 8002c7c:	bf00      	nop
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd90      	pop	{r4, r7, pc}
 8002c84:	3d3a5e35 	.word	0x3d3a5e35
 8002c88:	20000600 	.word	0x20000600
 8002c8c:	38d1b717 	.word	0x38d1b717
 8002c90:	37d1b717 	.word	0x37d1b717
 8002c94:	40c90fdb 	.word	0x40c90fdb
 8002c98:	3dcccccd 	.word	0x3dcccccd
 8002c9c:	bc000000 	.word	0xbc000000
 8002ca0:	3d03126f 	.word	0x3d03126f
 8002ca4:	3ff33333 	.word	0x3ff33333
 8002ca8:	3ff00000 	.word	0x3ff00000

08002cac <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002cb4:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <reset_foc+0xe4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cc2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cca:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <reset_foc+0xe4>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cd2:	ee17 2a90 	vmov	r2, s15
 8002cd6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002cd8:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <reset_foc+0xe4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cde:	ee07 3a90 	vmov	s15, r3
 8002ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002cea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cee:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <reset_foc+0xe4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cf6:	ee17 2a90 	vmov	r2, s15
 8002cfa:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002cfc:	4b24      	ldr	r3, [pc, #144]	; (8002d90 <reset_foc+0xe4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	ee07 3a90 	vmov	s15, r3
 8002d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d0a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002d0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d12:	4b1f      	ldr	r3, [pc, #124]	; (8002d90 <reset_foc+0xe4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d1a:	ee17 2a90 	vmov	r2, s15
 8002d1e:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f04f 0200 	mov.w	r2, #0
 8002d26:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller->i_q_des = 0;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_d = 0;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f04f 0200 	mov.w	r2, #0
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->d_int = 0;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    controller->v_q = 0;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f04f 0200 	mov.w	r2, #0
 8002d66:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    controller->otw_flag = 0;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

    }
 8002d82:	bf00      	nop
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20009400 	.word	0x20009400

08002d94 <field_weaken>:
    float val2 = controller->inverter_tab[index+1];
    return val1 + (val2 - val1)*(duty*128.0f - (float)index);
}

void field_weaken(ControllerStruct *controller)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
       /// Field Weakening ///
       controller->fw_int += .005f*(controller->v_max - controller->v_ref);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	ed93 7a38 	vldr	s14, [r3, #224]	; 0xe0
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	edd3 6a36 	vldr	s13, [r3, #216]	; 0xd8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002dae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002db2:	eddf 6a30 	vldr	s13, [pc, #192]	; 8002e74 <field_weaken+0xe0>
 8002db6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->fw_int = fmaxf(fminf(controller->fw_int, 0.0f), -I_FW_MAX);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8002dca:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8002e78 <field_weaken+0xe4>
 8002dce:	eeb0 0a67 	vmov.f32	s0, s15
 8002dd2:	f007 fb24 	bl	800a41e <fminf>
 8002dd6:	eeb0 7a40 	vmov.f32	s14, s0
 8002dda:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <field_weaken+0xe8>)
 8002ddc:	edd3 7a06 	vldr	s15, [r3, #24]
 8002de0:	eef1 7a67 	vneg.f32	s15, s15
 8002de4:	eef0 0a67 	vmov.f32	s1, s15
 8002de8:	eeb0 0a47 	vmov.f32	s0, s14
 8002dec:	f007 fafc 	bl	800a3e8 <fmaxf>
 8002df0:	eef0 7a40 	vmov.f32	s15, s0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->i_d_des = controller->fw_int;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
       float q_max = sqrtf(controller->i_max*controller->i_max - controller->i_d_des*controller->i_d_des);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	ed93 7a3a 	vldr	s14, [r3, #232]	; 0xe8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8002e12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	edd3 6a28 	vldr	s13, [r3, #160]	; 0xa0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8002e22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e2e:	f007 fca1 	bl	800a774 <sqrtf>
 8002e32:	ed87 0a03 	vstr	s0, [r7, #12]
       controller->i_q_des = fmaxf(fminf(controller->i_q_des, q_max), -q_max);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8002e3c:	edd7 0a03 	vldr	s1, [r7, #12]
 8002e40:	eeb0 0a67 	vmov.f32	s0, s15
 8002e44:	f007 faeb 	bl	800a41e <fminf>
 8002e48:	eeb0 7a40 	vmov.f32	s14, s0
 8002e4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e50:	eef1 7a67 	vneg.f32	s15, s15
 8002e54:	eef0 0a67 	vmov.f32	s1, s15
 8002e58:	eeb0 0a47 	vmov.f32	s0, s14
 8002e5c:	f007 fac4 	bl	800a3e8 <fmaxf>
 8002e60:	eef0 7a40 	vmov.f32	s15, s0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4

}
 8002e6a:	bf00      	nop
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	3ba3d70a 	.word	0x3ba3d70a
 8002e78:	00000000 	.word	0x00000000
 8002e7c:	20000600 	.word	0x20000600

08002e80 <commutate>:
void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b088      	sub	sp, #32
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity*GR;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8002ea0:	4bd8      	ldr	r3, [pc, #864]	; (8003204 <commutate+0x384>)
 8002ea2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	edd3 6a03 	vldr	s13, [r3, #12]
 8002eb6:	4bd3      	ldr	r3, [pc, #844]	; (8003204 <commutate+0x384>)
 8002eb8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28


       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	ed93 7a05 	vldr	s14, [r3, #20]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	edd3 6a06 	vldr	s13, [r3, #24]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	ed93 6a07 	vldr	s12, [r3, #28]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3340      	adds	r3, #64	; 0x40
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	eef0 1a46 	vmov.f32	s3, s12
 8002ef0:	eeb0 1a66 	vmov.f32	s2, s13
 8002ef4:	eef0 0a47 	vmov.f32	s1, s14
 8002ef8:	eeb0 0a67 	vmov.f32	s0, s15
 8002efc:	f7ff fcc0 	bl	8002880 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002f06:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 8003208 <commutate+0x388>
 8002f0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002f14:	eddf 6abd 	vldr	s13, [pc, #756]	; 800320c <commutate+0x38c>
 8002f18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002f2c:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8003208 <commutate+0x388>
 8002f30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002f3a:	eddf 6ab4 	vldr	s13, [pc, #720]	; 800320c <commutate+0x38c>
 8002f3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f52:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8003210 <commutate+0x390>
 8002f56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	edd3 7a08 	vldr	s15, [r3, #32]
 8002f60:	eddf 6aac 	vldr	s13, [pc, #688]	; 8003214 <commutate+0x394>
 8002f64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002f78:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8003218 <commutate+0x398>
 8002f7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f80:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 800321c <commutate+0x39c>
 8002f84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f88:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8003220 <commutate+0x3a0>
 8002f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	edc3 7a36 	vstr	s15, [r3, #216]	; 0xd8
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 8002f96:	4b9b      	ldr	r3, [pc, #620]	; (8003204 <commutate+0x384>)
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	edd3 7a3a 	vldr	s15, [r3, #232]	; 0xe8
 8002fb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	f001 fb45 	bl	8004646 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fcc:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fe0:	edc7 7a06 	vstr	s15, [r7, #24]

       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002ff6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ffa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003004:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003008:	edd7 7a05 	vldr	s15, [r7, #20]
 800300c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
       controller->v_d = fmaxf(fminf(controller->v_d, controller->v_max), -controller->v_max);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8003022:	eef0 0a47 	vmov.f32	s1, s14
 8003026:	eeb0 0a67 	vmov.f32	s0, s15
 800302a:	f007 f9f8 	bl	800a41e <fminf>
 800302e:	eeb0 7a40 	vmov.f32	s14, s0
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003038:	eef1 7a67 	vneg.f32	s15, s15
 800303c:	eef0 0a67 	vmov.f32	s1, s15
 8003040:	eeb0 0a47 	vmov.f32	s0, s14
 8003044:	f007 f9d0 	bl	800a3e8 <fmaxf>
 8003048:	eef0 7a40 	vmov.f32	s15, s0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8003064:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003068:	edd7 7a07 	vldr	s15, [r7, #28]
 800306c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       controller->d_int = fmaxf(fminf(controller->d_int, controller->v_max), -controller->v_max);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8003086:	eef0 0a47 	vmov.f32	s1, s14
 800308a:	eeb0 0a67 	vmov.f32	s0, s15
 800308e:	f007 f9c6 	bl	800a41e <fminf>
 8003092:	eeb0 7a40 	vmov.f32	s14, s0
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800309c:	eef1 7a67 	vneg.f32	s15, s15
 80030a0:	eef0 0a67 	vmov.f32	s1, s15
 80030a4:	eeb0 0a47 	vmov.f32	s0, s14
 80030a8:	f007 f99e 	bl	800a3e8 <fmaxf>
 80030ac:	eef0 7a40 	vmov.f32	s15, s0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 80030c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80030d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030da:	eeb0 0a67 	vmov.f32	s0, s15
 80030de:	f007 fb49 	bl	800a774 <sqrtf>
 80030e2:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80030ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80030f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 80030fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800311e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003122:	edd7 7a06 	vldr	s15, [r7, #24]
 8003126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800312a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->q_int = fmaxf(fminf(controller->q_int, controller->v_max), -controller->v_max);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8003140:	eef0 0a47 	vmov.f32	s1, s14
 8003144:	eeb0 0a67 	vmov.f32	s0, s15
 8003148:	f007 f969 	bl	800a41e <fminf>
 800314c:	eeb0 7a40 	vmov.f32	s14, s0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003156:	eef1 7a67 	vneg.f32	s15, s15
 800315a:	eef0 0a67 	vmov.f32	s1, s15
 800315e:	eeb0 0a47 	vmov.f32	s0, s14
 8003162:	f007 f941 	bl	800a3e8 <fmaxf>
 8003166:	eef0 7a40 	vmov.f32	s15, s0
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800317c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800318c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003194:	eeb0 0a67 	vmov.f32	s0, s15
 8003198:	f007 faec 	bl	800a774 <sqrtf>
 800319c:	eef0 7a40 	vmov.f32	s15, s0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
       controller->v_q = fmaxf(fminf(controller->v_q, vq_max), -vq_max);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80031ac:	edd7 0a03 	vldr	s1, [r7, #12]
 80031b0:	eeb0 0a67 	vmov.f32	s0, s15
 80031b4:	f007 f933 	bl	800a41e <fminf>
 80031b8:	eeb0 7a40 	vmov.f32	s14, s0
 80031bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80031c0:	eef1 7a67 	vneg.f32	s15, s15
 80031c4:	eef0 0a67 	vmov.f32	s1, s15
 80031c8:	eeb0 0a47 	vmov.f32	s0, s14
 80031cc:	f007 f90c 	bl	800a3e8 <fmaxf>
 80031d0:	eef0 7a40 	vmov.f32	s15, s0
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80031e6:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8003224 <commutate+0x3a4>
 80031ea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	e012      	b.n	8003228 <commutate+0x3a8>
 8003202:	bf00      	nop
 8003204:	20000600 	.word	0x20000600
 8003208:	3f7fbe77 	.word	0x3f7fbe77
 800320c:	3a83126f 	.word	0x3a83126f
 8003210:	3f7d70a4 	.word	0x3f7d70a4
 8003214:	3c23d70a 	.word	0x3c23d70a
 8003218:	3f933333 	.word	0x3f933333
 800321c:	3f733333 	.word	0x3f733333
 8003220:	3f13cd3a 	.word	0x3f13cd3a
 8003224:	381d4951 	.word	0x381d4951
 8003228:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	336c      	adds	r3, #108	; 0x6c
 8003236:	461a      	mov	r2, r3
 8003238:	eeb0 1a66 	vmov.f32	s2, s13
 800323c:	eef0 0a47 	vmov.f32	s1, s14
 8003240:	eeb0 0a67 	vmov.f32	s0, s15
 8003244:	f7ff fa98 	bl	8002778 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	3360      	adds	r3, #96	; 0x60
 8003270:	461a      	mov	r2, r3
 8003272:	eef0 1a46 	vmov.f32	s3, s12
 8003276:	eeb0 1a66 	vmov.f32	s2, s13
 800327a:	eef0 0a47 	vmov.f32	s1, s14
 800327e:	eeb0 0a67 	vmov.f32	s0, s15
 8003282:	f7ff fb8d 	bl	80029a0 <svm>

       set_dtc(controller);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff f8b8 	bl	80023fc <set_dtc>

    }
 800328c:	bf00      	nop
 800328e:	3720      	adds	r7, #32
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <torque_control>:


void torque_control(ControllerStruct *controller){
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	ed93 7a33 	vldr	s14, [r3, #204]	; 0xcc
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	edd3 6a31 	vldr	s13, [r3, #196]	; 0xc4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80032ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80032b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
 80032bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	edd3 6a34 	vldr	s13, [r3, #208]	; 0xd0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	ed93 6a32 	vldr	s12, [r3, #200]	; 0xc8
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80032d2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80032d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80032da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032de:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_des/(KT*GR);
 80032e2:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <torque_control+0x84>)
 80032e4:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <torque_control+0x84>)
 80032ea:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80032ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80032f2:	edd7 6a03 	vldr	s13, [r7, #12]
 80032f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    controller->i_d_des = 0.0f;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    }
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	20000600 	.word	0x20000600

0800331c <zero_commands>:



void zero_commands(ControllerStruct * controller){
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->kp = 0;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f04f 0200 	mov.w	r2, #0
 8003334:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->kd = 0;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f04f 0200 	mov.w	r2, #0
 800333e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->p_des = 0;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	controller->v_des = 0;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	controller->i_q_des = 0;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "drv8323.h"

 void run_fsm(FSMStruct * fsmstate){
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	b085      	sub	sp, #20
 8003370:	af02      	add	r7, sp, #8
 8003372:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */

	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	785a      	ldrb	r2, [r3, #1]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	429a      	cmp	r2, r3
 800337e:	d00d      	beq.n	800339c <run_fsm+0x30>
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f945 	bl	8003610 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	78db      	ldrb	r3, [r3, #3]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d006      	beq.n	800339c <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	785a      	ldrb	r2, [r3, #1]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f8d4 	bl	8003544 <fsm_enter_state>
		 }
	 }

	 switch(fsmstate->state){
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b06      	cmp	r3, #6
 80033a2:	f200 80ba 	bhi.w	800351a <run_fsm+0x1ae>
 80033a6:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <run_fsm+0x40>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	08003519 	.word	0x08003519
 80033b0:	080033c9 	.word	0x080033c9
 80033b4:	080034cd 	.word	0x080034cd
 80033b8:	0800351b 	.word	0x0800351b
 80033bc:	08003519 	.word	0x08003519
 80033c0:	0800350f 	.word	0x0800350f
 80033c4:	08003519 	.word	0x08003519
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 80033c8:	4b56      	ldr	r3, [pc, #344]	; (8003524 <run_fsm+0x1b8>)
 80033ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d108      	bne.n	80033e4 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80033d2:	4b55      	ldr	r3, [pc, #340]	; (8003528 <run_fsm+0x1bc>)
 80033d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033d8:	4a52      	ldr	r2, [pc, #328]	; (8003524 <run_fsm+0x1b8>)
 80033da:	4953      	ldr	r1, [pc, #332]	; (8003528 <run_fsm+0x1bc>)
 80033dc:	4853      	ldr	r0, [pc, #332]	; (800352c <run_fsm+0x1c0>)
 80033de:	f7fd ff97 	bl	8001310 <order_phases>
				 preference_writer_close(&prefs);
				 preference_writer_load(prefs);
				 update_fsm(fsmstate, 27);
			 }

			 break;
 80033e2:	e09a      	b.n	800351a <run_fsm+0x1ae>
			 else if(!comm_encoder_cal.done_cal){
 80033e4:	4b4f      	ldr	r3, [pc, #316]	; (8003524 <run_fsm+0x1b8>)
 80033e6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d108      	bne.n	8003400 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 80033ee:	4b4e      	ldr	r3, [pc, #312]	; (8003528 <run_fsm+0x1bc>)
 80033f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80033f4:	4a4b      	ldr	r2, [pc, #300]	; (8003524 <run_fsm+0x1b8>)
 80033f6:	494c      	ldr	r1, [pc, #304]	; (8003528 <run_fsm+0x1bc>)
 80033f8:	484c      	ldr	r0, [pc, #304]	; (800352c <run_fsm+0x1c0>)
 80033fa:	f7fe f887 	bl	800150c <calibrate_encoder>
			 break;
 80033fe:	e08c      	b.n	800351a <run_fsm+0x1ae>
				 printf("E_ZERO: %d  %f\r\n", E_ZERO, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8003400:	4b4b      	ldr	r3, [pc, #300]	; (8003530 <run_fsm+0x1c4>)
 8003402:	695c      	ldr	r4, [r3, #20]
 8003404:	4b49      	ldr	r3, [pc, #292]	; (800352c <run_fsm+0x1c0>)
 8003406:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800340a:	4b49      	ldr	r3, [pc, #292]	; (8003530 <run_fsm+0x1c4>)
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	425b      	negs	r3, r3
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8003534 <run_fsm+0x1c8>
 8003420:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003424:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003428:	eeb0 0a66 	vmov.f32	s0, s13
 800342c:	f007 f946 	bl	800a6bc <fmodf>
 8003430:	eeb0 7a40 	vmov.f32	s14, s0
 8003434:	eddf 7a40 	vldr	s15, [pc, #256]	; 8003538 <run_fsm+0x1cc>
 8003438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343c:	ee17 0a90 	vmov	r0, s15
 8003440:	f7fd f8a2 	bl	8000588 <__aeabi_f2d>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4621      	mov	r1, r4
 800344a:	483c      	ldr	r0, [pc, #240]	; (800353c <run_fsm+0x1d0>)
 800344c:	f008 fe44 	bl	800c0d8 <iprintf>
				 E_ZERO = comm_encoder_cal.ezero;
 8003450:	4b34      	ldr	r3, [pc, #208]	; (8003524 <run_fsm+0x1b8>)
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	4a36      	ldr	r2, [pc, #216]	; (8003530 <run_fsm+0x1c4>)
 8003456:	6153      	str	r3, [r2, #20]
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8003458:	4a34      	ldr	r2, [pc, #208]	; (800352c <run_fsm+0x1c0>)
 800345a:	4b32      	ldr	r3, [pc, #200]	; (8003524 <run_fsm+0x1b8>)
 800345c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8003460:	332c      	adds	r3, #44	; 0x2c
 8003462:	f102 008c 	add.w	r0, r2, #140	; 0x8c
 8003466:	4619      	mov	r1, r3
 8003468:	f44f 7300 	mov.w	r3, #512	; 0x200
 800346c:	461a      	mov	r2, r3
 800346e:	f008 f9c3 	bl	800b7f8 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8003472:	4a2f      	ldr	r2, [pc, #188]	; (8003530 <run_fsm+0x1c4>)
 8003474:	4b2b      	ldr	r3, [pc, #172]	; (8003524 <run_fsm+0x1b8>)
 8003476:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800347a:	332c      	adds	r3, #44	; 0x2c
 800347c:	f102 0018 	add.w	r0, r2, #24
 8003480:	4619      	mov	r1, r3
 8003482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003486:	461a      	mov	r2, r3
 8003488:	f008 f9b6 	bl	800b7f8 <memcpy>
				 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 800348c:	4b2c      	ldr	r3, [pc, #176]	; (8003540 <run_fsm+0x1d4>)
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	9200      	str	r2, [sp, #0]
 8003492:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003494:	f001 fb80 	bl	8004b98 <preference_writer_ready>
 8003498:	4603      	mov	r3, r0
 800349a:	f083 0301 	eor.w	r3, r3, #1
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <run_fsm+0x13e>
 80034a4:	4826      	ldr	r0, [pc, #152]	; (8003540 <run_fsm+0x1d4>)
 80034a6:	f001 fb68 	bl	8004b7a <preference_writer_open>
				 preference_writer_flush(&prefs);
 80034aa:	4825      	ldr	r0, [pc, #148]	; (8003540 <run_fsm+0x1d4>)
 80034ac:	f001 fb82 	bl	8004bb4 <preference_writer_flush>
				 preference_writer_close(&prefs);
 80034b0:	4823      	ldr	r0, [pc, #140]	; (8003540 <run_fsm+0x1d4>)
 80034b2:	f001 fbfb 	bl	8004cac <preference_writer_close>
				 preference_writer_load(prefs);
 80034b6:	4b22      	ldr	r3, [pc, #136]	; (8003540 <run_fsm+0x1d4>)
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	9200      	str	r2, [sp, #0]
 80034bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034be:	f001 fbb5 	bl	8004c2c <preference_writer_load>
				 update_fsm(fsmstate, 27);
 80034c2:	211b      	movs	r1, #27
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f915 	bl	80036f4 <update_fsm>
			 break;
 80034ca:	e026      	b.n	800351a <run_fsm+0x1ae>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 80034cc:	4b18      	ldr	r3, [pc, #96]	; (8003530 <run_fsm+0x1c4>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	dd0a      	ble.n	80034ea <run_fsm+0x17e>
 80034d4:	4b14      	ldr	r3, [pc, #80]	; (8003528 <run_fsm+0x1bc>)
 80034d6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80034da:	4b15      	ldr	r3, [pc, #84]	; (8003530 <run_fsm+0x1c4>)
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	429a      	cmp	r2, r3
 80034e0:	dd03      	ble.n	80034ea <run_fsm+0x17e>
				 zero_commands(&controller);
 80034e2:	4811      	ldr	r0, [pc, #68]	; (8003528 <run_fsm+0x1bc>)
 80034e4:	f7ff ff1a 	bl	800331c <zero_commands>
 80034e8:	e009      	b.n	80034fe <run_fsm+0x192>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 80034ea:	480f      	ldr	r0, [pc, #60]	; (8003528 <run_fsm+0x1bc>)
 80034ec:	f7ff fed2 	bl	8003294 <torque_control>
				 field_weaken(&controller);
 80034f0:	480d      	ldr	r0, [pc, #52]	; (8003528 <run_fsm+0x1bc>)
 80034f2:	f7ff fc4f 	bl	8002d94 <field_weaken>
				 commutate(&controller, &comm_encoder);
 80034f6:	490d      	ldr	r1, [pc, #52]	; (800352c <run_fsm+0x1c0>)
 80034f8:	480b      	ldr	r0, [pc, #44]	; (8003528 <run_fsm+0x1bc>)
 80034fa:	f7ff fcc1 	bl	8002e80 <commutate>
			 }
			 controller.timeout ++;
 80034fe:	4b0a      	ldr	r3, [pc, #40]	; (8003528 <run_fsm+0x1bc>)
 8003500:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003504:	3301      	adds	r3, #1
 8003506:	4a08      	ldr	r2, [pc, #32]	; (8003528 <run_fsm+0x1bc>)
 8003508:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			 break;
 800350c:	e005      	b.n	800351a <run_fsm+0x1ae>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 800350e:	2164      	movs	r1, #100	; 0x64
 8003510:	4806      	ldr	r0, [pc, #24]	; (800352c <run_fsm+0x1c0>)
 8003512:	f001 fad5 	bl	8004ac0 <ps_print>
			 break;
 8003516:	e000      	b.n	800351a <run_fsm+0x1ae>
			 break;
 8003518:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 800351a:	bf00      	nop
 800351c:	370c      	adds	r7, #12
 800351e:	46bd      	mov	sp, r7
 8003520:	bd90      	pop	{r4, r7, pc}
 8003522:	bf00      	nop
 8003524:	200009f0 	.word	0x200009f0
 8003528:	20000700 	.word	0x20000700
 800352c:	20000348 	.word	0x20000348
 8003530:	20008eac 	.word	0x20008eac
 8003534:	47800000 	.word	0x47800000
 8003538:	40c90fdb 	.word	0x40c90fdb
 800353c:	0800f718 	.word	0x0800f718
 8003540:	200005ec 	.word	0x200005ec

08003544 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b05      	cmp	r3, #5
 8003552:	d84d      	bhi.n	80035f0 <fsm_enter_state+0xac>
 8003554:	a201      	add	r2, pc, #4	; (adr r2, 800355c <fsm_enter_state+0x18>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	08003575 	.word	0x08003575
 8003560:	080035ab 	.word	0x080035ab
 8003564:	08003581 	.word	0x08003581
 8003568:	080035f1 	.word	0x080035f1
 800356c:	0800357b 	.word	0x0800357b
 8003570:	080035ef 	.word	0x080035ef
				case MENU_MODE:
				//printf("Entering Main Menu\r\n");
				enter_menu_state();
 8003574:	f000 f978 	bl	8003868 <enter_menu_state>
				break;
 8003578:	e03a      	b.n	80035f0 <fsm_enter_state+0xac>
			case SETUP_MODE:
				//printf("Entering Setup\r\n");
				enter_setup_state();
 800357a:	f000 f9a1 	bl	80038c0 <enter_setup_state>
				break;
 800357e:	e037      	b.n	80035f0 <fsm_enter_state+0xac>
			case ENCODER_MODE:
				//printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:
				//printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8003580:	2201      	movs	r2, #1
 8003582:	2120      	movs	r1, #32
 8003584:	481c      	ldr	r0, [pc, #112]	; (80035f8 <fsm_enter_state+0xb4>)
 8003586:	f003 ffd1 	bl	800752c <HAL_GPIO_WritePin>
				reset_foc(&controller);
 800358a:	481c      	ldr	r0, [pc, #112]	; (80035fc <fsm_enter_state+0xb8>)
 800358c:	f7ff fb8e 	bl	8002cac <reset_foc>
				drv_enable_gd(drv);
 8003590:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <fsm_enter_state+0xbc>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2100      	movs	r1, #0
 8003596:	4611      	mov	r1, r2
 8003598:	889a      	ldrh	r2, [r3, #4]
 800359a:	2300      	movs	r3, #0
 800359c:	f362 030f 	bfi	r3, r2, #0, #16
 80035a0:	4608      	mov	r0, r1
 80035a2:	4619      	mov	r1, r3
 80035a4:	f7fe fd5b 	bl	800205e <drv_enable_gd>
				break;
 80035a8:	e022      	b.n	80035f0 <fsm_enter_state+0xac>
			case CALIBRATION_MODE:
				//printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 80035aa:	4b16      	ldr	r3, [pc, #88]	; (8003604 <fsm_enter_state+0xc0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 80035b2:	4b14      	ldr	r3, [pc, #80]	; (8003604 <fsm_enter_state+0xc0>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <fsm_enter_state+0xc0>)
 80035bc:	2200      	movs	r2, #0
 80035be:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <fsm_enter_state+0xc4>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 80035c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035cc:	2100      	movs	r1, #0
 80035ce:	480f      	ldr	r0, [pc, #60]	; (800360c <fsm_enter_state+0xc8>)
 80035d0:	f008 f91d 	bl	800b80e <memset>
				drv_enable_gd(drv);
 80035d4:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <fsm_enter_state+0xbc>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	2100      	movs	r1, #0
 80035da:	4611      	mov	r1, r2
 80035dc:	889a      	ldrh	r2, [r3, #4]
 80035de:	2300      	movs	r3, #0
 80035e0:	f362 030f 	bfi	r3, r2, #0, #16
 80035e4:	4608      	mov	r0, r1
 80035e6:	4619      	mov	r1, r3
 80035e8:	f7fe fd39 	bl	800205e <drv_enable_gd>
				break;
 80035ec:	e000      	b.n	80035f0 <fsm_enter_state+0xac>
				break;
 80035ee:	bf00      	nop

		}
 }
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40020800 	.word	0x40020800
 80035fc:	20000700 	.word	0x20000700
 8003600:	200092cc 	.word	0x200092cc
 8003604:	200009f0 	.word	0x200009f0
 8003608:	20000348 	.word	0x20000348
 800360c:	200003d4 	.word	0x200003d4

08003610 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b05      	cmp	r3, #5
 800361e:	d85e      	bhi.n	80036de <fsm_exit_state+0xce>
 8003620:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <fsm_exit_state+0x18>)
 8003622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003626:	bf00      	nop
 8003628:	08003641 	.word	0x08003641
 800362c:	080036bf 	.word	0x080036bf
 8003630:	08003659 	.word	0x08003659
 8003634:	080036df 	.word	0x080036df
 8003638:	08003649 	.word	0x08003649
 800363c:	08003651 	.word	0x08003651
			case MENU_MODE:
				//printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	70da      	strb	r2, [r3, #3]
				break;
 8003646:	e04a      	b.n	80036de <fsm_exit_state+0xce>
			case SETUP_MODE:
				//printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	70da      	strb	r2, [r3, #3]
				break;
 800364e:	e046      	b.n	80036de <fsm_exit_state+0xce>
			case ENCODER_MODE:
				//printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	70da      	strb	r2, [r3, #3]
				break;
 8003656:	e042      	b.n	80036de <fsm_exit_state+0xce>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
 8003658:	4b23      	ldr	r3, [pc, #140]	; (80036e8 <fsm_exit_state+0xd8>)
 800365a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800365e:	eef0 7ae7 	vabs.f32	s15, s15
 8003662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366e:	d522      	bpl.n	80036b6 <fsm_exit_state+0xa6>
 8003670:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <fsm_exit_state+0xd8>)
 8003672:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003676:	eef0 7ae7 	vabs.f32	s15, s15
 800367a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800367e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	d516      	bpl.n	80036b6 <fsm_exit_state+0xa6>
					fsmstate->ready = 1;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	70da      	strb	r2, [r3, #3]
					drv_disable_gd(drv);
 800368e:	4b17      	ldr	r3, [pc, #92]	; (80036ec <fsm_exit_state+0xdc>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	2100      	movs	r1, #0
 8003694:	4611      	mov	r1, r2
 8003696:	889a      	ldrh	r2, [r3, #4]
 8003698:	2300      	movs	r3, #0
 800369a:	f362 030f 	bfi	r3, r2, #0, #16
 800369e:	4608      	mov	r0, r1
 80036a0:	4619      	mov	r1, r3
 80036a2:	f7fe fcf6 	bl	8002092 <drv_disable_gd>
					reset_foc(&controller);
 80036a6:	4810      	ldr	r0, [pc, #64]	; (80036e8 <fsm_exit_state+0xd8>)
 80036a8:	f7ff fb00 	bl	8002cac <reset_foc>
					//printf("Leaving Motor Mode\r\n");
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 80036ac:	2200      	movs	r2, #0
 80036ae:	2120      	movs	r1, #32
 80036b0:	480f      	ldr	r0, [pc, #60]	; (80036f0 <fsm_exit_state+0xe0>)
 80036b2:	f003 ff3b 	bl	800752c <HAL_GPIO_WritePin>
				}
				zero_commands(&controller);		// Set commands to zero
 80036b6:	480c      	ldr	r0, [pc, #48]	; (80036e8 <fsm_exit_state+0xd8>)
 80036b8:	f7ff fe30 	bl	800331c <zero_commands>
				break;
 80036bc:	e00f      	b.n	80036de <fsm_exit_state+0xce>
			case CALIBRATION_MODE:
				//printf("Exiting Calibration Mode\r\n");
				drv_disable_gd(drv);
 80036be:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <fsm_exit_state+0xdc>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	2100      	movs	r1, #0
 80036c4:	4611      	mov	r1, r2
 80036c6:	889a      	ldrh	r2, [r3, #4]
 80036c8:	2300      	movs	r3, #0
 80036ca:	f362 030f 	bfi	r3, r2, #0, #16
 80036ce:	4608      	mov	r0, r1
 80036d0:	4619      	mov	r1, r3
 80036d2:	f7fe fcde 	bl	8002092 <drv_disable_gd>
				//free(error_array);
				//free(lut_array);

				fsmstate->ready = 1;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	70da      	strb	r2, [r3, #3]
				break;
 80036dc:	bf00      	nop
		}

 }
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000700 	.word	0x20000700
 80036ec:	200092cc 	.word	0x200092cc
 80036f0:	40020800 	.word	0x40020800

080036f4 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	2b1b      	cmp	r3, #27
 8003704:	d106      	bne.n	8003714 <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	70da      	strb	r2, [r3, #3]
		return;
 8003712:	e09d      	b.n	8003850 <update_fsm+0x15c>
	}
	switch(fsmstate->state){
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b05      	cmp	r3, #5
 800371a:	f200 8099 	bhi.w	8003850 <update_fsm+0x15c>
 800371e:	a201      	add	r2, pc, #4	; (adr r2, 8003724 <update_fsm+0x30>)
 8003720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003724:	0800373d 	.word	0x0800373d
 8003728:	08003851 	.word	0x08003851
 800372c:	08003851 	.word	0x08003851
 8003730:	08003851 	.word	0x08003851
 8003734:	08003815 	.word	0x08003815
 8003738:	08003851 	.word	0x08003851
		case MENU_MODE:
			switch (fsm_input){
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	3b63      	subs	r3, #99	; 0x63
 8003740:	2b17      	cmp	r3, #23
 8003742:	f200 8084 	bhi.w	800384e <update_fsm+0x15a>
 8003746:	a201      	add	r2, pc, #4	; (adr r2, 800374c <update_fsm+0x58>)
 8003748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800374c:	080037ad 	.word	0x080037ad
 8003750:	0800384f 	.word	0x0800384f
 8003754:	080037c9 	.word	0x080037c9
 8003758:	0800384f 	.word	0x0800384f
 800375c:	0800384f 	.word	0x0800384f
 8003760:	0800384f 	.word	0x0800384f
 8003764:	0800384f 	.word	0x0800384f
 8003768:	0800384f 	.word	0x0800384f
 800376c:	0800384f 	.word	0x0800384f
 8003770:	0800384f 	.word	0x0800384f
 8003774:	080037bb 	.word	0x080037bb
 8003778:	0800384f 	.word	0x0800384f
 800377c:	0800384f 	.word	0x0800384f
 8003780:	0800384f 	.word	0x0800384f
 8003784:	0800384f 	.word	0x0800384f
 8003788:	0800384f 	.word	0x0800384f
 800378c:	080037d7 	.word	0x080037d7
 8003790:	0800384f 	.word	0x0800384f
 8003794:	0800384f 	.word	0x0800384f
 8003798:	0800384f 	.word	0x0800384f
 800379c:	0800384f 	.word	0x0800384f
 80037a0:	0800384f 	.word	0x0800384f
 80037a4:	0800384f 	.word	0x0800384f
 80037a8:	080037e5 	.word	0x080037e5
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	70da      	strb	r2, [r3, #3]
					break;
 80037b8:	e02b      	b.n	8003812 <update_fsm+0x11e>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2202      	movs	r2, #2
 80037be:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	70da      	strb	r2, [r3, #3]
					break;
 80037c6:	e024      	b.n	8003812 <update_fsm+0x11e>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2205      	movs	r2, #5
 80037cc:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	70da      	strb	r2, [r3, #3]
					break;
 80037d4:	e01d      	b.n	8003812 <update_fsm+0x11e>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2204      	movs	r2, #4
 80037da:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	70da      	strb	r2, [r3, #3]
					break;
 80037e2:	e016      	b.n	8003812 <update_fsm+0x11e>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 80037e4:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <update_fsm+0x164>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
					ps_sample(&comm_encoder, DT);
 80037ec:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 800385c <update_fsm+0x168>
 80037f0:	4819      	ldr	r0, [pc, #100]	; (8003858 <update_fsm+0x164>)
 80037f2:	f001 f819 	bl	8004828 <ps_sample>
					HAL_Delay(20);
 80037f6:	2014      	movs	r0, #20
 80037f8:	f002 f960 	bl	8005abc <HAL_Delay>
					M_ZERO = comm_encoder.count;
 80037fc:	4b16      	ldr	r3, [pc, #88]	; (8003858 <update_fsm+0x164>)
 80037fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003800:	4a17      	ldr	r2, [pc, #92]	; (8003860 <update_fsm+0x16c>)
 8003802:	6113      	str	r3, [r2, #16]
					//if (!prefs.ready()) prefs.open();
					//    prefs.flush();                                                  // Write new prefs to flash
					//    prefs.close();
					//    prefs.load();
					//spi.SetMechOffset(M_OFFSET);
					printf("\n\r  Saved new zero position:  %.4f\n\r\n\r", M_ZERO);
 8003804:	4b16      	ldr	r3, [pc, #88]	; (8003860 <update_fsm+0x16c>)
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	4619      	mov	r1, r3
 800380a:	4816      	ldr	r0, [pc, #88]	; (8003864 <update_fsm+0x170>)
 800380c:	f008 fc64 	bl	800c0d8 <iprintf>
					break;
 8003810:	bf00      	nop
				}
			break;
 8003812:	e01c      	b.n	800384e <update_fsm+0x15a>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	2b0d      	cmp	r3, #13
 8003818:	d103      	bne.n	8003822 <update_fsm+0x12e>
				process_user_input(fsmstate);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f956 	bl	8003acc <process_user_input>
				break;
 8003820:	e016      	b.n	8003850 <update_fsm+0x15c>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	7b1b      	ldrb	r3, [r3, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <update_fsm+0x13e>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	78fa      	ldrb	r2, [r7, #3]
 800382e:	735a      	strb	r2, [r3, #13]
 8003830:	e006      	b.n	8003840 <update_fsm+0x14c>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7b1b      	ldrb	r3, [r3, #12]
 8003836:	3b01      	subs	r3, #1
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	4413      	add	r3, r2
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	7b1b      	ldrb	r3, [r3, #12]
 8003844:	3301      	adds	r3, #1
 8003846:	b2da      	uxtb	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 800384c:	e000      	b.n	8003850 <update_fsm+0x15c>
			break;
 800384e:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000348 	.word	0x20000348
 800385c:	37d1b717 	.word	0x37d1b717
 8003860:	20008eac 	.word	0x20008eac
 8003864:	0800f72c 	.word	0x0800f72c

08003868 <enter_menu_state>:


 void enter_menu_state(void){
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 800386c:	480c      	ldr	r0, [pc, #48]	; (80038a0 <enter_menu_state+0x38>)
 800386e:	f008 fc33 	bl	800c0d8 <iprintf>
	    printf(" Commands:\n\r");
 8003872:	480c      	ldr	r0, [pc, #48]	; (80038a4 <enter_menu_state+0x3c>)
 8003874:	f008 fc30 	bl	800c0d8 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003878:	480b      	ldr	r0, [pc, #44]	; (80038a8 <enter_menu_state+0x40>)
 800387a:	f008 fc2d 	bl	800c0d8 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 800387e:	480b      	ldr	r0, [pc, #44]	; (80038ac <enter_menu_state+0x44>)
 8003880:	f008 fc2a 	bl	800c0d8 <iprintf>
	    printf(" s - Setup\n\r");
 8003884:	480a      	ldr	r0, [pc, #40]	; (80038b0 <enter_menu_state+0x48>)
 8003886:	f008 fc27 	bl	800c0d8 <iprintf>
	    printf(" e - Display Encoder\n\r");
 800388a:	480a      	ldr	r0, [pc, #40]	; (80038b4 <enter_menu_state+0x4c>)
 800388c:	f008 fc24 	bl	800c0d8 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003890:	4809      	ldr	r0, [pc, #36]	; (80038b8 <enter_menu_state+0x50>)
 8003892:	f008 fc21 	bl	800c0d8 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003896:	4809      	ldr	r0, [pc, #36]	; (80038bc <enter_menu_state+0x54>)
 8003898:	f008 fc1e 	bl	800c0d8 <iprintf>

	    //gpio.led->write(0);
 }
 800389c:	bf00      	nop
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	0800f754 	.word	0x0800f754
 80038a4:	0800f75c 	.word	0x0800f75c
 80038a8:	0800f76c 	.word	0x0800f76c
 80038ac:	0800f780 	.word	0x0800f780
 80038b0:	0800f79c 	.word	0x0800f79c
 80038b4:	0800f7ac 	.word	0x0800f7ac
 80038b8:	0800f7c4 	.word	0x0800f7c4
 80038bc:	0800f7e0 	.word	0x0800f7e0

080038c0 <enter_setup_state>:

 void enter_setup_state(void){
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 80038c6:	4853      	ldr	r0, [pc, #332]	; (8003a14 <enter_setup_state+0x154>)
 80038c8:	f008 fc06 	bl	800c0d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 80038cc:	4b52      	ldr	r3, [pc, #328]	; (8003a18 <enter_setup_state+0x158>)
 80038ce:	9301      	str	r3, [sp, #4]
 80038d0:	4b52      	ldr	r3, [pc, #328]	; (8003a1c <enter_setup_state+0x15c>)
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	4b52      	ldr	r3, [pc, #328]	; (8003a20 <enter_setup_state+0x160>)
 80038d6:	4a53      	ldr	r2, [pc, #332]	; (8003a24 <enter_setup_state+0x164>)
 80038d8:	4953      	ldr	r1, [pc, #332]	; (8003a28 <enter_setup_state+0x168>)
 80038da:	4854      	ldr	r0, [pc, #336]	; (8003a2c <enter_setup_state+0x16c>)
 80038dc:	f008 fbfc 	bl	800c0d8 <iprintf>
	    printf("\r\n Motor:\r\n");
 80038e0:	4853      	ldr	r0, [pc, #332]	; (8003a30 <enter_setup_state+0x170>)
 80038e2:	f008 fc6d 	bl	800c1c0 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "-", "-", GR);
 80038e6:	4b53      	ldr	r3, [pc, #332]	; (8003a34 <enter_setup_state+0x174>)
 80038e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fc fe4c 	bl	8000588 <__aeabi_f2d>
 80038f0:	4603      	mov	r3, r0
 80038f2:	460c      	mov	r4, r1
 80038f4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80038f8:	4b4f      	ldr	r3, [pc, #316]	; (8003a38 <enter_setup_state+0x178>)
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	4b4e      	ldr	r3, [pc, #312]	; (8003a38 <enter_setup_state+0x178>)
 80038fe:	4a4f      	ldr	r2, [pc, #316]	; (8003a3c <enter_setup_state+0x17c>)
 8003900:	494f      	ldr	r1, [pc, #316]	; (8003a40 <enter_setup_state+0x180>)
 8003902:	4850      	ldr	r0, [pc, #320]	; (8003a44 <enter_setup_state+0x184>)
 8003904:	f008 fbe8 	bl	800c0d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Kt (N-m/A)", "-", "-", KT);
 8003908:	4b4a      	ldr	r3, [pc, #296]	; (8003a34 <enter_setup_state+0x174>)
 800390a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390c:	4618      	mov	r0, r3
 800390e:	f7fc fe3b 	bl	8000588 <__aeabi_f2d>
 8003912:	4603      	mov	r3, r0
 8003914:	460c      	mov	r4, r1
 8003916:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800391a:	4b47      	ldr	r3, [pc, #284]	; (8003a38 <enter_setup_state+0x178>)
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	4b46      	ldr	r3, [pc, #280]	; (8003a38 <enter_setup_state+0x178>)
 8003920:	4a49      	ldr	r2, [pc, #292]	; (8003a48 <enter_setup_state+0x188>)
 8003922:	494a      	ldr	r1, [pc, #296]	; (8003a4c <enter_setup_state+0x18c>)
 8003924:	484a      	ldr	r0, [pc, #296]	; (8003a50 <enter_setup_state+0x190>)
 8003926:	f008 fbd7 	bl	800c0d8 <iprintf>
	    printf("\r\n Current Control:\r\n");
 800392a:	484a      	ldr	r0, [pc, #296]	; (8003a54 <enter_setup_state+0x194>)
 800392c:	f008 fc48 	bl	800c1c0 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003930:	4b40      	ldr	r3, [pc, #256]	; (8003a34 <enter_setup_state+0x174>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4618      	mov	r0, r3
 8003936:	f7fc fe27 	bl	8000588 <__aeabi_f2d>
 800393a:	4603      	mov	r3, r0
 800393c:	460c      	mov	r4, r1
 800393e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003942:	4b45      	ldr	r3, [pc, #276]	; (8003a58 <enter_setup_state+0x198>)
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	4b45      	ldr	r3, [pc, #276]	; (8003a5c <enter_setup_state+0x19c>)
 8003948:	4a45      	ldr	r2, [pc, #276]	; (8003a60 <enter_setup_state+0x1a0>)
 800394a:	4946      	ldr	r1, [pc, #280]	; (8003a64 <enter_setup_state+0x1a4>)
 800394c:	4846      	ldr	r0, [pc, #280]	; (8003a68 <enter_setup_state+0x1a8>)
 800394e:	f008 fbc3 	bl	800c0d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "40.0", I_MAX);
 8003952:	4b38      	ldr	r3, [pc, #224]	; (8003a34 <enter_setup_state+0x174>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	4618      	mov	r0, r3
 8003958:	f7fc fe16 	bl	8000588 <__aeabi_f2d>
 800395c:	4603      	mov	r3, r0
 800395e:	460c      	mov	r4, r1
 8003960:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003964:	4b41      	ldr	r3, [pc, #260]	; (8003a6c <enter_setup_state+0x1ac>)
 8003966:	9300      	str	r3, [sp, #0]
 8003968:	4b41      	ldr	r3, [pc, #260]	; (8003a70 <enter_setup_state+0x1b0>)
 800396a:	4a42      	ldr	r2, [pc, #264]	; (8003a74 <enter_setup_state+0x1b4>)
 800396c:	4942      	ldr	r1, [pc, #264]	; (8003a78 <enter_setup_state+0x1b8>)
 800396e:	483e      	ldr	r0, [pc, #248]	; (8003a68 <enter_setup_state+0x1a8>)
 8003970:	f008 fbb2 	bl	800c0d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 8003974:	4b2f      	ldr	r3, [pc, #188]	; (8003a34 <enter_setup_state+0x174>)
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	4618      	mov	r0, r3
 800397a:	f7fc fe05 	bl	8000588 <__aeabi_f2d>
 800397e:	4603      	mov	r3, r0
 8003980:	460c      	mov	r4, r1
 8003982:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003986:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <enter_setup_state+0x1bc>)
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	4b39      	ldr	r3, [pc, #228]	; (8003a70 <enter_setup_state+0x1b0>)
 800398c:	4a3c      	ldr	r2, [pc, #240]	; (8003a80 <enter_setup_state+0x1c0>)
 800398e:	493d      	ldr	r1, [pc, #244]	; (8003a84 <enter_setup_state+0x1c4>)
 8003990:	4835      	ldr	r0, [pc, #212]	; (8003a68 <enter_setup_state+0x1a8>)
 8003992:	f008 fba1 	bl	800c0d8 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0", "40.0", I_MAX_CONT);
 8003996:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <enter_setup_state+0x174>)
 8003998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399a:	4618      	mov	r0, r3
 800399c:	f7fc fdf4 	bl	8000588 <__aeabi_f2d>
 80039a0:	4603      	mov	r3, r0
 80039a2:	460c      	mov	r4, r1
 80039a4:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80039a8:	4b30      	ldr	r3, [pc, #192]	; (8003a6c <enter_setup_state+0x1ac>)
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	4b36      	ldr	r3, [pc, #216]	; (8003a88 <enter_setup_state+0x1c8>)
 80039ae:	4a37      	ldr	r2, [pc, #220]	; (8003a8c <enter_setup_state+0x1cc>)
 80039b0:	4937      	ldr	r1, [pc, #220]	; (8003a90 <enter_setup_state+0x1d0>)
 80039b2:	482d      	ldr	r0, [pc, #180]	; (8003a68 <enter_setup_state+0x1a8>)
 80039b4:	f008 fb90 	bl	800c0d8 <iprintf>
	    printf("\r\n CAN:\r\n");
 80039b8:	4836      	ldr	r0, [pc, #216]	; (8003a94 <enter_setup_state+0x1d4>)
 80039ba:	f008 fc01 	bl	800c1c0 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 80039be:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <enter_setup_state+0x1d8>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	9301      	str	r3, [sp, #4]
 80039c4:	4b35      	ldr	r3, [pc, #212]	; (8003a9c <enter_setup_state+0x1dc>)
 80039c6:	9300      	str	r3, [sp, #0]
 80039c8:	4b2f      	ldr	r3, [pc, #188]	; (8003a88 <enter_setup_state+0x1c8>)
 80039ca:	4a35      	ldr	r2, [pc, #212]	; (8003aa0 <enter_setup_state+0x1e0>)
 80039cc:	4935      	ldr	r1, [pc, #212]	; (8003aa4 <enter_setup_state+0x1e4>)
 80039ce:	4836      	ldr	r0, [pc, #216]	; (8003aa8 <enter_setup_state+0x1e8>)
 80039d0:	f008 fb82 	bl	800c0d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 80039d4:	4b30      	ldr	r3, [pc, #192]	; (8003a98 <enter_setup_state+0x1d8>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	4b30      	ldr	r3, [pc, #192]	; (8003a9c <enter_setup_state+0x1dc>)
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <enter_setup_state+0x1c8>)
 80039e0:	4a32      	ldr	r2, [pc, #200]	; (8003aac <enter_setup_state+0x1ec>)
 80039e2:	4933      	ldr	r1, [pc, #204]	; (8003ab0 <enter_setup_state+0x1f0>)
 80039e4:	4830      	ldr	r0, [pc, #192]	; (8003aa8 <enter_setup_state+0x1e8>)
 80039e6:	f008 fb77 	bl	800c0d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 80039ea:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <enter_setup_state+0x1d8>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	4b30      	ldr	r3, [pc, #192]	; (8003ab4 <enter_setup_state+0x1f4>)
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <enter_setup_state+0x1c8>)
 80039f6:	4a30      	ldr	r2, [pc, #192]	; (8003ab8 <enter_setup_state+0x1f8>)
 80039f8:	4930      	ldr	r1, [pc, #192]	; (8003abc <enter_setup_state+0x1fc>)
 80039fa:	4831      	ldr	r0, [pc, #196]	; (8003ac0 <enter_setup_state+0x200>)
 80039fc:	f008 fb6c 	bl	800c0d8 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r i.e. 'b1000''ENTER'\r\n ");
 8003a00:	4830      	ldr	r0, [pc, #192]	; (8003ac4 <enter_setup_state+0x204>)
 8003a02:	f008 fb69 	bl	800c0d8 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 8003a06:	4830      	ldr	r0, [pc, #192]	; (8003ac8 <enter_setup_state+0x208>)
 8003a08:	f008 fb66 	bl	800c0d8 <iprintf>
 }
 8003a0c:	bf00      	nop
 8003a0e:	3704      	adds	r7, #4
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd90      	pop	{r4, r7, pc}
 8003a14:	0800f7f8 	.word	0x0800f7f8
 8003a18:	0800f84c 	.word	0x0800f84c
 8003a1c:	0800f85c 	.word	0x0800f85c
 8003a20:	0800f814 	.word	0x0800f814
 8003a24:	0800f818 	.word	0x0800f818
 8003a28:	0800f824 	.word	0x0800f824
 8003a2c:	0800f82c 	.word	0x0800f82c
 8003a30:	0800f860 	.word	0x0800f860
 8003a34:	20000600 	.word	0x20000600
 8003a38:	0800f86c 	.word	0x0800f86c
 8003a3c:	0800f870 	.word	0x0800f870
 8003a40:	0800f87c 	.word	0x0800f87c
 8003a44:	0800f880 	.word	0x0800f880
 8003a48:	0800f8a0 	.word	0x0800f8a0
 8003a4c:	0800f8ac 	.word	0x0800f8ac
 8003a50:	0800f8b0 	.word	0x0800f8b0
 8003a54:	0800f8d0 	.word	0x0800f8d0
 8003a58:	0800f928 	.word	0x0800f928
 8003a5c:	0800f8e8 	.word	0x0800f8e8
 8003a60:	0800f8ec 	.word	0x0800f8ec
 8003a64:	0800f904 	.word	0x0800f904
 8003a68:	0800f908 	.word	0x0800f908
 8003a6c:	0800f94c 	.word	0x0800f94c
 8003a70:	0800f930 	.word	0x0800f930
 8003a74:	0800f934 	.word	0x0800f934
 8003a78:	0800f948 	.word	0x0800f948
 8003a7c:	0800f970 	.word	0x0800f970
 8003a80:	0800f954 	.word	0x0800f954
 8003a84:	0800f96c 	.word	0x0800f96c
 8003a88:	0800f978 	.word	0x0800f978
 8003a8c:	0800f97c 	.word	0x0800f97c
 8003a90:	0800f994 	.word	0x0800f994
 8003a94:	0800f998 	.word	0x0800f998
 8003a98:	20008eac 	.word	0x20008eac
 8003a9c:	0800f9d0 	.word	0x0800f9d0
 8003aa0:	0800f9a4 	.word	0x0800f9a4
 8003aa4:	0800f9ac 	.word	0x0800f9ac
 8003aa8:	0800f9b0 	.word	0x0800f9b0
 8003aac:	0800f9d4 	.word	0x0800f9d4
 8003ab0:	0800f9e4 	.word	0x0800f9e4
 8003ab4:	0800fa28 	.word	0x0800fa28
 8003ab8:	0800f9e8 	.word	0x0800f9e8
 8003abc:	0800fa08 	.word	0x0800fa08
 8003ac0:	0800fa0c 	.word	0x0800fa0c
 8003ac4:	0800fa30 	.word	0x0800fa30
 8003ac8:	0800fa7c 	.word	0x0800fa7c

08003acc <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 8003acc:	b590      	push	{r4, r7, lr}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	7b5b      	ldrb	r3, [r3, #13]
 8003ad8:	3b62      	subs	r3, #98	; 0x62
 8003ada:	2b12      	cmp	r3, #18
 8003adc:	f200 8169 	bhi.w	8003db2 <process_user_input+0x2e6>
 8003ae0:	a201      	add	r2, pc, #4	; (adr r2, 8003ae8 <process_user_input+0x1c>)
 8003ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae6:	bf00      	nop
 8003ae8:	08003b35 	.word	0x08003b35
 8003aec:	08003cef 	.word	0x08003cef
 8003af0:	08003db3 	.word	0x08003db3
 8003af4:	08003db3 	.word	0x08003db3
 8003af8:	08003c21 	.word	0x08003c21
 8003afc:	08003d47 	.word	0x08003d47
 8003b00:	08003c97 	.word	0x08003c97
 8003b04:	08003b8d 	.word	0x08003b8d
 8003b08:	08003db3 	.word	0x08003db3
 8003b0c:	08003d7d 	.word	0x08003d7d
 8003b10:	08003bc9 	.word	0x08003bc9
 8003b14:	08003bab 	.word	0x08003bab
 8003b18:	08003db3 	.word	0x08003db3
 8003b1c:	08003db3 	.word	0x08003db3
 8003b20:	08003db3 	.word	0x08003db3
 8003b24:	08003db3 	.word	0x08003db3
 8003b28:	08003db3 	.word	0x08003db3
 8003b2c:	08003db3 	.word	0x08003db3
 8003b30:	08003c79 	.word	0x08003c79
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f007 fe2b 	bl	800b794 <atof>
 8003b3e:	ec54 3b10 	vmov	r3, r4, d0
 8003b42:	4618      	mov	r0, r3
 8003b44:	4621      	mov	r1, r4
 8003b46:	f7fd f86f 	bl	8000c28 <__aeabi_d2f>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8003e1c <process_user_input+0x350>
 8003b50:	ee00 3a10 	vmov	s0, r3
 8003b54:	f006 fc63 	bl	800a41e <fminf>
 8003b58:	eef0 7a40 	vmov.f32	s15, s0
 8003b5c:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8003e20 <process_user_input+0x354>
 8003b60:	eeb0 0a67 	vmov.f32	s0, s15
 8003b64:	f006 fc40 	bl	800a3e8 <fmaxf>
 8003b68:	eef0 7a40 	vmov.f32	s15, s0
 8003b6c:	4bad      	ldr	r3, [pc, #692]	; (8003e24 <process_user_input+0x358>)
 8003b6e:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8003b72:	4bac      	ldr	r3, [pc, #688]	; (8003e24 <process_user_input+0x358>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fc fd06 	bl	8000588 <__aeabi_f2d>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	460c      	mov	r4, r1
 8003b80:	461a      	mov	r2, r3
 8003b82:	4623      	mov	r3, r4
 8003b84:	48a8      	ldr	r0, [pc, #672]	; (8003e28 <process_user_input+0x35c>)
 8003b86:	f008 faa7 	bl	800c0d8 <iprintf>
			 break;
 8003b8a:	e119      	b.n	8003dc0 <process_user_input+0x2f4>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4618      	mov	r0, r3
 8003b92:	f007 fe02 	bl	800b79a <atoi>
 8003b96:	4602      	mov	r2, r0
 8003b98:	4ba4      	ldr	r3, [pc, #656]	; (8003e2c <process_user_input+0x360>)
 8003b9a:	605a      	str	r2, [r3, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8003b9c:	4ba3      	ldr	r3, [pc, #652]	; (8003e2c <process_user_input+0x360>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	48a3      	ldr	r0, [pc, #652]	; (8003e30 <process_user_input+0x364>)
 8003ba4:	f008 fa98 	bl	800c0d8 <iprintf>
			 break;
 8003ba8:	e10a      	b.n	8003dc0 <process_user_input+0x2f4>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f007 fdf3 	bl	800b79a <atoi>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	4b9d      	ldr	r3, [pc, #628]	; (8003e2c <process_user_input+0x360>)
 8003bb8:	609a      	str	r2, [r3, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 8003bba:	4b9c      	ldr	r3, [pc, #624]	; (8003e2c <process_user_input+0x360>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	489c      	ldr	r0, [pc, #624]	; (8003e34 <process_user_input+0x368>)
 8003bc2:	f008 fa89 	bl	800c0d8 <iprintf>
			 break;
 8003bc6:	e0fb      	b.n	8003dc0 <process_user_input+0x2f4>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f007 fde1 	bl	800b794 <atof>
 8003bd2:	ec54 3b10 	vmov	r3, r4, d0
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	4621      	mov	r1, r4
 8003bda:	f7fd f825 	bl	8000c28 <__aeabi_d2f>
 8003bde:	4603      	mov	r3, r0
 8003be0:	eddf 0a95 	vldr	s1, [pc, #596]	; 8003e38 <process_user_input+0x36c>
 8003be4:	ee00 3a10 	vmov	s0, r3
 8003be8:	f006 fc19 	bl	800a41e <fminf>
 8003bec:	eef0 7a40 	vmov.f32	s15, s0
 8003bf0:	eddf 0a92 	vldr	s1, [pc, #584]	; 8003e3c <process_user_input+0x370>
 8003bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf8:	f006 fbf6 	bl	800a3e8 <fmaxf>
 8003bfc:	eef0 7a40 	vmov.f32	s15, s0
 8003c00:	4b88      	ldr	r3, [pc, #544]	; (8003e24 <process_user_input+0x358>)
 8003c02:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8003c06:	4b87      	ldr	r3, [pc, #540]	; (8003e24 <process_user_input+0x358>)
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fc fcbc 	bl	8000588 <__aeabi_f2d>
 8003c10:	4603      	mov	r3, r0
 8003c12:	460c      	mov	r4, r1
 8003c14:	461a      	mov	r2, r3
 8003c16:	4623      	mov	r3, r4
 8003c18:	4889      	ldr	r0, [pc, #548]	; (8003e40 <process_user_input+0x374>)
 8003c1a:	f008 fa5d 	bl	800c0d8 <iprintf>
			 break;
 8003c1e:	e0cf      	b.n	8003dc0 <process_user_input+0x2f4>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4618      	mov	r0, r3
 8003c26:	f007 fdb5 	bl	800b794 <atof>
 8003c2a:	ec54 3b10 	vmov	r3, r4, d0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	4621      	mov	r1, r4
 8003c32:	f7fc fff9 	bl	8000c28 <__aeabi_d2f>
 8003c36:	4603      	mov	r3, r0
 8003c38:	eddf 0a82 	vldr	s1, [pc, #520]	; 8003e44 <process_user_input+0x378>
 8003c3c:	ee00 3a10 	vmov	s0, r3
 8003c40:	f006 fbed 	bl	800a41e <fminf>
 8003c44:	eef0 7a40 	vmov.f32	s15, s0
 8003c48:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8003e3c <process_user_input+0x370>
 8003c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003c50:	f006 fbca 	bl	800a3e8 <fmaxf>
 8003c54:	eef0 7a40 	vmov.f32	s15, s0
 8003c58:	4b72      	ldr	r3, [pc, #456]	; (8003e24 <process_user_input+0x358>)
 8003c5a:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8003c5e:	4b71      	ldr	r3, [pc, #452]	; (8003e24 <process_user_input+0x358>)
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fc fc90 	bl	8000588 <__aeabi_f2d>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4623      	mov	r3, r4
 8003c70:	4875      	ldr	r0, [pc, #468]	; (8003e48 <process_user_input+0x37c>)
 8003c72:	f008 fa31 	bl	800c0d8 <iprintf>
			 break;
 8003c76:	e0a3      	b.n	8003dc0 <process_user_input+0x2f4>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f007 fd8c 	bl	800b79a <atoi>
 8003c82:	4602      	mov	r2, r0
 8003c84:	4b69      	ldr	r3, [pc, #420]	; (8003e2c <process_user_input+0x360>)
 8003c86:	60da      	str	r2, [r3, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8003c88:	4b68      	ldr	r3, [pc, #416]	; (8003e2c <process_user_input+0x360>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	486f      	ldr	r0, [pc, #444]	; (8003e4c <process_user_input+0x380>)
 8003c90:	f008 fa22 	bl	800c0d8 <iprintf>
			 break;
 8003c94:	e094      	b.n	8003dc0 <process_user_input+0x2f4>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f007 fd7a 	bl	800b794 <atof>
 8003ca0:	ec54 3b10 	vmov	r3, r4, d0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	f7fc ffbe 	bl	8000c28 <__aeabi_d2f>
 8003cac:	4603      	mov	r3, r0
 8003cae:	eddf 0a68 	vldr	s1, [pc, #416]	; 8003e50 <process_user_input+0x384>
 8003cb2:	ee00 3a10 	vmov	s0, r3
 8003cb6:	f006 fbb2 	bl	800a41e <fminf>
 8003cba:	eef0 7a40 	vmov.f32	s15, s0
 8003cbe:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8003e3c <process_user_input+0x370>
 8003cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cc6:	f006 fb8f 	bl	800a3e8 <fmaxf>
 8003cca:	eef0 7a40 	vmov.f32	s15, s0
 8003cce:	4b55      	ldr	r3, [pc, #340]	; (8003e24 <process_user_input+0x358>)
 8003cd0:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8003cd4:	4b53      	ldr	r3, [pc, #332]	; (8003e24 <process_user_input+0x358>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fc fc55 	bl	8000588 <__aeabi_f2d>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	4623      	mov	r3, r4
 8003ce6:	485b      	ldr	r0, [pc, #364]	; (8003e54 <process_user_input+0x388>)
 8003ce8:	f008 f9f6 	bl	800c0d8 <iprintf>
			 break;
 8003cec:	e068      	b.n	8003dc0 <process_user_input+0x2f4>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f007 fd4e 	bl	800b794 <atof>
 8003cf8:	ec54 3b10 	vmov	r3, r4, d0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	4621      	mov	r1, r4
 8003d00:	f7fc ff92 	bl	8000c28 <__aeabi_d2f>
 8003d04:	4603      	mov	r3, r0
 8003d06:	eddf 0a4c 	vldr	s1, [pc, #304]	; 8003e38 <process_user_input+0x36c>
 8003d0a:	ee00 3a10 	vmov	s0, r3
 8003d0e:	f006 fb86 	bl	800a41e <fminf>
 8003d12:	eef0 7a40 	vmov.f32	s15, s0
 8003d16:	eddf 0a49 	vldr	s1, [pc, #292]	; 8003e3c <process_user_input+0x370>
 8003d1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1e:	f006 fb63 	bl	800a3e8 <fmaxf>
 8003d22:	eef0 7a40 	vmov.f32	s15, s0
 8003d26:	4b3f      	ldr	r3, [pc, #252]	; (8003e24 <process_user_input+0x358>)
 8003d28:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8003d2c:	4b3d      	ldr	r3, [pc, #244]	; (8003e24 <process_user_input+0x358>)
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fc29 	bl	8000588 <__aeabi_f2d>
 8003d36:	4603      	mov	r3, r0
 8003d38:	460c      	mov	r4, r1
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	4623      	mov	r3, r4
 8003d3e:	4846      	ldr	r0, [pc, #280]	; (8003e58 <process_user_input+0x38c>)
 8003d40:	f008 f9ca 	bl	800c0d8 <iprintf>
			 break;
 8003d44:	e03c      	b.n	8003dc0 <process_user_input+0x2f4>
		 case 'g':
			 GR = atof(fsmstate->cmd_buff);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f007 fd22 	bl	800b794 <atof>
 8003d50:	ec54 3b10 	vmov	r3, r4, d0
 8003d54:	4618      	mov	r0, r3
 8003d56:	4621      	mov	r1, r4
 8003d58:	f7fc ff66 	bl	8000c28 <__aeabi_d2f>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	4b31      	ldr	r3, [pc, #196]	; (8003e24 <process_user_input+0x358>)
 8003d60:	645a      	str	r2, [r3, #68]	; 0x44
			 printf("GR set to %f\r\n", GR);
 8003d62:	4b30      	ldr	r3, [pc, #192]	; (8003e24 <process_user_input+0x358>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fc fc0e 	bl	8000588 <__aeabi_f2d>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	461a      	mov	r2, r3
 8003d72:	4623      	mov	r3, r4
 8003d74:	4839      	ldr	r0, [pc, #228]	; (8003e5c <process_user_input+0x390>)
 8003d76:	f008 f9af 	bl	800c0d8 <iprintf>
			 break;
 8003d7a:	e021      	b.n	8003dc0 <process_user_input+0x2f4>
		 case 'k':
			 KT = atof(fsmstate->cmd_buff);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	3304      	adds	r3, #4
 8003d80:	4618      	mov	r0, r3
 8003d82:	f007 fd07 	bl	800b794 <atof>
 8003d86:	ec54 3b10 	vmov	r3, r4, d0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	f7fc ff4b 	bl	8000c28 <__aeabi_d2f>
 8003d92:	4602      	mov	r2, r0
 8003d94:	4b23      	ldr	r3, [pc, #140]	; (8003e24 <process_user_input+0x358>)
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
			 printf("KT set to %f\r\n", KT);
 8003d98:	4b22      	ldr	r3, [pc, #136]	; (8003e24 <process_user_input+0x358>)
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7fc fbf3 	bl	8000588 <__aeabi_f2d>
 8003da2:	4603      	mov	r3, r0
 8003da4:	460c      	mov	r4, r1
 8003da6:	461a      	mov	r2, r3
 8003da8:	4623      	mov	r3, r4
 8003daa:	482d      	ldr	r0, [pc, #180]	; (8003e60 <process_user_input+0x394>)
 8003dac:	f008 f994 	bl	800c0d8 <iprintf>
			 break;
 8003db0:	e006      	b.n	8003dc0 <process_user_input+0x2f4>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3304      	adds	r3, #4
 8003db6:	4619      	mov	r1, r3
 8003db8:	482a      	ldr	r0, [pc, #168]	; (8003e64 <process_user_input+0x398>)
 8003dba:	f008 f98d 	bl	800c0d8 <iprintf>
			 break;
 8003dbe:	bf00      	nop

		 }

	 /* Write new settings to flash */

	 if (!preference_writer_ready(prefs)){ preference_writer_open(&prefs);}
 8003dc0:	4b29      	ldr	r3, [pc, #164]	; (8003e68 <process_user_input+0x39c>)
 8003dc2:	691a      	ldr	r2, [r3, #16]
 8003dc4:	9200      	str	r2, [sp, #0]
 8003dc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dc8:	f000 fee6 	bl	8004b98 <preference_writer_ready>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f083 0301 	eor.w	r3, r3, #1
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <process_user_input+0x312>
 8003dd8:	4823      	ldr	r0, [pc, #140]	; (8003e68 <process_user_input+0x39c>)
 8003dda:	f000 fece 	bl	8004b7a <preference_writer_open>
	 preference_writer_flush(&prefs);
 8003dde:	4822      	ldr	r0, [pc, #136]	; (8003e68 <process_user_input+0x39c>)
 8003de0:	f000 fee8 	bl	8004bb4 <preference_writer_flush>
	 preference_writer_close(&prefs);
 8003de4:	4820      	ldr	r0, [pc, #128]	; (8003e68 <process_user_input+0x39c>)
 8003de6:	f000 ff61 	bl	8004cac <preference_writer_close>
	 preference_writer_load(prefs);
 8003dea:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <process_user_input+0x39c>)
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	9200      	str	r2, [sp, #0]
 8003df0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003df2:	f000 ff1b 	bl	8004c2c <preference_writer_load>

	 enter_setup_state();
 8003df6:	f7ff fd63 	bl	80038c0 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	3304      	adds	r3, #4
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f007 fcfd 	bl	800b80e <memset>
 }
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd90      	pop	{r4, r7, pc}
 8003e1c:	44fa0000 	.word	0x44fa0000
 8003e20:	42c80000 	.word	0x42c80000
 8003e24:	20000600 	.word	0x20000600
 8003e28:	0800faa8 	.word	0x0800faa8
 8003e2c:	20008eac 	.word	0x20008eac
 8003e30:	0800fabc 	.word	0x0800fabc
 8003e34:	0800fad0 	.word	0x0800fad0
 8003e38:	42200000 	.word	0x42200000
 8003e3c:	00000000 	.word	0x00000000
 8003e40:	0800fae8 	.word	0x0800fae8
 8003e44:	42040000 	.word	0x42040000
 8003e48:	0800fafc 	.word	0x0800fafc
 8003e4c:	0800fb14 	.word	0x0800fb14
 8003e50:	43160000 	.word	0x43160000
 8003e54:	0800fb2c 	.word	0x0800fb2c
 8003e58:	0800fb44 	.word	0x0800fb44
 8003e5c:	0800fb5c 	.word	0x0800fb5c
 8003e60:	0800fb6c 	.word	0x0800fb6c
 8003e64:	0800fb7c 	.word	0x0800fb7c
 8003e68:	200005ec 	.word	0x200005ec

08003e6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	; 0x28
 8003e70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e72:	f107 0314 	add.w	r3, r7, #20
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	605a      	str	r2, [r3, #4]
 8003e7c:	609a      	str	r2, [r3, #8]
 8003e7e:	60da      	str	r2, [r3, #12]
 8003e80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e82:	2300      	movs	r3, #0
 8003e84:	613b      	str	r3, [r7, #16]
 8003e86:	4b37      	ldr	r3, [pc, #220]	; (8003f64 <MX_GPIO_Init+0xf8>)
 8003e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8a:	4a36      	ldr	r2, [pc, #216]	; (8003f64 <MX_GPIO_Init+0xf8>)
 8003e8c:	f043 0304 	orr.w	r3, r3, #4
 8003e90:	6313      	str	r3, [r2, #48]	; 0x30
 8003e92:	4b34      	ldr	r3, [pc, #208]	; (8003f64 <MX_GPIO_Init+0xf8>)
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
 8003ea2:	4b30      	ldr	r3, [pc, #192]	; (8003f64 <MX_GPIO_Init+0xf8>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	4a2f      	ldr	r2, [pc, #188]	; (8003f64 <MX_GPIO_Init+0xf8>)
 8003ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eac:	6313      	str	r3, [r2, #48]	; 0x30
 8003eae:	4b2d      	ldr	r3, [pc, #180]	; (8003f64 <MX_GPIO_Init+0xf8>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	4b29      	ldr	r3, [pc, #164]	; (8003f64 <MX_GPIO_Init+0xf8>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec2:	4a28      	ldr	r2, [pc, #160]	; (8003f64 <MX_GPIO_Init+0xf8>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eca:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <MX_GPIO_Init+0xf8>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	60bb      	str	r3, [r7, #8]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	607b      	str	r3, [r7, #4]
 8003eda:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <MX_GPIO_Init+0xf8>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	4a21      	ldr	r2, [pc, #132]	; (8003f64 <MX_GPIO_Init+0xf8>)
 8003ee0:	f043 0302 	orr.w	r3, r3, #2
 8003ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee6:	4b1f      	ldr	r3, [pc, #124]	; (8003f64 <MX_GPIO_Init+0xf8>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	607b      	str	r3, [r7, #4]
 8003ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f648 0110 	movw	r1, #34832	; 0x8810
 8003ef8:	481b      	ldr	r0, [pc, #108]	; (8003f68 <MX_GPIO_Init+0xfc>)
 8003efa:	f003 fb17 	bl	800752c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 8003efe:	2200      	movs	r2, #0
 8003f00:	2120      	movs	r1, #32
 8003f02:	481a      	ldr	r0, [pc, #104]	; (8003f6c <MX_GPIO_Init+0x100>)
 8003f04:	f003 fb12 	bl	800752c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003f08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f0e:	4b18      	ldr	r3, [pc, #96]	; (8003f70 <MX_GPIO_Init+0x104>)
 8003f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003f16:	f107 0314 	add.w	r3, r7, #20
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4813      	ldr	r0, [pc, #76]	; (8003f6c <MX_GPIO_Init+0x100>)
 8003f1e:	f003 f973 	bl	8007208 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA11 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_15;
 8003f22:	f648 0310 	movw	r3, #34832	; 0x8810
 8003f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f30:	2303      	movs	r3, #3
 8003f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f34:	f107 0314 	add.w	r3, r7, #20
 8003f38:	4619      	mov	r1, r3
 8003f3a:	480b      	ldr	r0, [pc, #44]	; (8003f68 <MX_GPIO_Init+0xfc>)
 8003f3c:	f003 f964 	bl	8007208 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003f40:	2320      	movs	r3, #32
 8003f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f44:	2301      	movs	r3, #1
 8003f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f50:	f107 0314 	add.w	r3, r7, #20
 8003f54:	4619      	mov	r1, r3
 8003f56:	4805      	ldr	r0, [pc, #20]	; (8003f6c <MX_GPIO_Init+0x100>)
 8003f58:	f003 f956 	bl	8007208 <HAL_GPIO_Init>

}
 8003f5c:	bf00      	nop
 8003f5e:	3728      	adds	r7, #40	; 0x28
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40020000 	.word	0x40020000
 8003f6c:	40020800 	.word	0x40020800
 8003f70:	10210000 	.word	0x10210000

08003f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	6039      	str	r1, [r7, #0]
 8003f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	db0a      	blt.n	8003f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	490c      	ldr	r1, [pc, #48]	; (8003fc0 <__NVIC_SetPriority+0x4c>)
 8003f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f92:	0112      	lsls	r2, r2, #4
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	440b      	add	r3, r1
 8003f98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f9c:	e00a      	b.n	8003fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	4908      	ldr	r1, [pc, #32]	; (8003fc4 <__NVIC_SetPriority+0x50>)
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	f003 030f 	and.w	r3, r3, #15
 8003faa:	3b04      	subs	r3, #4
 8003fac:	0112      	lsls	r2, r2, #4
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	761a      	strb	r2, [r3, #24]
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr
 8003fc0:	e000e100 	.word	0xe000e100
 8003fc4:	e000ed00 	.word	0xe000ed00

08003fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b088      	sub	sp, #32
 8003fcc:	af08      	add	r7, sp, #32
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fce:	f001 fd03 	bl	80059d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fd2:	f000 fa57 	bl	8004484 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fd6:	f7ff ff49 	bl	8003e6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003fda:	f001 fc35 	bl	8005848 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8003fde:	f001 fb19 	bl	8005614 <MX_TIM1_Init>
  MX_CAN1_Init();
 8003fe2:	f7fd fd59 	bl	8001a98 <MX_CAN1_Init>
  MX_SPI1_Init();
 8003fe6:	f000 fe71 	bl	8004ccc <MX_SPI1_Init>
  MX_SPI3_Init();
 8003fea:	f000 fea7 	bl	8004d3c <MX_SPI3_Init>
  MX_ADC1_Init();
 8003fee:	f7fc ffeb 	bl	8000fc8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003ff2:	f7fd f853 	bl	800109c <MX_ADC2_Init>
  MX_ADC3_Init();
 8003ff6:	f7fd f89b 	bl	8001130 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  /* Load settings from flash */
  preference_writer_init(&prefs, 6);
 8003ffa:	2106      	movs	r1, #6
 8003ffc:	48bc      	ldr	r0, [pc, #752]	; (80042f0 <main+0x328>)
 8003ffe:	f000 fdab 	bl	8004b58 <preference_writer_init>
  preference_writer_load(prefs);
 8004002:	4bbb      	ldr	r3, [pc, #748]	; (80042f0 <main+0x328>)
 8004004:	691a      	ldr	r2, [r3, #16]
 8004006:	9200      	str	r2, [sp, #0]
 8004008:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800400a:	f000 fe0f 	bl	8004c2c <preference_writer_load>

  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 800400e:	4bb9      	ldr	r3, [pc, #740]	; (80042f4 <main+0x32c>)
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004016:	d102      	bne.n	800401e <main+0x56>
 8004018:	4bb6      	ldr	r3, [pc, #728]	; (80042f4 <main+0x32c>)
 800401a:	2200      	movs	r2, #0
 800401c:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 800401e:	4bb5      	ldr	r3, [pc, #724]	; (80042f4 <main+0x32c>)
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004026:	d102      	bne.n	800402e <main+0x66>
 8004028:	4bb2      	ldr	r3, [pc, #712]	; (80042f4 <main+0x32c>)
 800402a:	2200      	movs	r2, #0
 800402c:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 800402e:	4bb2      	ldr	r3, [pc, #712]	; (80042f8 <main+0x330>)
 8004030:	edd3 7a02 	vldr	s15, [r3, #8]
 8004034:	eef4 7a67 	vcmp.f32	s15, s15
 8004038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800403c:	d609      	bvs.n	8004052 <main+0x8a>
 800403e:	4bae      	ldr	r3, [pc, #696]	; (80042f8 <main+0x330>)
 8004040:	edd3 7a02 	vldr	s15, [r3, #8]
 8004044:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004048:	eef4 7a47 	vcmp.f32	s15, s14
 800404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004050:	d102      	bne.n	8004058 <main+0x90>
 8004052:	4ba9      	ldr	r3, [pc, #676]	; (80042f8 <main+0x330>)
 8004054:	4aa9      	ldr	r2, [pc, #676]	; (80042fc <main+0x334>)
 8004056:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004058:	4ba7      	ldr	r3, [pc, #668]	; (80042f8 <main+0x330>)
 800405a:	edd3 7a03 	vldr	s15, [r3, #12]
 800405e:	eef4 7a67 	vcmp.f32	s15, s15
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	d609      	bvs.n	800407c <main+0xb4>
 8004068:	4ba3      	ldr	r3, [pc, #652]	; (80042f8 <main+0x330>)
 800406a:	edd3 7a03 	vldr	s15, [r3, #12]
 800406e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004072:	eef4 7a47 	vcmp.f32	s15, s14
 8004076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407a:	d102      	bne.n	8004082 <main+0xba>
 800407c:	4b9e      	ldr	r3, [pc, #632]	; (80042f8 <main+0x330>)
 800407e:	4aa0      	ldr	r2, [pc, #640]	; (8004300 <main+0x338>)
 8004080:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=12;}
 8004082:	4b9d      	ldr	r3, [pc, #628]	; (80042f8 <main+0x330>)
 8004084:	edd3 7a06 	vldr	s15, [r3, #24]
 8004088:	eef4 7a67 	vcmp.f32	s15, s15
 800408c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004090:	d609      	bvs.n	80040a6 <main+0xde>
 8004092:	4b99      	ldr	r3, [pc, #612]	; (80042f8 <main+0x330>)
 8004094:	edd3 7a06 	vldr	s15, [r3, #24]
 8004098:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800409c:	eef4 7a47 	vcmp.f32	s15, s14
 80040a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a4:	d102      	bne.n	80040ac <main+0xe4>
 80040a6:	4b94      	ldr	r3, [pc, #592]	; (80042f8 <main+0x330>)
 80040a8:	4a96      	ldr	r2, [pc, #600]	; (8004304 <main+0x33c>)
 80040aa:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 80040ac:	4b91      	ldr	r3, [pc, #580]	; (80042f4 <main+0x32c>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b4:	d102      	bne.n	80040bc <main+0xf4>
 80040b6:	4b8f      	ldr	r3, [pc, #572]	; (80042f4 <main+0x32c>)
 80040b8:	2201      	movs	r2, #1
 80040ba:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 80040bc:	4b8d      	ldr	r3, [pc, #564]	; (80042f4 <main+0x32c>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d102      	bne.n	80040cc <main+0x104>
 80040c6:	4b8b      	ldr	r3, [pc, #556]	; (80042f4 <main+0x32c>)
 80040c8:	2200      	movs	r2, #0
 80040ca:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 1000;}
 80040cc:	4b89      	ldr	r3, [pc, #548]	; (80042f4 <main+0x32c>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d4:	d103      	bne.n	80040de <main+0x116>
 80040d6:	4b87      	ldr	r3, [pc, #540]	; (80042f4 <main+0x32c>)
 80040d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040dc:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80040de:	4b86      	ldr	r3, [pc, #536]	; (80042f8 <main+0x330>)
 80040e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80040e4:	eef4 7a67 	vcmp.f32	s15, s15
 80040e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ec:	d609      	bvs.n	8004102 <main+0x13a>
 80040ee:	4b82      	ldr	r3, [pc, #520]	; (80042f8 <main+0x330>)
 80040f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80040f4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80040f8:	eef4 7a47 	vcmp.f32	s15, s14
 80040fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004100:	d103      	bne.n	800410a <main+0x142>
 8004102:	4b7d      	ldr	r3, [pc, #500]	; (80042f8 <main+0x330>)
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 800410a:	4b7b      	ldr	r3, [pc, #492]	; (80042f8 <main+0x330>)
 800410c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004110:	eef4 7a67 	vcmp.f32	s15, s15
 8004114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004118:	d609      	bvs.n	800412e <main+0x166>
 800411a:	4b77      	ldr	r3, [pc, #476]	; (80042f8 <main+0x330>)
 800411c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004120:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004124:	eef4 7a47 	vcmp.f32	s15, s14
 8004128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800412c:	d102      	bne.n	8004134 <main+0x16c>
 800412e:	4b72      	ldr	r3, [pc, #456]	; (80042f8 <main+0x330>)
 8004130:	4a75      	ldr	r2, [pc, #468]	; (8004308 <main+0x340>)
 8004132:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004134:	4b70      	ldr	r3, [pc, #448]	; (80042f8 <main+0x330>)
 8004136:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800413a:	eef4 7a67 	vcmp.f32	s15, s15
 800413e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004142:	d609      	bvs.n	8004158 <main+0x190>
 8004144:	4b6c      	ldr	r3, [pc, #432]	; (80042f8 <main+0x330>)
 8004146:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800414a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800414e:	eef4 7a47 	vcmp.f32	s15, s14
 8004152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004156:	d102      	bne.n	800415e <main+0x196>
 8004158:	4b67      	ldr	r3, [pc, #412]	; (80042f8 <main+0x330>)
 800415a:	4a6c      	ldr	r2, [pc, #432]	; (800430c <main+0x344>)
 800415c:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 800415e:	4b66      	ldr	r3, [pc, #408]	; (80042f8 <main+0x330>)
 8004160:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004164:	eef4 7a67 	vcmp.f32	s15, s15
 8004168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800416c:	d609      	bvs.n	8004182 <main+0x1ba>
 800416e:	4b62      	ldr	r3, [pc, #392]	; (80042f8 <main+0x330>)
 8004170:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8004174:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004178:	eef4 7a47 	vcmp.f32	s15, s14
 800417c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004180:	d102      	bne.n	8004188 <main+0x1c0>
 8004182:	4b5d      	ldr	r3, [pc, #372]	; (80042f8 <main+0x330>)
 8004184:	4a62      	ldr	r2, [pc, #392]	; (8004310 <main+0x348>)
 8004186:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 8004188:	4b5b      	ldr	r3, [pc, #364]	; (80042f8 <main+0x330>)
 800418a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800418e:	eef4 7a67 	vcmp.f32	s15, s15
 8004192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004196:	d609      	bvs.n	80041ac <main+0x1e4>
 8004198:	4b57      	ldr	r3, [pc, #348]	; (80042f8 <main+0x330>)
 800419a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800419e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80041a2:	eef4 7a47 	vcmp.f32	s15, s14
 80041a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041aa:	d103      	bne.n	80041b4 <main+0x1ec>
 80041ac:	4b52      	ldr	r3, [pc, #328]	; (80042f8 <main+0x330>)
 80041ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80041b2:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 80041b4:	4b50      	ldr	r3, [pc, #320]	; (80042f8 <main+0x330>)
 80041b6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80041ba:	eef4 7a67 	vcmp.f32	s15, s15
 80041be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c2:	d609      	bvs.n	80041d8 <main+0x210>
 80041c4:	4b4c      	ldr	r3, [pc, #304]	; (80042f8 <main+0x330>)
 80041c6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80041ca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80041ce:	eef4 7a47 	vcmp.f32	s15, s14
 80041d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d6:	d103      	bne.n	80041e0 <main+0x218>
 80041d8:	4b47      	ldr	r3, [pc, #284]	; (80042f8 <main+0x330>)
 80041da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80041de:	639a      	str	r2, [r3, #56]	; 0x38

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 80041e0:	f04f 0200 	mov.w	r2, #0
 80041e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041e8:	484a      	ldr	r0, [pc, #296]	; (8004314 <main+0x34c>)
 80041ea:	f007 ff75 	bl	800c0d8 <iprintf>
  }
  else{

  }

  init_controller_params(&controller);
 80041ee:	484a      	ldr	r0, [pc, #296]	; (8004318 <main+0x350>)
 80041f0:	f7fe fcc4 	bl	8002b7c <init_controller_params>

  /* calibration "encoder" zeroing */
  memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 80041f4:	f44f 7224 	mov.w	r2, #656	; 0x290
 80041f8:	2100      	movs	r1, #0
 80041fa:	4848      	ldr	r0, [pc, #288]	; (800431c <main+0x354>)
 80041fc:	f007 fb07 	bl	800b80e <memset>

  /* commutation encoder setup */
  comm_encoder.m_zero = M_ZERO;
 8004200:	4b3c      	ldr	r3, [pc, #240]	; (80042f4 <main+0x32c>)
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	4a46      	ldr	r2, [pc, #280]	; (8004320 <main+0x358>)
 8004206:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  comm_encoder.e_zero = E_ZERO;
 800420a:	4b3a      	ldr	r3, [pc, #232]	; (80042f4 <main+0x32c>)
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	4a44      	ldr	r2, [pc, #272]	; (8004320 <main+0x358>)
 8004210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  comm_encoder.ppairs = PPAIRS;
 8004214:	4b38      	ldr	r3, [pc, #224]	; (80042f8 <main+0x330>)
 8004216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004218:	4a41      	ldr	r2, [pc, #260]	; (8004320 <main+0x358>)
 800421a:	6693      	str	r3, [r2, #104]	; 0x68
  ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 800421c:	2164      	movs	r1, #100	; 0x64
 800421e:	4840      	ldr	r0, [pc, #256]	; (8004320 <main+0x358>)
 8004220:	f000 facc 	bl	80047bc <ps_warmup>

  if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8004224:	4a3e      	ldr	r2, [pc, #248]	; (8004320 <main+0x358>)
 8004226:	4b33      	ldr	r3, [pc, #204]	; (80042f4 <main+0x32c>)
 8004228:	f102 008c 	add.w	r0, r2, #140	; 0x8c
 800422c:	3318      	adds	r3, #24
 800422e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004232:	4619      	mov	r1, r3
 8004234:	f007 fae0 	bl	800b7f8 <memcpy>
  else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
  //for(int i = 0; i<128; i++){printf("%d\r\n", comm_encoder.offset_lut[i]);}

  /* Turn on ADCs */
  HAL_ADC_Start(&hadc1);
 8004238:	483a      	ldr	r0, [pc, #232]	; (8004324 <main+0x35c>)
 800423a:	f001 fca5 	bl	8005b88 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800423e:	483a      	ldr	r0, [pc, #232]	; (8004328 <main+0x360>)
 8004240:	f001 fca2 	bl	8005b88 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc3);
 8004244:	4839      	ldr	r0, [pc, #228]	; (800432c <main+0x364>)
 8004246:	f001 fc9f 	bl	8005b88 <HAL_ADC_Start>

  /* DRV8323 setup */
  HAL_GPIO_WritePin(DRV_CS, GPIO_PIN_SET ); 	// CS high
 800424a:	2201      	movs	r2, #1
 800424c:	2110      	movs	r1, #16
 800424e:	4838      	ldr	r0, [pc, #224]	; (8004330 <main+0x368>)
 8004250:	f003 f96c 	bl	800752c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_SET );
 8004254:	2201      	movs	r2, #1
 8004256:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800425a:	4835      	ldr	r0, [pc, #212]	; (8004330 <main+0x368>)
 800425c:	f003 f966 	bl	800752c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8004260:	2001      	movs	r0, #1
 8004262:	f001 fc2b 	bl	8005abc <HAL_Delay>
  //drv_calibrate(drv);
  HAL_Delay(1);
 8004266:	2001      	movs	r0, #1
 8004268:	f001 fc28 	bl	8005abc <HAL_Delay>
  drv_write_DCR(drv, 0x0, DIS_GDF_EN, 0x0, PWM_MODE_3X, 0x0, 0x0, 0x0, 0x0, 0x1);
 800426c:	4b31      	ldr	r3, [pc, #196]	; (8004334 <main+0x36c>)
 800426e:	2201      	movs	r2, #1
 8004270:	9206      	str	r2, [sp, #24]
 8004272:	2200      	movs	r2, #0
 8004274:	9205      	str	r2, [sp, #20]
 8004276:	2200      	movs	r2, #0
 8004278:	9204      	str	r2, [sp, #16]
 800427a:	2200      	movs	r2, #0
 800427c:	9203      	str	r2, [sp, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	9202      	str	r2, [sp, #8]
 8004282:	2201      	movs	r2, #1
 8004284:	9201      	str	r2, [sp, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	9200      	str	r2, [sp, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	2000      	movs	r0, #0
 800428e:	4610      	mov	r0, r2
 8004290:	889b      	ldrh	r3, [r3, #4]
 8004292:	2100      	movs	r1, #0
 8004294:	f363 010f 	bfi	r1, r3, #0, #16
 8004298:	2300      	movs	r3, #0
 800429a:	2200      	movs	r2, #0
 800429c:	f7fd fe2d 	bl	8001efa <drv_write_DCR>
  HAL_Delay(1);
 80042a0:	2001      	movs	r0, #1
 80042a2:	f001 fc0b 	bl	8005abc <HAL_Delay>
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x0, 0x1, 0x1, 0x1, SEN_LVL_1_0);
 80042a6:	4b23      	ldr	r3, [pc, #140]	; (8004334 <main+0x36c>)
 80042a8:	2203      	movs	r2, #3
 80042aa:	9206      	str	r2, [sp, #24]
 80042ac:	2201      	movs	r2, #1
 80042ae:	9205      	str	r2, [sp, #20]
 80042b0:	2201      	movs	r2, #1
 80042b2:	9204      	str	r2, [sp, #16]
 80042b4:	2201      	movs	r2, #1
 80042b6:	9203      	str	r2, [sp, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	9202      	str	r2, [sp, #8]
 80042bc:	2203      	movs	r2, #3
 80042be:	9201      	str	r2, [sp, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	9200      	str	r2, [sp, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	2000      	movs	r0, #0
 80042c8:	4610      	mov	r0, r2
 80042ca:	889b      	ldrh	r3, [r3, #4]
 80042cc:	2100      	movs	r1, #0
 80042ce:	f363 010f 	bfi	r1, r3, #0, #16
 80042d2:	2301      	movs	r3, #1
 80042d4:	2200      	movs	r2, #0
 80042d6:	f7fd fe80 	bl	8001fda <drv_write_CSACR>
  HAL_Delay(1);
 80042da:	2001      	movs	r0, #1
 80042dc:	f001 fbee 	bl	8005abc <HAL_Delay>
  zero_current(&controller);
 80042e0:	480d      	ldr	r0, [pc, #52]	; (8004318 <main+0x350>)
 80042e2:	f7fe fc07 	bl	8002af4 <zero_current>
  HAL_Delay(1);
 80042e6:	2001      	movs	r0, #1
 80042e8:	f001 fbe8 	bl	8005abc <HAL_Delay>
 80042ec:	e024      	b.n	8004338 <main+0x370>
 80042ee:	bf00      	nop
 80042f0:	200005ec 	.word	0x200005ec
 80042f4:	20008eac 	.word	0x20008eac
 80042f8:	20000600 	.word	0x20000600
 80042fc:	447a0000 	.word	0x447a0000
 8004300:	42200000 	.word	0x42200000
 8004304:	41400000 	.word	0x41400000
 8004308:	42fa0000 	.word	0x42fa0000
 800430c:	41600000 	.word	0x41600000
 8004310:	41a80000 	.word	0x41a80000
 8004314:	0800fba4 	.word	0x0800fba4
 8004318:	20000700 	.word	0x20000700
 800431c:	20008c1c 	.word	0x20008c1c
 8004320:	20000348 	.word	0x20000348
 8004324:	20000290 	.word	0x20000290
 8004328:	20000248 	.word	0x20000248
 800432c:	200002d8 	.word	0x200002d8
 8004330:	40020000 	.word	0x40020000
 8004334:	200092cc 	.word	0x200092cc
  drv_write_CSACR(drv, 0x0, 0x1, 0x0, CSA_GAIN_40, 0x1, 0x0, 0x0, 0x0, SEN_LVL_1_0);
 8004338:	4b48      	ldr	r3, [pc, #288]	; (800445c <main+0x494>)
 800433a:	2203      	movs	r2, #3
 800433c:	9206      	str	r2, [sp, #24]
 800433e:	2200      	movs	r2, #0
 8004340:	9205      	str	r2, [sp, #20]
 8004342:	2200      	movs	r2, #0
 8004344:	9204      	str	r2, [sp, #16]
 8004346:	2200      	movs	r2, #0
 8004348:	9203      	str	r2, [sp, #12]
 800434a:	2201      	movs	r2, #1
 800434c:	9202      	str	r2, [sp, #8]
 800434e:	2203      	movs	r2, #3
 8004350:	9201      	str	r2, [sp, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	9200      	str	r2, [sp, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	2000      	movs	r0, #0
 800435a:	4610      	mov	r0, r2
 800435c:	889b      	ldrh	r3, [r3, #4]
 800435e:	2100      	movs	r1, #0
 8004360:	f363 010f 	bfi	r1, r3, #0, #16
 8004364:	2301      	movs	r3, #1
 8004366:	2200      	movs	r2, #0
 8004368:	f7fd fe37 	bl	8001fda <drv_write_CSACR>
  HAL_Delay(1);
 800436c:	2001      	movs	r0, #1
 800436e:	f001 fba5 	bl	8005abc <HAL_Delay>
  drv_write_OCPCR(drv, TRETRY_50US, DEADTIME_50NS, OCP_DEG_8US, OCP_DEG_8US, VDS_LVL_1_88);
 8004372:	4b3a      	ldr	r3, [pc, #232]	; (800445c <main+0x494>)
 8004374:	220f      	movs	r2, #15
 8004376:	9202      	str	r2, [sp, #8]
 8004378:	2203      	movs	r2, #3
 800437a:	9201      	str	r2, [sp, #4]
 800437c:	2203      	movs	r2, #3
 800437e:	9200      	str	r2, [sp, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	2000      	movs	r0, #0
 8004384:	4610      	mov	r0, r2
 8004386:	889b      	ldrh	r3, [r3, #4]
 8004388:	2100      	movs	r1, #0
 800438a:	f363 010f 	bfi	r1, r3, #0, #16
 800438e:	2300      	movs	r3, #0
 8004390:	2201      	movs	r2, #1
 8004392:	f7fd fdf4 	bl	8001f7e <drv_write_OCPCR>
  HAL_Delay(1);
 8004396:	2001      	movs	r0, #1
 8004398:	f001 fb90 	bl	8005abc <HAL_Delay>
  drv_disable_gd(drv);
 800439c:	4b2f      	ldr	r3, [pc, #188]	; (800445c <main+0x494>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	2100      	movs	r1, #0
 80043a2:	4611      	mov	r1, r2
 80043a4:	889a      	ldrh	r2, [r3, #4]
 80043a6:	2300      	movs	r3, #0
 80043a8:	f362 030f 	bfi	r3, r2, #0, #16
 80043ac:	4608      	mov	r0, r1
 80043ae:	4619      	mov	r1, r3
 80043b0:	f7fd fe6f 	bl	8002092 <drv_disable_gd>
  HAL_Delay(1);
 80043b4:	2001      	movs	r0, #1
 80043b6:	f001 fb81 	bl	8005abc <HAL_Delay>
  //drv_enable_gd(drv);   */
  printf("ADC A OFFSET: %d     ADC B OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset);
 80043ba:	4b29      	ldr	r3, [pc, #164]	; (8004460 <main+0x498>)
 80043bc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80043c0:	4b27      	ldr	r3, [pc, #156]	; (8004460 <main+0x498>)
 80043c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043c6:	461a      	mov	r2, r3
 80043c8:	4826      	ldr	r0, [pc, #152]	; (8004464 <main+0x49c>)
 80043ca:	f007 fe85 	bl	800c0d8 <iprintf>

  /* Turn on PWM */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80043ce:	2100      	movs	r1, #0
 80043d0:	4825      	ldr	r0, [pc, #148]	; (8004468 <main+0x4a0>)
 80043d2:	f004 f95f 	bl	8008694 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80043d6:	2104      	movs	r1, #4
 80043d8:	4823      	ldr	r0, [pc, #140]	; (8004468 <main+0x4a0>)
 80043da:	f004 f95b 	bl	8008694 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80043de:	2108      	movs	r1, #8
 80043e0:	4821      	ldr	r0, [pc, #132]	; (8004468 <main+0x4a0>)
 80043e2:	f004 f957 	bl	8008694 <HAL_TIM_PWM_Start>

  /* CAN setup */
  can_rx_init(&can_rx);
 80043e6:	4821      	ldr	r0, [pc, #132]	; (800446c <main+0x4a4>)
 80043e8:	f7fd fbdc 	bl	8001ba4 <can_rx_init>
  can_tx_init(&can_tx);
 80043ec:	4820      	ldr	r0, [pc, #128]	; (8004470 <main+0x4a8>)
 80043ee:	f7fd fc07 	bl	8001c00 <can_tx_init>
  HAL_CAN_Start(&CAN_H); //start CAN
 80043f2:	4820      	ldr	r0, [pc, #128]	; (8004474 <main+0x4ac>)
 80043f4:	f002 f970 	bl	80066d8 <HAL_CAN_Start>
  __HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt
 80043f8:	4b1e      	ldr	r3, [pc, #120]	; (8004474 <main+0x4ac>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <main+0x4ac>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f042 0202 	orr.w	r2, r2, #2
 8004406:	615a      	str	r2, [r3, #20]

  /* Set Interrupt Priorities */
  NVIC_SetPriority(PWM_ISR, 1); // commutation > communication
 8004408:	2101      	movs	r1, #1
 800440a:	2019      	movs	r0, #25
 800440c:	f7ff fdb2 	bl	8003f74 <__NVIC_SetPriority>
  NVIC_SetPriority(CAN_ISR, 3);
 8004410:	2103      	movs	r1, #3
 8004412:	2014      	movs	r0, #20
 8004414:	f7ff fdae 	bl	8003f74 <__NVIC_SetPriority>

  /* Start the FSM */
  state.state = MENU_MODE;
 8004418:	4b17      	ldr	r3, [pc, #92]	; (8004478 <main+0x4b0>)
 800441a:	2200      	movs	r2, #0
 800441c:	701a      	strb	r2, [r3, #0]
  state.next_state = MENU_MODE;
 800441e:	4b16      	ldr	r3, [pc, #88]	; (8004478 <main+0x4b0>)
 8004420:	2200      	movs	r2, #0
 8004422:	705a      	strb	r2, [r3, #1]
  state.ready = 1;
 8004424:	4b14      	ldr	r3, [pc, #80]	; (8004478 <main+0x4b0>)
 8004426:	2201      	movs	r2, #1
 8004428:	70da      	strb	r2, [r3, #3]


  /* Turn on interrupts */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 800442a:	2201      	movs	r2, #1
 800442c:	4913      	ldr	r1, [pc, #76]	; (800447c <main+0x4b4>)
 800442e:	4814      	ldr	r0, [pc, #80]	; (8004480 <main+0x4b8>)
 8004430:	f005 f8fe 	bl	8009630 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim1);
 8004434:	480c      	ldr	r0, [pc, #48]	; (8004468 <main+0x4a0>)
 8004436:	f004 f8d4 	bl	80085e2 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(100);
 800443a:	2064      	movs	r0, #100	; 0x64
 800443c:	f001 fb3e 	bl	8005abc <HAL_Delay>
	  drv_print_faults(drv);
 8004440:	4b06      	ldr	r3, [pc, #24]	; (800445c <main+0x494>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	2100      	movs	r1, #0
 8004446:	4611      	mov	r1, r2
 8004448:	889a      	ldrh	r2, [r3, #4]
 800444a:	2300      	movs	r3, #0
 800444c:	f362 030f 	bfi	r3, r2, #0, #16
 8004450:	4608      	mov	r0, r1
 8004452:	4619      	mov	r1, r3
 8004454:	f7fd fe38 	bl	80020c8 <drv_print_faults>
	  HAL_Delay(100);
 8004458:	e7ef      	b.n	800443a <main+0x472>
 800445a:	bf00      	nop
 800445c:	200092cc 	.word	0x200092cc
 8004460:	20000700 	.word	0x20000700
 8004464:	0800fbc8 	.word	0x0800fbc8
 8004468:	20009400 	.word	0x20009400
 800446c:	200092d4 	.word	0x200092d4
 8004470:	200092ac 	.word	0x200092ac
 8004474:	20000320 	.word	0x20000320
 8004478:	200005dc 	.word	0x200005dc
 800447c:	200005d8 	.word	0x200005d8
 8004480:	20009440 	.word	0x20009440

08004484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b094      	sub	sp, #80	; 0x50
 8004488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800448a:	f107 031c 	add.w	r3, r7, #28
 800448e:	2234      	movs	r2, #52	; 0x34
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f007 f9bb 	bl	800b80e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004498:	f107 0308 	add.w	r3, r7, #8
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80044a8:	2300      	movs	r3, #0
 80044aa:	607b      	str	r3, [r7, #4]
 80044ac:	4b2c      	ldr	r3, [pc, #176]	; (8004560 <SystemClock_Config+0xdc>)
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	4a2b      	ldr	r2, [pc, #172]	; (8004560 <SystemClock_Config+0xdc>)
 80044b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b6:	6413      	str	r3, [r2, #64]	; 0x40
 80044b8:	4b29      	ldr	r3, [pc, #164]	; (8004560 <SystemClock_Config+0xdc>)
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044c4:	2300      	movs	r3, #0
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	4b26      	ldr	r3, [pc, #152]	; (8004564 <SystemClock_Config+0xe0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a25      	ldr	r2, [pc, #148]	; (8004564 <SystemClock_Config+0xe0>)
 80044ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044d2:	6013      	str	r3, [r2, #0]
 80044d4:	4b23      	ldr	r3, [pc, #140]	; (8004564 <SystemClock_Config+0xe0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044dc:	603b      	str	r3, [r7, #0]
 80044de:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80044e0:	2302      	movs	r3, #2
 80044e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80044e4:	2301      	movs	r3, #1
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80044e8:	2310      	movs	r3, #16
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044ec:	2302      	movs	r3, #2
 80044ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80044f0:	2300      	movs	r3, #0
 80044f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80044f4:	2308      	movs	r3, #8
 80044f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80044f8:	23b4      	movs	r3, #180	; 0xb4
 80044fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044fc:	2302      	movs	r3, #2
 80044fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004500:	2302      	movs	r3, #2
 8004502:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004504:	2302      	movs	r3, #2
 8004506:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004508:	f107 031c 	add.w	r3, r7, #28
 800450c:	4618      	mov	r0, r3
 800450e:	f003 fb31 	bl	8007b74 <HAL_RCC_OscConfig>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004518:	f000 f826 	bl	8004568 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800451c:	f003 f820 	bl	8007560 <HAL_PWREx_EnableOverDrive>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8004526:	f000 f81f 	bl	8004568 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800452a:	230f      	movs	r3, #15
 800452c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800452e:	2302      	movs	r3, #2
 8004530:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004536:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800453a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800453c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004540:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004542:	f107 0308 	add.w	r3, r7, #8
 8004546:	2105      	movs	r1, #5
 8004548:	4618      	mov	r0, r3
 800454a:	f003 f859 	bl	8007600 <HAL_RCC_ClockConfig>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004554:	f000 f808 	bl	8004568 <Error_Handler>
  }
}
 8004558:	bf00      	nop
 800455a:	3750      	adds	r7, #80	; 0x50
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	40023800 	.word	0x40023800
 8004564:	40007000 	.word	0x40007000

08004568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800456c:	bf00      	nop
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <fmaxf3>:
float fminf(float x, float y){
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
    }
*/
float fmaxf3(float x, float y, float z){
 8004576:	b480      	push	{r7}
 8004578:	b085      	sub	sp, #20
 800457a:	af00      	add	r7, sp, #0
 800457c:	ed87 0a03 	vstr	s0, [r7, #12]
 8004580:	edc7 0a02 	vstr	s1, [r7, #8]
 8004584:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004588:	ed97 7a03 	vldr	s14, [r7, #12]
 800458c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004598:	dd0c      	ble.n	80045b4 <fmaxf3+0x3e>
 800459a:	ed97 7a03 	vldr	s14, [r7, #12]
 800459e:	edd7 7a01 	vldr	s15, [r7, #4]
 80045a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045aa:	dd01      	ble.n	80045b0 <fmaxf3+0x3a>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	e00d      	b.n	80045cc <fmaxf3+0x56>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	e00b      	b.n	80045cc <fmaxf3+0x56>
 80045b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80045b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80045bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c4:	dd01      	ble.n	80045ca <fmaxf3+0x54>
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	e000      	b.n	80045cc <fmaxf3+0x56>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	ee07 3a90 	vmov	s15, r3
    }
 80045d0:	eeb0 0a67 	vmov.f32	s0, s15
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <fminf3>:

float fminf3(float x, float y, float z){
 80045de:	b480      	push	{r7}
 80045e0:	b085      	sub	sp, #20
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	ed87 0a03 	vstr	s0, [r7, #12]
 80045e8:	edc7 0a02 	vstr	s1, [r7, #8]
 80045ec:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 80045f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80045f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80045f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004600:	d50c      	bpl.n	800461c <fminf3+0x3e>
 8004602:	ed97 7a03 	vldr	s14, [r7, #12]
 8004606:	edd7 7a01 	vldr	s15, [r7, #4]
 800460a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	d501      	bpl.n	8004618 <fminf3+0x3a>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	e00d      	b.n	8004634 <fminf3+0x56>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	e00b      	b.n	8004634 <fminf3+0x56>
 800461c:	ed97 7a02 	vldr	s14, [r7, #8]
 8004620:	edd7 7a01 	vldr	s15, [r7, #4]
 8004624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800462c:	d501      	bpl.n	8004632 <fminf3+0x54>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	e000      	b.n	8004634 <fminf3+0x56>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	ee07 3a90 	vmov	s15, r3
    }
 8004638:	eeb0 0a67 	vmov.f32	s0, s15
 800463c:	3714      	adds	r7, #20
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <limit_norm>:
    /// Returns nearest integer ///
    
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 8004646:	b590      	push	{r4, r7, lr}
 8004648:	b087      	sub	sp, #28
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrt(*x * *x + *y * *y);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	ed93 7a00 	vldr	s14, [r3]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	edd3 7a00 	vldr	s15, [r3]
 8004660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	edd3 6a00 	vldr	s13, [r3]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	edd3 7a00 	vldr	s15, [r3]
 8004670:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004678:	ee17 0a90 	vmov	r0, s15
 800467c:	f7fb ff84 	bl	8000588 <__aeabi_f2d>
 8004680:	4603      	mov	r3, r0
 8004682:	460c      	mov	r4, r1
 8004684:	ec44 3b10 	vmov	d0, r3, r4
 8004688:	f005 ffbe 	bl	800a608 <sqrt>
 800468c:	ec54 3b10 	vmov	r3, r4, d0
 8004690:	4618      	mov	r0, r3
 8004692:	4621      	mov	r1, r4
 8004694:	f7fc fac8 	bl	8000c28 <__aeabi_d2f>
 8004698:	4603      	mov	r3, r0
 800469a:	617b      	str	r3, [r7, #20]
    if(norm > limit){
 800469c:	ed97 7a05 	vldr	s14, [r7, #20]
 80046a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80046a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ac:	dc00      	bgt.n	80046b0 <limit_norm+0x6a>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 80046ae:	e01b      	b.n	80046e8 <limit_norm+0xa2>
        *x = *x * limit/norm;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	ed93 7a00 	vldr	s14, [r3]
 80046b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80046ba:	ee67 6a27 	vmul.f32	s13, s14, s15
 80046be:	ed97 7a05 	vldr	s14, [r7, #20]
 80046c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	ed93 7a00 	vldr	s14, [r3]
 80046d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80046d6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80046da:	ed97 7a05 	vldr	s14, [r7, #20]
 80046de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	edc3 7a00 	vstr	s15, [r3]
    }
 80046e8:	bf00      	nop
 80046ea:	371c      	adds	r7, #28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd90      	pop	{r4, r7, pc}

080046f0 <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fmaxf(fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80046fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80046fe:	ed87 1a01 	vstr	s2, [r7, #4]
 8004702:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8004704:	ed97 7a01 	vldr	s14, [r7, #4]
 8004708:	edd7 7a02 	vldr	s15, [r7, #8]
 800470c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004710:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8004718:	ed97 7a03 	vldr	s14, [r7, #12]
 800471c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004720:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004724:	2201      	movs	r2, #1
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004736:	ee67 6a27 	vmul.f32	s13, s14, s15
 800473a:	ed97 7a05 	vldr	s14, [r7, #20]
 800473e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004746:	ee17 3a90 	vmov	r3, s15
    }
 800474a:	4618      	mov	r0, r3
 800474c:	371c      	adds	r7, #28
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 8004756:	b480      	push	{r7}
 8004758:	b087      	sub	sp, #28
 800475a:	af00      	add	r7, sp, #0
 800475c:	60f8      	str	r0, [r7, #12]
 800475e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004762:	edc7 0a01 	vstr	s1, [r7, #4]
 8004766:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 8004768:	ed97 7a01 	vldr	s14, [r7, #4]
 800476c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004770:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004774:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004786:	edd7 7a05 	vldr	s15, [r7, #20]
 800478a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800478e:	2201      	movs	r2, #1
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	ee07 3a90 	vmov	s15, r3
 800479c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a4:	edd7 7a04 	vldr	s15, [r7, #16]
 80047a8:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 80047ac:	eeb0 0a67 	vmov.f32	s0, s15
 80047b0:	371c      	adds	r7, #28
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af02      	add	r7, sp, #8
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	e021      	b.n	8004810 <ps_warmup+0x54>
		encoder->spi_tx_word = 0x0000;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 80047d2:	2200      	movs	r2, #0
 80047d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047d8:	4811      	ldr	r0, [pc, #68]	; (8004820 <ps_warmup+0x64>)
 80047da:	f002 fea7 	bl	800752c <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	1c9a      	adds	r2, r3, #2
 80047e4:	2364      	movs	r3, #100	; 0x64
 80047e6:	9300      	str	r3, [sp, #0]
 80047e8:	2301      	movs	r3, #1
 80047ea:	480e      	ldr	r0, [pc, #56]	; (8004824 <ps_warmup+0x68>)
 80047ec:	f003 fc80 	bl	80080f0 <HAL_SPI_TransmitReceive>
		while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 80047f0:	bf00      	nop
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <ps_warmup+0x68>)
 80047f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d0f9      	beq.n	80047f2 <ps_warmup+0x36>
		HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 80047fe:	2201      	movs	r2, #1
 8004800:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004804:	4806      	ldr	r0, [pc, #24]	; (8004820 <ps_warmup+0x64>)
 8004806:	f002 fe91 	bl	800752c <HAL_GPIO_WritePin>
	for(int i = 0; i<n; i++){
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	60fb      	str	r3, [r7, #12]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	429a      	cmp	r2, r3
 8004816:	dbd9      	blt.n	80047cc <ps_warmup+0x10>
	}
}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40020000 	.word	0x40020000
 8004824:	20009350 	.word	0x20009350

08004828 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af02      	add	r7, sp, #8
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 800483c:	2313      	movs	r3, #19
 800483e:	61fb      	str	r3, [r7, #28]
 8004840:	e011      	b.n	8004866 <ps_sample+0x3e>
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3b01      	subs	r3, #1
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	3302      	adds	r3, #2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	3304      	adds	r3, #4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	3302      	adds	r3, #2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	440b      	add	r3, r1
 800485c:	3304      	adds	r3, #4
 800485e:	601a      	str	r2, [r3, #0]
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	3b01      	subs	r3, #1
 8004864:	61fb      	str	r3, [r7, #28]
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	2b00      	cmp	r3, #0
 800486a:	dcea      	bgt.n	8004842 <ps_sample+0x1a>
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* SPI read/write */
	encoder->spi_tx_word = ENC_READ_WORD;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	801a      	strh	r2, [r3, #0]
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_RESET ); 	// CS low
 8004872:	2200      	movs	r2, #0
 8004874:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004878:	488a      	ldr	r0, [pc, #552]	; (8004aa4 <ps_sample+0x27c>)
 800487a:	f002 fe57 	bl	800752c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&ENC_SPI, (uint8_t*)encoder->spi_tx_buff, (uint8_t *)encoder->spi_rx_buff, 1, 100);
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	1c9a      	adds	r2, r3, #2
 8004884:	2364      	movs	r3, #100	; 0x64
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2301      	movs	r3, #1
 800488a:	4887      	ldr	r0, [pc, #540]	; (8004aa8 <ps_sample+0x280>)
 800488c:	f003 fc30 	bl	80080f0 <HAL_SPI_TransmitReceive>
	while( ENC_SPI.State == HAL_SPI_STATE_BUSY );  					// wait for transmission complete
 8004890:	bf00      	nop
 8004892:	4b85      	ldr	r3, [pc, #532]	; (8004aa8 <ps_sample+0x280>)
 8004894:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d0f9      	beq.n	8004892 <ps_sample+0x6a>
	HAL_GPIO_WritePin(ENC_CS, GPIO_PIN_SET ); 	// CS high
 800489e:	2201      	movs	r2, #1
 80048a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048a4:	487f      	ldr	r0, [pc, #508]	; (8004aa4 <ps_sample+0x27c>)
 80048a6:	f002 fe41 	bl	800752c <HAL_GPIO_WritePin>
	encoder->raw = encoder ->spi_rx_word;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	885b      	ldrh	r3, [r3, #2]
 80048ae:	461a      	mov	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>9];				// lookup table lower entry
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b8:	125b      	asrs	r3, r3, #9
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	3322      	adds	r3, #34	; 0x22
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	61bb      	str	r3, [r7, #24]
	int off_2 = encoder->offset_lut[((encoder->raw>>9)+1)%128];		// lookup table higher entry
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ca:	125b      	asrs	r3, r3, #9
 80048cc:	3301      	adds	r3, #1
 80048ce:	425a      	negs	r2, r3
 80048d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048d8:	bf58      	it	pl
 80048da:	4253      	negpl	r3, r2
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	3322      	adds	r3, #34	; 0x22
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	4413      	add	r3, r2
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	617b      	str	r3, [r7, #20]
	int off_interp = off_1; + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>9)<<9))>>9);     // Interpolate between lookup table entries
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	613b      	str	r3, [r7, #16]
	encoder->count = encoder->raw + off_interp;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	441a      	add	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	679a      	str	r2, [r3, #120]	; 0x78

	/* Real angles in radians */
	encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80048fc:	4b6b      	ldr	r3, [pc, #428]	; (8004aac <ps_sample+0x284>)
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800490a:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004ab0 <ps_sample+0x288>
 800490e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004912:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004916:	eeb0 0a66 	vmov.f32	s0, s13
 800491a:	f005 fecf 	bl	800a6bc <fmodf>
 800491e:	eeb0 7a40 	vmov.f32	s14, s0
 8004922:	eddf 7a64 	vldr	s15, [pc, #400]	; 8004ab4 <ps_sample+0x28c>
 8004926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	edc3 7a01 	vstr	s15, [r3, #4]
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	edd3 7a01 	vldr	s15, [r3, #4]
 8004936:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800493a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493e:	d507      	bpl.n	8004950 <ps_sample+0x128>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	edd3 7a01 	vldr	s15, [r3, #4]
 8004946:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8004ab4 <ps_sample+0x28c>
 800494a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800494e:	e002      	b.n	8004956 <ps_sample+0x12e>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	edd3 7a01 	vldr	s15, [r3, #4]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	edc3 7a01 	vstr	s15, [r3, #4]
	encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004966:	4b51      	ldr	r3, [pc, #324]	; (8004aac <ps_sample+0x284>)
 8004968:	695b      	ldr	r3, [r3, #20]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	ee07 3a90 	vmov	s15, r3
 8004970:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004978:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004ab0 <ps_sample+0x288>
 800497c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004980:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004984:	eeb0 0a66 	vmov.f32	s0, s13
 8004988:	f005 fe98 	bl	800a6bc <fmodf>
 800498c:	eeb0 7a40 	vmov.f32	s14, s0
 8004990:	eddf 7a48 	vldr	s15, [pc, #288]	; 8004ab4 <ps_sample+0x28c>
 8004994:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80049a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ac:	d507      	bpl.n	80049be <ps_sample+0x196>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80049b4:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8004ab4 <ps_sample+0x28c>
 80049b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049bc:	e002      	b.n	80049c4 <ps_sample+0x19c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c

	/* Rollover */
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	ed93 7a01 	vldr	s14, [r3, #4]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80049d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049da:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){encoder->turns--;}
 80049de:	edd7 7a03 	vldr	s15, [r7, #12]
 80049e2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004ab8 <ps_sample+0x290>
 80049e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ee:	dd07      	ble.n	8004a00 <ps_sample+0x1d8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049f6:	1e5a      	subs	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80049fe:	e00f      	b.n	8004a20 <ps_sample+0x1f8>
	else if(angle_diff < -PI_F){encoder->turns++;}
 8004a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8004a04:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8004abc <ps_sample+0x294>
 8004a08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a10:	d506      	bpl.n	8004a20 <ps_sample+0x1f8>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a18:	1c5a      	adds	r2, r3, #1
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 328c 	ldrb.w	r3, [r3, #652]	; 0x28c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d107      	bne.n	8004a3a <ps_sample+0x212>
		encoder->turns = 0;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
	}

	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a4e:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004ab4 <ps_sample+0x28c>
 8004a52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	edc3 7a03 	vstr	s15, [r3, #12]
			c1 += encoder->angle_multiturn[i]*q*(i - ibar);
		}
		encoder->vel2 = -c1/dt;
*/
	//encoder->velocity = vel2
	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	ed93 7a03 	vldr	s14, [r3, #12]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004a6c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004a70:	edd7 7a00 	vldr	s15, [r7]
 8004a74:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004a78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
}
 8004a9c:	bf00      	nop
 8004a9e:	3720      	adds	r7, #32
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40020000 	.word	0x40020000
 8004aa8:	20009350 	.word	0x20009350
 8004aac:	20008eac 	.word	0x20008eac
 8004ab0:	47800000 	.word	0x47800000
 8004ab4:	40c90fdb 	.word	0x40c90fdb
 8004ab8:	40490fdb 	.word	0x40490fdb
 8004abc:	c0490fdb 	.word	0xc0490fdb

08004ac0 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8004ac0:	b590      	push	{r4, r7, lr}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
	printf("Raw: %d", encoder->raw);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ace:	4619      	mov	r1, r3
 8004ad0:	481b      	ldr	r0, [pc, #108]	; (8004b40 <ps_print+0x80>)
 8004ad2:	f007 fb01 	bl	800c0d8 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ada:	4619      	mov	r1, r3
 8004adc:	4819      	ldr	r0, [pc, #100]	; (8004b44 <ps_print+0x84>)
 8004ade:	f007 fafb 	bl	800c0d8 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fb fd4e 	bl	8000588 <__aeabi_f2d>
 8004aec:	4603      	mov	r3, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	461a      	mov	r2, r3
 8004af2:	4623      	mov	r3, r4
 8004af4:	4814      	ldr	r0, [pc, #80]	; (8004b48 <ps_print+0x88>)
 8004af6:	f007 faef 	bl	800c0d8 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fb fd42 	bl	8000588 <__aeabi_f2d>
 8004b04:	4603      	mov	r3, r0
 8004b06:	460c      	mov	r4, r1
 8004b08:	461a      	mov	r2, r3
 8004b0a:	4623      	mov	r3, r4
 8004b0c:	480f      	ldr	r0, [pc, #60]	; (8004b4c <ps_print+0x8c>)
 8004b0e:	f007 fae3 	bl	800c0d8 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fb fd36 	bl	8000588 <__aeabi_f2d>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	460c      	mov	r4, r1
 8004b20:	461a      	mov	r2, r3
 8004b22:	4623      	mov	r3, r4
 8004b24:	480a      	ldr	r0, [pc, #40]	; (8004b50 <ps_print+0x90>)
 8004b26:	f007 fad7 	bl	800c0d8 <iprintf>
	printf("   Turns:  %d\r\n", encoder->turns);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b30:	4619      	mov	r1, r3
 8004b32:	4808      	ldr	r0, [pc, #32]	; (8004b54 <ps_print+0x94>)
 8004b34:	f007 fad0 	bl	800c0d8 <iprintf>
	//HAL_Delay(dt_ms);
}
 8004b38:	bf00      	nop
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd90      	pop	{r4, r7, pc}
 8004b40:	0800fbf0 	.word	0x0800fbf0
 8004b44:	0800fbf8 	.word	0x0800fbf8
 8004b48:	0800fc10 	.word	0x0800fc10
 8004b4c:	0800fc24 	.word	0x0800fc24
 8004b50:	0800fc38 	.word	0x0800fc38
 8004b54:	0800fc4c 	.word	0x0800fc4c

08004b58 <preference_writer_init>:
    __sector = sector;
    __ready = false;
}
*/

void preference_writer_init(PreferenceWriter * pr, uint32_t sector){
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	6039      	str	r1, [r7, #0]
	flash_writer_init(&pr->fw, sector);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6839      	ldr	r1, [r7, #0]
 8004b66:	4618      	mov	r0, r3
 8004b68:	f7fd fba2 	bl	80022b0 <flash_writer_init>
	pr->sector = sector;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	60da      	str	r2, [r3, #12]
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <preference_writer_open>:


void preference_writer_open(PreferenceWriter * pr) {
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
    flash_writer_open(&pr->fw);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7fd fbb1 	bl	80022ec <flash_writer_open>
    pr->ready = true;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	741a      	strb	r2, [r3, #16]
}
 8004b90:	bf00      	nop
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <preference_writer_ready>:

bool  preference_writer_ready(PreferenceWriter pr) {
 8004b98:	b084      	sub	sp, #16
 8004b9a:	b490      	push	{r4, r7}
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	f107 0408 	add.w	r4, r7, #8
 8004ba2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pr.ready;
 8004ba6:	7e3b      	ldrb	r3, [r7, #24]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc90      	pop	{r4, r7}
 8004bae:	b004      	add	sp, #16
 8004bb0:	4770      	bx	lr
	...

08004bb4 <preference_writer_flush>:

void preference_writer_write_float(float x, int index) {
    __float_reg[index] = x;
}

void preference_writer_flush(PreferenceWriter * pr) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	6078      	str	r0, [r7, #4]
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e00d      	b.n	8004bde <preference_writer_flush+0x2a>
        flash_writer_write_int(pr->fw, offs, __int_reg[offs]);
 8004bc2:	68f9      	ldr	r1, [r7, #12]
 8004bc4:	4a17      	ldr	r2, [pc, #92]	; (8004c24 <preference_writer_flush+0x70>)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8004bd4:	f7fd fba6 	bl	8002324 <flash_writer_write_int>
    for (offs = 0; offs < 256; offs++) {
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2bff      	cmp	r3, #255	; 0xff
 8004be2:	ddee      	ble.n	8004bc2 <preference_writer_flush+0xe>
    }
    for (; offs < 320; offs++) {
 8004be4:	e012      	b.n	8004c0c <preference_writer_flush+0x58>
        flash_writer_write_float(pr->fw, offs, __float_reg[offs - 256]);
 8004be6:	68f9      	ldr	r1, [r7, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004bee:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <preference_writer_flush+0x74>)
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	edd3 7a00 	vldr	s15, [r3]
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8004bfe:	460b      	mov	r3, r1
 8004c00:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c02:	f7fd fba5 	bl	8002350 <flash_writer_write_float>
    for (; offs < 320; offs++) {
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004c12:	dbe8      	blt.n	8004be6 <preference_writer_flush+0x32>
    }
    pr->ready = false;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	741a      	strb	r2, [r3, #16]
}
 8004c1a:	bf00      	nop
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20008eac 	.word	0x20008eac
 8004c28:	20000600 	.word	0x20000600

08004c2c <preference_writer_load>:

void preference_writer_load(PreferenceWriter pr) {
 8004c2c:	b084      	sub	sp, #16
 8004c2e:	b590      	push	{r4, r7, lr}
 8004c30:	b083      	sub	sp, #12
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	f107 0418 	add.w	r4, r7, #24
 8004c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    int offs;
    for (offs = 0; offs < 256; offs++) {
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	607b      	str	r3, [r7, #4]
 8004c40:	e00d      	b.n	8004c5e <preference_writer_load+0x32>
        __int_reg[offs] = flash_read_int(pr.fw, offs);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f107 0218 	add.w	r2, r7, #24
 8004c48:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c4a:	f7fd fba7 	bl	800239c <flash_read_int>
 8004c4e:	4601      	mov	r1, r0
 8004c50:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <preference_writer_load+0x78>)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (offs = 0; offs < 256; offs++) {
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	607b      	str	r3, [r7, #4]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2bff      	cmp	r3, #255	; 0xff
 8004c62:	ddee      	ble.n	8004c42 <preference_writer_load+0x16>
    }
    for(; offs < 320; offs++) {
 8004c64:	e013      	b.n	8004c8e <preference_writer_load+0x62>
        __float_reg[offs - 256] = flash_read_float(pr.fw, offs);
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f5a3 7480 	sub.w	r4, r3, #256	; 0x100
 8004c6e:	4613      	mov	r3, r2
 8004c70:	f107 0218 	add.w	r2, r7, #24
 8004c74:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c76:	f7fd fba7 	bl	80023c8 <flash_read_float>
 8004c7a:	eef0 7a40 	vmov.f32	s15, s0
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <preference_writer_load+0x7c>)
 8004c80:	00a3      	lsls	r3, r4, #2
 8004c82:	4413      	add	r3, r2
 8004c84:	edc3 7a00 	vstr	s15, [r3]
    for(; offs < 320; offs++) {
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	607b      	str	r3, [r7, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8004c94:	dbe7      	blt.n	8004c66 <preference_writer_load+0x3a>
    }
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8004ca0:	b004      	add	sp, #16
 8004ca2:	4770      	bx	lr
 8004ca4:	20008eac 	.word	0x20008eac
 8004ca8:	20000600 	.word	0x20000600

08004cac <preference_writer_close>:

void preference_writer_close(PreferenceWriter *pr) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
    pr->ready = false;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	741a      	strb	r2, [r3, #16]
    flash_writer_close(&pr->fw);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f7fd fb60 	bl	8002382 <flash_writer_close>
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
	...

08004ccc <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8004cd0:	4b18      	ldr	r3, [pc, #96]	; (8004d34 <MX_SPI1_Init+0x68>)
 8004cd2:	4a19      	ldr	r2, [pc, #100]	; (8004d38 <MX_SPI1_Init+0x6c>)
 8004cd4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004cd6:	4b17      	ldr	r3, [pc, #92]	; (8004d34 <MX_SPI1_Init+0x68>)
 8004cd8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004cdc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004cde:	4b15      	ldr	r3, [pc, #84]	; (8004d34 <MX_SPI1_Init+0x68>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004ce4:	4b13      	ldr	r3, [pc, #76]	; (8004d34 <MX_SPI1_Init+0x68>)
 8004ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cec:	4b11      	ldr	r3, [pc, #68]	; (8004d34 <MX_SPI1_Init+0x68>)
 8004cee:	2200      	movs	r2, #0
 8004cf0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004cf2:	4b10      	ldr	r3, [pc, #64]	; (8004d34 <MX_SPI1_Init+0x68>)
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004cf8:	4b0e      	ldr	r3, [pc, #56]	; (8004d34 <MX_SPI1_Init+0x68>)
 8004cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cfe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8004d00:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <MX_SPI1_Init+0x68>)
 8004d02:	2228      	movs	r2, #40	; 0x28
 8004d04:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d06:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <MX_SPI1_Init+0x68>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d0c:	4b09      	ldr	r3, [pc, #36]	; (8004d34 <MX_SPI1_Init+0x68>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d12:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <MX_SPI1_Init+0x68>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004d18:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <MX_SPI1_Init+0x68>)
 8004d1a:	220a      	movs	r2, #10
 8004d1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004d1e:	4805      	ldr	r0, [pc, #20]	; (8004d34 <MX_SPI1_Init+0x68>)
 8004d20:	f003 f982 	bl	8008028 <HAL_SPI_Init>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8004d2a:	f7ff fc1d 	bl	8004568 <Error_Handler>
  }

}
 8004d2e:	bf00      	nop
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	200093a8 	.word	0x200093a8
 8004d38:	40013000 	.word	0x40013000

08004d3c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8004d40:	4b18      	ldr	r3, [pc, #96]	; (8004da4 <MX_SPI3_Init+0x68>)
 8004d42:	4a19      	ldr	r2, [pc, #100]	; (8004da8 <MX_SPI3_Init+0x6c>)
 8004d44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004d46:	4b17      	ldr	r3, [pc, #92]	; (8004da4 <MX_SPI3_Init+0x68>)
 8004d48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004d4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004d4e:	4b15      	ldr	r3, [pc, #84]	; (8004da4 <MX_SPI3_Init+0x68>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8004d54:	4b13      	ldr	r3, [pc, #76]	; (8004da4 <MX_SPI3_Init+0x68>)
 8004d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d5a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004d5c:	4b11      	ldr	r3, [pc, #68]	; (8004da4 <MX_SPI3_Init+0x68>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <MX_SPI3_Init+0x68>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004d68:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <MX_SPI3_Init+0x68>)
 8004d6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d6e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d70:	4b0c      	ldr	r3, [pc, #48]	; (8004da4 <MX_SPI3_Init+0x68>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004d76:	4b0b      	ldr	r3, [pc, #44]	; (8004da4 <MX_SPI3_Init+0x68>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004d7c:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <MX_SPI3_Init+0x68>)
 8004d7e:	2200      	movs	r2, #0
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d82:	4b08      	ldr	r3, [pc, #32]	; (8004da4 <MX_SPI3_Init+0x68>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8004d88:	4b06      	ldr	r3, [pc, #24]	; (8004da4 <MX_SPI3_Init+0x68>)
 8004d8a:	220a      	movs	r2, #10
 8004d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004d8e:	4805      	ldr	r0, [pc, #20]	; (8004da4 <MX_SPI3_Init+0x68>)
 8004d90:	f003 f94a 	bl	8008028 <HAL_SPI_Init>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8004d9a:	f7ff fbe5 	bl	8004568 <Error_Handler>
  }

}
 8004d9e:	bf00      	nop
 8004da0:	bd80      	pop	{r7, pc}
 8004da2:	bf00      	nop
 8004da4:	20009350 	.word	0x20009350
 8004da8:	40003c00 	.word	0x40003c00

08004dac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08c      	sub	sp, #48	; 0x30
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db4:	f107 031c 	add.w	r3, r7, #28
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	609a      	str	r2, [r3, #8]
 8004dc0:	60da      	str	r2, [r3, #12]
 8004dc2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a32      	ldr	r2, [pc, #200]	; (8004e94 <HAL_SPI_MspInit+0xe8>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d12c      	bne.n	8004e28 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	4b31      	ldr	r3, [pc, #196]	; (8004e98 <HAL_SPI_MspInit+0xec>)
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dd6:	4a30      	ldr	r2, [pc, #192]	; (8004e98 <HAL_SPI_MspInit+0xec>)
 8004dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8004dde:	4b2e      	ldr	r3, [pc, #184]	; (8004e98 <HAL_SPI_MspInit+0xec>)
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de6:	61bb      	str	r3, [r7, #24]
 8004de8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	617b      	str	r3, [r7, #20]
 8004dee:	4b2a      	ldr	r3, [pc, #168]	; (8004e98 <HAL_SPI_MspInit+0xec>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	4a29      	ldr	r2, [pc, #164]	; (8004e98 <HAL_SPI_MspInit+0xec>)
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfa:	4b27      	ldr	r3, [pc, #156]	; (8004e98 <HAL_SPI_MspInit+0xec>)
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004e06:	23e0      	movs	r3, #224	; 0xe0
 8004e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e12:	2303      	movs	r3, #3
 8004e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e16:	2305      	movs	r3, #5
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1a:	f107 031c 	add.w	r3, r7, #28
 8004e1e:	4619      	mov	r1, r3
 8004e20:	481e      	ldr	r0, [pc, #120]	; (8004e9c <HAL_SPI_MspInit+0xf0>)
 8004e22:	f002 f9f1 	bl	8007208 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004e26:	e031      	b.n	8004e8c <HAL_SPI_MspInit+0xe0>
  else if(spiHandle->Instance==SPI3)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a1c      	ldr	r2, [pc, #112]	; (8004ea0 <HAL_SPI_MspInit+0xf4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d12c      	bne.n	8004e8c <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	4b18      	ldr	r3, [pc, #96]	; (8004e98 <HAL_SPI_MspInit+0xec>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	4a17      	ldr	r2, [pc, #92]	; (8004e98 <HAL_SPI_MspInit+0xec>)
 8004e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e40:	6413      	str	r3, [r2, #64]	; 0x40
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <HAL_SPI_MspInit+0xec>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	4b11      	ldr	r3, [pc, #68]	; (8004e98 <HAL_SPI_MspInit+0xec>)
 8004e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e56:	4a10      	ldr	r2, [pc, #64]	; (8004e98 <HAL_SPI_MspInit+0xec>)
 8004e58:	f043 0304 	orr.w	r3, r3, #4
 8004e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e5e:	4b0e      	ldr	r3, [pc, #56]	; (8004e98 <HAL_SPI_MspInit+0xec>)
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	60fb      	str	r3, [r7, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004e6a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e70:	2302      	movs	r3, #2
 8004e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e74:	2300      	movs	r3, #0
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004e7c:	2306      	movs	r3, #6
 8004e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e80:	f107 031c 	add.w	r3, r7, #28
 8004e84:	4619      	mov	r1, r3
 8004e86:	4807      	ldr	r0, [pc, #28]	; (8004ea4 <HAL_SPI_MspInit+0xf8>)
 8004e88:	f002 f9be 	bl	8007208 <HAL_GPIO_Init>
}
 8004e8c:	bf00      	nop
 8004e8e:	3730      	adds	r7, #48	; 0x30
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40013000 	.word	0x40013000
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	40020000 	.word	0x40020000
 8004ea0:	40003c00 	.word	0x40003c00
 8004ea4:	40020800 	.word	0x40020800

08004ea8 <FLASH_Unlock>:
  * @brief  Unlocks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Unlock(void)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	af00      	add	r7, sp, #0
  if((FLASH->CR & FLASH_CR_LOCK) != RESET)
 8004eac:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <FLASH_Unlock+0x24>)
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	da05      	bge.n	8004ec0 <FLASH_Unlock+0x18>
  {
    /* Authorize the FLASH Registers access */
    FLASH->KEYR = FLASH_KEY1;
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <FLASH_Unlock+0x24>)
 8004eb6:	4a06      	ldr	r2, [pc, #24]	; (8004ed0 <FLASH_Unlock+0x28>)
 8004eb8:	605a      	str	r2, [r3, #4]
    FLASH->KEYR = FLASH_KEY2;
 8004eba:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <FLASH_Unlock+0x24>)
 8004ebc:	4a05      	ldr	r2, [pc, #20]	; (8004ed4 <FLASH_Unlock+0x2c>)
 8004ebe:	605a      	str	r2, [r3, #4]
  }  
}
 8004ec0:	bf00      	nop
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	40023c00 	.word	0x40023c00
 8004ed0:	45670123 	.word	0x45670123
 8004ed4:	cdef89ab 	.word	0xcdef89ab

08004ed8 <FLASH_Lock>:
  * @brief  Locks the FLASH control register access
  * @param  None
  * @retval None
  */
void FLASH_Lock(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004edc:	4b05      	ldr	r3, [pc, #20]	; (8004ef4 <FLASH_Lock+0x1c>)
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	4a04      	ldr	r2, [pc, #16]	; (8004ef4 <FLASH_Lock+0x1c>)
 8004ee2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ee6:	6113      	str	r3, [r2, #16]
}
 8004ee8:	bf00      	nop
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40023c00 	.word	0x40023c00

08004ef8 <FLASH_EraseSector>:
  *       
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0x0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	60fb      	str	r3, [r7, #12]
  FLASH_Status status = FLASH_COMPLETE2;
 8004f08:	2309      	movs	r3, #9
 8004f0a:	72fb      	strb	r3, [r7, #11]
 
  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(FLASH_Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == VoltageRange_1)
 8004f0c:	78fb      	ldrb	r3, [r7, #3]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d102      	bne.n	8004f18 <FLASH_EraseSector+0x20>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8004f12:	2300      	movs	r3, #0
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	e010      	b.n	8004f3a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_2)
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d103      	bne.n	8004f26 <FLASH_EraseSector+0x2e>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004f1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f22:	60fb      	str	r3, [r7, #12]
 8004f24:	e009      	b.n	8004f3a <FLASH_EraseSector+0x42>
  }
  else if(VoltageRange == VoltageRange_3)
 8004f26:	78fb      	ldrb	r3, [r7, #3]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d103      	bne.n	8004f34 <FLASH_EraseSector+0x3c>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004f2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e002      	b.n	8004f3a <FLASH_EraseSector+0x42>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004f34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f38:	60fb      	str	r3, [r7, #12]
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8004f3a:	f000 f8bf 	bl	80050bc <FLASH_WaitForLastOperation2>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	72fb      	strb	r3, [r7, #11]
  
  if(status == FLASH_COMPLETE2)
 8004f42:	7afb      	ldrb	r3, [r7, #11]
 8004f44:	2b09      	cmp	r3, #9
 8004f46:	d12f      	bne.n	8004fa8 <FLASH_EraseSector+0xb0>
  { 
    /* if the previous operation is completed, proceed to erase the sector */
    FLASH->CR &= CR_PSIZE_MASK;
 8004f48:	4b1a      	ldr	r3, [pc, #104]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	4a19      	ldr	r2, [pc, #100]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f52:	6113      	str	r3, [r2, #16]
    FLASH->CR |= tmp_psize;
 8004f54:	4b17      	ldr	r3, [pc, #92]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	4916      	ldr	r1, [pc, #88]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	610b      	str	r3, [r1, #16]
    FLASH->CR &= SECTOR_MASK;
 8004f60:	4b14      	ldr	r3, [pc, #80]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	4a13      	ldr	r2, [pc, #76]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004f66:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004f6a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
 8004f6c:	4b11      	ldr	r3, [pc, #68]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004f6e:	691a      	ldr	r2, [r3, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	4a0f      	ldr	r2, [pc, #60]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004f76:	f043 0302 	orr.w	r3, r3, #2
 8004f7a:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_STRT;
 8004f7c:	4b0d      	ldr	r3, [pc, #52]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	4a0c      	ldr	r2, [pc, #48]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f86:	6113      	str	r3, [r2, #16]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8004f88:	f000 f898 	bl	80050bc <FLASH_WaitForLastOperation2>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	72fb      	strb	r3, [r7, #11]
    
    /* if the erase operation is completed, disable the SER Bit */
    FLASH->CR &= (~FLASH_CR_SER);
 8004f90:	4b08      	ldr	r3, [pc, #32]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	4a07      	ldr	r2, [pc, #28]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004f96:	f023 0302 	bic.w	r3, r3, #2
 8004f9a:	6113      	str	r3, [r2, #16]
    FLASH->CR &= SECTOR_MASK; 
 8004f9c:	4b05      	ldr	r3, [pc, #20]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	4a04      	ldr	r2, [pc, #16]	; (8004fb4 <FLASH_EraseSector+0xbc>)
 8004fa2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004fa6:	6113      	str	r3, [r2, #16]
  }
  /* Return the Erase Status */
  return status;
 8004fa8:	7afb      	ldrb	r3, [r7, #11]
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40023c00 	.word	0x40023c00

08004fb8 <FLASH_ProgramWord>:
  * @param  Data: specifies the data to be programmed.
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  FLASH_Status status = FLASH_COMPLETE2;
 8004fc2:	2309      	movs	r3, #9
 8004fc4:	73fb      	strb	r3, [r7, #15]
 
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
 
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation2();
 8004fc6:	f000 f879 	bl	80050bc <FLASH_WaitForLastOperation2>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	73fb      	strb	r3, [r7, #15]
  
  if(status == FLASH_COMPLETE2)
 8004fce:	7bfb      	ldrb	r3, [r7, #15]
 8004fd0:	2b09      	cmp	r3, #9
 8004fd2:	d11e      	bne.n	8005012 <FLASH_ProgramWord+0x5a>
  {
    /* if the previous operation is completed, proceed to program the new data */
    FLASH->CR &= CR_PSIZE_MASK;
 8004fd4:	4b11      	ldr	r3, [pc, #68]	; (800501c <FLASH_ProgramWord+0x64>)
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	4a10      	ldr	r2, [pc, #64]	; (800501c <FLASH_ProgramWord+0x64>)
 8004fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fde:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_PSIZE_WORD;
 8004fe0:	4b0e      	ldr	r3, [pc, #56]	; (800501c <FLASH_ProgramWord+0x64>)
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	4a0d      	ldr	r2, [pc, #52]	; (800501c <FLASH_ProgramWord+0x64>)
 8004fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004fea:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_PG;
 8004fec:	4b0b      	ldr	r3, [pc, #44]	; (800501c <FLASH_ProgramWord+0x64>)
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	4a0a      	ldr	r2, [pc, #40]	; (800501c <FLASH_ProgramWord+0x64>)
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	6113      	str	r3, [r2, #16]
  
    *(__IO uint32_t*)Address = Data;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	601a      	str	r2, [r3, #0]
        
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation2();
 8004ffe:	f000 f85d 	bl	80050bc <FLASH_WaitForLastOperation2>
 8005002:	4603      	mov	r3, r0
 8005004:	73fb      	strb	r3, [r7, #15]
 
    /* if the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005006:	4b05      	ldr	r3, [pc, #20]	; (800501c <FLASH_ProgramWord+0x64>)
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	4a04      	ldr	r2, [pc, #16]	; (800501c <FLASH_ProgramWord+0x64>)
 800500c:	f023 0301 	bic.w	r3, r3, #1
 8005010:	6113      	str	r3, [r2, #16]
  } 
  /* Return the Program Status */
  return status;
 8005012:	7bfb      	ldrb	r3, [r7, #15]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40023c00 	.word	0x40023c00

08005020 <FLASH_ClearFlag>:
  *            @arg FLASH_FLAG_PGSERR: FLASH Programming Sequence error flag
  *            @arg FLASH_FLAG_RDERR: FLASH Read Protection error flag (STM32F42xx/43xxx and STM32F401xx/411xE devices)   
  * @retval None
  */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
  
  /* Clear the flags */
  FLASH->SR = FLASH_FLAG;
 8005028:	4a04      	ldr	r2, [pc, #16]	; (800503c <FLASH_ClearFlag+0x1c>)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	60d3      	str	r3, [r2, #12]
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
 800503a:	bf00      	nop
 800503c:	40023c00 	.word	0x40023c00

08005040 <FLASH_GetStatus>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_RD2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_GetStatus(void)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
  FLASH_Status flashstatus = FLASH_COMPLETE2;
 8005046:	2309      	movs	r3, #9
 8005048:	71fb      	strb	r3, [r7, #7]
  
  if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
 800504a:	4b1b      	ldr	r3, [pc, #108]	; (80050b8 <FLASH_GetStatus+0x78>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005056:	d102      	bne.n	800505e <FLASH_GetStatus+0x1e>
  {
    flashstatus = FLASH_BUSY2;
 8005058:	2301      	movs	r3, #1
 800505a:	71fb      	strb	r3, [r7, #7]
 800505c:	e025      	b.n	80050aa <FLASH_GetStatus+0x6a>
  }
  else 
  {  
    if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
 800505e:	4b16      	ldr	r3, [pc, #88]	; (80050b8 <FLASH_GetStatus+0x78>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0310 	and.w	r3, r3, #16
 8005066:	2b00      	cmp	r3, #0
 8005068:	d002      	beq.n	8005070 <FLASH_GetStatus+0x30>
    { 
      flashstatus = FLASH_ERROR_WRP2;
 800506a:	2306      	movs	r3, #6
 800506c:	71fb      	strb	r3, [r7, #7]
 800506e:	e01c      	b.n	80050aa <FLASH_GetStatus+0x6a>
    }
    else
    {
      if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
 8005070:	4b11      	ldr	r3, [pc, #68]	; (80050b8 <FLASH_GetStatus+0x78>)
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005078:	2b00      	cmp	r3, #0
 800507a:	d002      	beq.n	8005082 <FLASH_GetStatus+0x42>
      { 
        flashstatus = FLASH_ERROR_RD2;
 800507c:	2302      	movs	r3, #2
 800507e:	71fb      	strb	r3, [r7, #7]
 8005080:	e013      	b.n	80050aa <FLASH_GetStatus+0x6a>
      } 
      else 
      {
        if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
 8005082:	4b0d      	ldr	r3, [pc, #52]	; (80050b8 <FLASH_GetStatus+0x78>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <FLASH_GetStatus+0x54>
        {
          flashstatus = FLASH_ERROR_PROGRAM2; 
 800508e:	2307      	movs	r3, #7
 8005090:	71fb      	strb	r3, [r7, #7]
 8005092:	e00a      	b.n	80050aa <FLASH_GetStatus+0x6a>
        }
        else
        {
          if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
 8005094:	4b08      	ldr	r3, [pc, #32]	; (80050b8 <FLASH_GetStatus+0x78>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <FLASH_GetStatus+0x66>
          {
            flashstatus = FLASH_ERROR_OPERATION2;
 80050a0:	2308      	movs	r3, #8
 80050a2:	71fb      	strb	r3, [r7, #7]
 80050a4:	e001      	b.n	80050aa <FLASH_GetStatus+0x6a>
          }
          else
          {
            flashstatus = FLASH_COMPLETE2;
 80050a6:	2309      	movs	r3, #9
 80050a8:	71fb      	strb	r3, [r7, #7]
        }
      }
    }
  }
  /* Return the FLASH Status */
  return flashstatus;
 80050aa:	79fb      	ldrb	r3, [r7, #7]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	40023c00 	.word	0x40023c00

080050bc <FLASH_WaitForLastOperation2>:
  * @param  None
  * @retval FLASH Status: The returned value can be: FLASH_BUSY2, FLASH_ERROR_PROGRAM2,
  *                       FLASH_ERROR_WRP2, FLASH_ERROR_OPERATION2 or FLASH_COMPLETE2.
  */
FLASH_Status FLASH_WaitForLastOperation2(void)
{ 
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
  __IO FLASH_Status status = FLASH_COMPLETE2;
 80050c2:	2309      	movs	r3, #9
 80050c4:	71fb      	strb	r3, [r7, #7]
   
  /* Check for the FLASH Status */
  status = FLASH_GetStatus();
 80050c6:	f7ff ffbb 	bl	8005040 <FLASH_GetStatus>
 80050ca:	4603      	mov	r3, r0
 80050cc:	71fb      	strb	r3, [r7, #7]
 
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while(status == FLASH_BUSY2)
 80050ce:	e003      	b.n	80050d8 <FLASH_WaitForLastOperation2+0x1c>
  {
    status = FLASH_GetStatus();
 80050d0:	f7ff ffb6 	bl	8005040 <FLASH_GetStatus>
 80050d4:	4603      	mov	r3, r0
 80050d6:	71fb      	strb	r3, [r7, #7]
  while(status == FLASH_BUSY2)
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d0f7      	beq.n	80050d0 <FLASH_WaitForLastOperation2+0x14>
  }
  /* Return the operation status */
  return status;
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	b2db      	uxtb	r3, r3
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f2:	2300      	movs	r3, #0
 80050f4:	607b      	str	r3, [r7, #4]
 80050f6:	4b10      	ldr	r3, [pc, #64]	; (8005138 <HAL_MspInit+0x4c>)
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	4a0f      	ldr	r2, [pc, #60]	; (8005138 <HAL_MspInit+0x4c>)
 80050fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005100:	6453      	str	r3, [r2, #68]	; 0x44
 8005102:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <HAL_MspInit+0x4c>)
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800510a:	607b      	str	r3, [r7, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800510e:	2300      	movs	r3, #0
 8005110:	603b      	str	r3, [r7, #0]
 8005112:	4b09      	ldr	r3, [pc, #36]	; (8005138 <HAL_MspInit+0x4c>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	4a08      	ldr	r2, [pc, #32]	; (8005138 <HAL_MspInit+0x4c>)
 8005118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511c:	6413      	str	r3, [r2, #64]	; 0x40
 800511e:	4b06      	ldr	r3, [pc, #24]	; (8005138 <HAL_MspInit+0x4c>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800512a:	2007      	movs	r0, #7
 800512c:	f002 f808 	bl	8007140 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40023800 	.word	0x40023800

0800513c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005140:	bf00      	nop
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr

0800514a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800514a:	b480      	push	{r7}
 800514c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800514e:	e7fe      	b.n	800514e <HardFault_Handler+0x4>

08005150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005154:	e7fe      	b.n	8005154 <MemManage_Handler+0x4>

08005156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005156:	b480      	push	{r7}
 8005158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800515a:	e7fe      	b.n	800515a <BusFault_Handler+0x4>

0800515c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005160:	e7fe      	b.n	8005160 <UsageFault_Handler+0x4>

08005162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005162:	b480      	push	{r7}
 8005164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005166:	bf00      	nop
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005174:	bf00      	nop
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800517e:	b480      	push	{r7}
 8005180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005182:	bf00      	nop
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005190:	f000 fc74 	bl	8005a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005194:	bf00      	nop
 8005196:	bd80      	pop	{r7, pc}

08005198 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800519a:	b095      	sub	sp, #84	; 0x54
 800519c:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800519e:	4898      	ldr	r0, [pc, #608]	; (8005400 <CAN1_RX0_IRQHandler+0x268>)
 80051a0:	f001 fccb 	bl	8006b3a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  HAL_CAN_GetRxMessage(&CAN_H, CAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);	// Read CAN
 80051a4:	4b97      	ldr	r3, [pc, #604]	; (8005404 <CAN1_RX0_IRQHandler+0x26c>)
 80051a6:	4a98      	ldr	r2, [pc, #608]	; (8005408 <CAN1_RX0_IRQHandler+0x270>)
 80051a8:	2100      	movs	r1, #0
 80051aa:	4895      	ldr	r0, [pc, #596]	; (8005400 <CAN1_RX0_IRQHandler+0x268>)
 80051ac:	f001 fbb3 	bl	8006916 <HAL_CAN_GetRxMessage>
  uint32_t TxMailbox;
  pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 80051b0:	4b96      	ldr	r3, [pc, #600]	; (800540c <CAN1_RX0_IRQHandler+0x274>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	4b96      	ldr	r3, [pc, #600]	; (8005410 <CAN1_RX0_IRQHandler+0x278>)
 80051b8:	ed93 7a03 	vldr	s14, [r3, #12]
 80051bc:	4b95      	ldr	r3, [pc, #596]	; (8005414 <CAN1_RX0_IRQHandler+0x27c>)
 80051be:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80051c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80051c6:	4b92      	ldr	r3, [pc, #584]	; (8005410 <CAN1_RX0_IRQHandler+0x278>)
 80051c8:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80051cc:	4b91      	ldr	r3, [pc, #580]	; (8005414 <CAN1_RX0_IRQHandler+0x27c>)
 80051ce:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80051d2:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80051d6:	4b90      	ldr	r3, [pc, #576]	; (8005418 <CAN1_RX0_IRQHandler+0x280>)
 80051d8:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80051dc:	4b8d      	ldr	r3, [pc, #564]	; (8005414 <CAN1_RX0_IRQHandler+0x27c>)
 80051de:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80051e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80051e6:	4b8b      	ldr	r3, [pc, #556]	; (8005414 <CAN1_RX0_IRQHandler+0x27c>)
 80051e8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80051ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051f0:	eeb0 1a67 	vmov.f32	s2, s15
 80051f4:	eef0 0a46 	vmov.f32	s1, s12
 80051f8:	eeb0 0a66 	vmov.f32	s0, s13
 80051fc:	4611      	mov	r1, r2
 80051fe:	4887      	ldr	r0, [pc, #540]	; (800541c <CAN1_RX0_IRQHandler+0x284>)
 8005200:	f7fc fd18 	bl	8001c34 <pack_reply>
  HAL_CAN_AddTxMessage(&CAN_H, &can_tx.tx_header, can_tx.data, &TxMailbox);	// Send response
 8005204:	1d3b      	adds	r3, r7, #4
 8005206:	4a86      	ldr	r2, [pc, #536]	; (8005420 <CAN1_RX0_IRQHandler+0x288>)
 8005208:	4986      	ldr	r1, [pc, #536]	; (8005424 <CAN1_RX0_IRQHandler+0x28c>)
 800520a:	487d      	ldr	r0, [pc, #500]	; (8005400 <CAN1_RX0_IRQHandler+0x268>)
 800520c:	f001 faa8 	bl	8006760 <HAL_CAN_AddTxMessage>

  /* Check for special Commands */
  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8005210:	4b85      	ldr	r3, [pc, #532]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005212:	785b      	ldrb	r3, [r3, #1]
 8005214:	2bff      	cmp	r3, #255	; 0xff
 8005216:	bf0c      	ite	eq
 8005218:	2301      	moveq	r3, #1
 800521a:	2300      	movne	r3, #0
 800521c:	b2da      	uxtb	r2, r3
 800521e:	4b82      	ldr	r3, [pc, #520]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005220:	789b      	ldrb	r3, [r3, #2]
 8005222:	2bff      	cmp	r3, #255	; 0xff
 8005224:	bf0c      	ite	eq
 8005226:	2301      	moveq	r3, #1
 8005228:	2300      	movne	r3, #0
 800522a:	b2db      	uxtb	r3, r3
 800522c:	4013      	ands	r3, r2
 800522e:	b2db      	uxtb	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	4b7d      	ldr	r3, [pc, #500]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005234:	78db      	ldrb	r3, [r3, #3]
 8005236:	2bff      	cmp	r3, #255	; 0xff
 8005238:	bf0c      	ite	eq
 800523a:	2301      	moveq	r3, #1
 800523c:	2300      	movne	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	4013      	ands	r3, r2
 8005242:	4a79      	ldr	r2, [pc, #484]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005244:	7912      	ldrb	r2, [r2, #4]
 8005246:	2aff      	cmp	r2, #255	; 0xff
 8005248:	bf0c      	ite	eq
 800524a:	2201      	moveq	r2, #1
 800524c:	2200      	movne	r2, #0
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	4013      	ands	r3, r2
 8005252:	4a75      	ldr	r2, [pc, #468]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005254:	7952      	ldrb	r2, [r2, #5]
 8005256:	2aff      	cmp	r2, #255	; 0xff
 8005258:	bf0c      	ite	eq
 800525a:	2201      	moveq	r2, #1
 800525c:	2200      	movne	r2, #0
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	4013      	ands	r3, r2
 8005262:	4a71      	ldr	r2, [pc, #452]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005264:	7992      	ldrb	r2, [r2, #6]
 8005266:	2aff      	cmp	r2, #255	; 0xff
 8005268:	bf0c      	ite	eq
 800526a:	2201      	moveq	r2, #1
 800526c:	2200      	movne	r2, #0
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	4013      	ands	r3, r2
 8005272:	4a6d      	ldr	r2, [pc, #436]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005274:	79d2      	ldrb	r2, [r2, #7]
 8005276:	2aff      	cmp	r2, #255	; 0xff
 8005278:	bf0c      	ite	eq
 800527a:	2201      	moveq	r2, #1
 800527c:	2200      	movne	r2, #0
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	4013      	ands	r3, r2
 8005282:	4a69      	ldr	r2, [pc, #420]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005284:	7a12      	ldrb	r2, [r2, #8]
 8005286:	2afc      	cmp	r2, #252	; 0xfc
 8005288:	bf0c      	ite	eq
 800528a:	2201      	moveq	r2, #1
 800528c:	2200      	movne	r2, #0
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	4013      	ands	r3, r2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d004      	beq.n	80052a0 <CAN1_RX0_IRQHandler+0x108>
	  update_fsm(&state, MOTOR_CMD);
 8005296:	216d      	movs	r1, #109	; 0x6d
 8005298:	4864      	ldr	r0, [pc, #400]	; (800542c <CAN1_RX0_IRQHandler+0x294>)
 800529a:	f7fe fa2b 	bl	80036f4 <update_fsm>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
	  controller.timeout = 0;					// Reset timeout counter
  }

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800529e:	e0ab      	b.n	80053f8 <CAN1_RX0_IRQHandler+0x260>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 80052a0:	4b61      	ldr	r3, [pc, #388]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	2bff      	cmp	r3, #255	; 0xff
 80052a6:	bf0c      	ite	eq
 80052a8:	2301      	moveq	r3, #1
 80052aa:	2300      	movne	r3, #0
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	4b5e      	ldr	r3, [pc, #376]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 80052b0:	789b      	ldrb	r3, [r3, #2]
 80052b2:	2bff      	cmp	r3, #255	; 0xff
 80052b4:	bf0c      	ite	eq
 80052b6:	2301      	moveq	r3, #1
 80052b8:	2300      	movne	r3, #0
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	4013      	ands	r3, r2
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	461a      	mov	r2, r3
 80052c2:	4b59      	ldr	r3, [pc, #356]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 80052c4:	78db      	ldrb	r3, [r3, #3]
 80052c6:	2bff      	cmp	r3, #255	; 0xff
 80052c8:	bf0c      	ite	eq
 80052ca:	2301      	moveq	r3, #1
 80052cc:	2300      	movne	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	401a      	ands	r2, r3
 80052d2:	4b55      	ldr	r3, [pc, #340]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 80052d4:	791b      	ldrb	r3, [r3, #4]
 80052d6:	2bff      	cmp	r3, #255	; 0xff
 80052d8:	bf0c      	ite	eq
 80052da:	2301      	moveq	r3, #1
 80052dc:	2300      	movne	r3, #0
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	4619      	mov	r1, r3
 80052e2:	4b51      	ldr	r3, [pc, #324]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 80052e4:	795b      	ldrb	r3, [r3, #5]
 80052e6:	2bff      	cmp	r3, #255	; 0xff
 80052e8:	bf0c      	ite	eq
 80052ea:	2301      	moveq	r3, #1
 80052ec:	2300      	movne	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	fb03 f301 	mul.w	r3, r3, r1
 80052f4:	4013      	ands	r3, r2
 80052f6:	4a4c      	ldr	r2, [pc, #304]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 80052f8:	7992      	ldrb	r2, [r2, #6]
 80052fa:	2aff      	cmp	r2, #255	; 0xff
 80052fc:	bf0c      	ite	eq
 80052fe:	2201      	moveq	r2, #1
 8005300:	2200      	movne	r2, #0
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	4013      	ands	r3, r2
 8005306:	4a48      	ldr	r2, [pc, #288]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005308:	79d2      	ldrb	r2, [r2, #7]
 800530a:	2aff      	cmp	r2, #255	; 0xff
 800530c:	bf0c      	ite	eq
 800530e:	2201      	moveq	r2, #1
 8005310:	2200      	movne	r2, #0
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	4013      	ands	r3, r2
 8005316:	4a44      	ldr	r2, [pc, #272]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005318:	7a12      	ldrb	r2, [r2, #8]
 800531a:	2afd      	cmp	r2, #253	; 0xfd
 800531c:	bf0c      	ite	eq
 800531e:	2201      	moveq	r2, #1
 8005320:	2200      	movne	r2, #0
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	4013      	ands	r3, r2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <CAN1_RX0_IRQHandler+0x19c>
      update_fsm(&state, MENU_CMD);
 800532a:	211b      	movs	r1, #27
 800532c:	483f      	ldr	r0, [pc, #252]	; (800542c <CAN1_RX0_IRQHandler+0x294>)
 800532e:	f7fe f9e1 	bl	80036f4 <update_fsm>
}
 8005332:	e061      	b.n	80053f8 <CAN1_RX0_IRQHandler+0x260>
  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8005334:	4b3c      	ldr	r3, [pc, #240]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005336:	785b      	ldrb	r3, [r3, #1]
 8005338:	2bff      	cmp	r3, #255	; 0xff
 800533a:	bf0c      	ite	eq
 800533c:	2301      	moveq	r3, #1
 800533e:	2300      	movne	r3, #0
 8005340:	b2da      	uxtb	r2, r3
 8005342:	4b39      	ldr	r3, [pc, #228]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005344:	789b      	ldrb	r3, [r3, #2]
 8005346:	2bff      	cmp	r3, #255	; 0xff
 8005348:	bf0c      	ite	eq
 800534a:	2301      	moveq	r3, #1
 800534c:	2300      	movne	r3, #0
 800534e:	b2db      	uxtb	r3, r3
 8005350:	4013      	ands	r3, r2
 8005352:	b2db      	uxtb	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	4b34      	ldr	r3, [pc, #208]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005358:	78db      	ldrb	r3, [r3, #3]
 800535a:	2bff      	cmp	r3, #255	; 0xff
 800535c:	bf0c      	ite	eq
 800535e:	2301      	moveq	r3, #1
 8005360:	2300      	movne	r3, #0
 8005362:	b2db      	uxtb	r3, r3
 8005364:	401a      	ands	r2, r3
 8005366:	4b30      	ldr	r3, [pc, #192]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005368:	791b      	ldrb	r3, [r3, #4]
 800536a:	2bff      	cmp	r3, #255	; 0xff
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	4619      	mov	r1, r3
 8005376:	4b2c      	ldr	r3, [pc, #176]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 8005378:	795b      	ldrb	r3, [r3, #5]
 800537a:	2bff      	cmp	r3, #255	; 0xff
 800537c:	bf0c      	ite	eq
 800537e:	2301      	moveq	r3, #1
 8005380:	2300      	movne	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	fb03 f301 	mul.w	r3, r3, r1
 8005388:	4013      	ands	r3, r2
 800538a:	4a27      	ldr	r2, [pc, #156]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 800538c:	7992      	ldrb	r2, [r2, #6]
 800538e:	2aff      	cmp	r2, #255	; 0xff
 8005390:	bf0c      	ite	eq
 8005392:	2201      	moveq	r2, #1
 8005394:	2200      	movne	r2, #0
 8005396:	b2d2      	uxtb	r2, r2
 8005398:	4013      	ands	r3, r2
 800539a:	4a23      	ldr	r2, [pc, #140]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 800539c:	79d2      	ldrb	r2, [r2, #7]
 800539e:	2aff      	cmp	r2, #255	; 0xff
 80053a0:	bf0c      	ite	eq
 80053a2:	2201      	moveq	r2, #1
 80053a4:	2200      	movne	r2, #0
 80053a6:	b2d2      	uxtb	r2, r2
 80053a8:	4013      	ands	r3, r2
 80053aa:	4a1f      	ldr	r2, [pc, #124]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 80053ac:	7a12      	ldrb	r2, [r2, #8]
 80053ae:	2afe      	cmp	r2, #254	; 0xfe
 80053b0:	bf0c      	ite	eq
 80053b2:	2201      	moveq	r2, #1
 80053b4:	2200      	movne	r2, #0
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d004      	beq.n	80053c8 <CAN1_RX0_IRQHandler+0x230>
	  update_fsm(&state, ZERO_CMD);
 80053be:	217a      	movs	r1, #122	; 0x7a
 80053c0:	481a      	ldr	r0, [pc, #104]	; (800542c <CAN1_RX0_IRQHandler+0x294>)
 80053c2:	f7fe f997 	bl	80036f4 <update_fsm>
}
 80053c6:	e017      	b.n	80053f8 <CAN1_RX0_IRQHandler+0x260>
	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 80053c8:	4e17      	ldr	r6, [pc, #92]	; (8005428 <CAN1_RX0_IRQHandler+0x290>)
 80053ca:	4b19      	ldr	r3, [pc, #100]	; (8005430 <CAN1_RX0_IRQHandler+0x298>)
 80053cc:	9310      	str	r3, [sp, #64]	; 0x40
 80053ce:	466d      	mov	r5, sp
 80053d0:	f106 0410 	add.w	r4, r6, #16
 80053d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80053e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80053e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80053ec:	f7fc fc74 	bl	8001cd8 <unpack_cmd>
	  controller.timeout = 0;					// Reset timeout counter
 80053f0:	4b09      	ldr	r3, [pc, #36]	; (8005418 <CAN1_RX0_IRQHandler+0x280>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005400:	20000320 	.word	0x20000320
 8005404:	200092d5 	.word	0x200092d5
 8005408:	200092e0 	.word	0x200092e0
 800540c:	20008eac 	.word	0x20008eac
 8005410:	20000348 	.word	0x20000348
 8005414:	20000600 	.word	0x20000600
 8005418:	20000700 	.word	0x20000700
 800541c:	200092ac 	.word	0x200092ac
 8005420:	200092ad 	.word	0x200092ad
 8005424:	200092b4 	.word	0x200092b4
 8005428:	200092d4 	.word	0x200092d4
 800542c:	200005dc 	.word	0x200005dc
 8005430:	200007c4 	.word	0x200007c4

08005434 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	/* Sample ADCs */
	analog_sample(&controller);
 8005438:	480b      	ldr	r0, [pc, #44]	; (8005468 <TIM1_UP_TIM10_IRQHandler+0x34>)
 800543a:	f7fd f907 	bl	800264c <analog_sample>

	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 800543e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800546c <TIM1_UP_TIM10_IRQHandler+0x38>
 8005442:	480b      	ldr	r0, [pc, #44]	; (8005470 <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8005444:	f7ff f9f0 	bl	8004828 <ps_sample>

	/* Run Finite State Machine */
	run_fsm(&state);
 8005448:	480a      	ldr	r0, [pc, #40]	; (8005474 <TIM1_UP_TIM10_IRQHandler+0x40>)
 800544a:	f7fd ff8f 	bl	800336c <run_fsm>

	/* increment loop count */
	controller.loop_count++;
 800544e:	4b06      	ldr	r3, [pc, #24]	; (8005468 <TIM1_UP_TIM10_IRQHandler+0x34>)
 8005450:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005454:	3301      	adds	r3, #1
 8005456:	4a04      	ldr	r2, [pc, #16]	; (8005468 <TIM1_UP_TIM10_IRQHandler+0x34>)
 8005458:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800545c:	4806      	ldr	r0, [pc, #24]	; (8005478 <TIM1_UP_TIM10_IRQHandler+0x44>)
 800545e:	f003 f957 	bl	8008710 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005462:	bf00      	nop
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000700 	.word	0x20000700
 800546c:	37d1b717 	.word	0x37d1b717
 8005470:	20000348 	.word	0x20000348
 8005474:	200005dc 	.word	0x200005dc
 8005478:	20009400 	.word	0x20009400

0800547c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	HAL_UART_IRQHandler(&huart2);
 8005482:	4809      	ldr	r0, [pc, #36]	; (80054a8 <USART2_IRQHandler+0x2c>)
 8005484:	f004 f92a 	bl	80096dc <HAL_UART_IRQHandler>

	char c = Serial2RxBuffer[0];
 8005488:	4b08      	ldr	r3, [pc, #32]	; (80054ac <USART2_IRQHandler+0x30>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	71fb      	strb	r3, [r7, #7]
	update_fsm(&state, c);
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	4619      	mov	r1, r3
 8005492:	4807      	ldr	r0, [pc, #28]	; (80054b0 <USART2_IRQHandler+0x34>)
 8005494:	f7fe f92e 	bl	80036f4 <update_fsm>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005498:	4803      	ldr	r0, [pc, #12]	; (80054a8 <USART2_IRQHandler+0x2c>)
 800549a:	f004 f91f 	bl	80096dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20009440 	.word	0x20009440
 80054ac:	200005d8 	.word	0x200005d8
 80054b0:	200005dc 	.word	0x200005dc

080054b4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	e00a      	b.n	80054dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80054c6:	f3af 8000 	nop.w
 80054ca:	4601      	mov	r1, r0
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	60ba      	str	r2, [r7, #8]
 80054d2:	b2ca      	uxtb	r2, r1
 80054d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	3301      	adds	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	dbf0      	blt.n	80054c6 <_read+0x12>
	}

return len;
 80054e4:	687b      	ldr	r3, [r7, #4]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b086      	sub	sp, #24
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	60f8      	str	r0, [r7, #12]
 80054f6:	60b9      	str	r1, [r7, #8]
 80054f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054fa:	2300      	movs	r3, #0
 80054fc:	617b      	str	r3, [r7, #20]
 80054fe:	e009      	b.n	8005514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	1c5a      	adds	r2, r3, #1
 8005504:	60ba      	str	r2, [r7, #8]
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fa17 	bl	800593c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	3301      	adds	r3, #1
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	429a      	cmp	r2, r3
 800551a:	dbf1      	blt.n	8005500 <_write+0x12>
	}
	return len;
 800551c:	687b      	ldr	r3, [r7, #4]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3718      	adds	r7, #24
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <_close>:

int _close(int file)
{
 8005526:	b480      	push	{r7}
 8005528:	b083      	sub	sp, #12
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
	return -1;
 800552e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr

0800553e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800554e:	605a      	str	r2, [r3, #4]
	return 0;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <_isatty>:

int _isatty(int file)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
	return 1;
 8005566:	2301      	movs	r3, #1
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
	return 0;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005598:	4b11      	ldr	r3, [pc, #68]	; (80055e0 <_sbrk+0x50>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d102      	bne.n	80055a6 <_sbrk+0x16>
		heap_end = &end;
 80055a0:	4b0f      	ldr	r3, [pc, #60]	; (80055e0 <_sbrk+0x50>)
 80055a2:	4a10      	ldr	r2, [pc, #64]	; (80055e4 <_sbrk+0x54>)
 80055a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80055a6:	4b0e      	ldr	r3, [pc, #56]	; (80055e0 <_sbrk+0x50>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80055ac:	4b0c      	ldr	r3, [pc, #48]	; (80055e0 <_sbrk+0x50>)
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4413      	add	r3, r2
 80055b4:	466a      	mov	r2, sp
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d907      	bls.n	80055ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80055ba:	f006 f8f3 	bl	800b7a4 <__errno>
 80055be:	4602      	mov	r2, r0
 80055c0:	230c      	movs	r3, #12
 80055c2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80055c4:	f04f 33ff 	mov.w	r3, #4294967295
 80055c8:	e006      	b.n	80055d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80055ca:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <_sbrk+0x50>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4413      	add	r3, r2
 80055d2:	4a03      	ldr	r2, [pc, #12]	; (80055e0 <_sbrk+0x50>)
 80055d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80055d6:	68fb      	ldr	r3, [r7, #12]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	2000023c 	.word	0x2000023c
 80055e4:	20009488 	.word	0x20009488

080055e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055ec:	4b08      	ldr	r3, [pc, #32]	; (8005610 <SystemInit+0x28>)
 80055ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055f2:	4a07      	ldr	r2, [pc, #28]	; (8005610 <SystemInit+0x28>)
 80055f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80055fc:	4b04      	ldr	r3, [pc, #16]	; (8005610 <SystemInit+0x28>)
 80055fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005602:	609a      	str	r2, [r3, #8]
#endif
}
 8005604:	bf00      	nop
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	e000ed00 	.word	0xe000ed00

08005614 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b096      	sub	sp, #88	; 0x58
 8005618:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800561a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	605a      	str	r2, [r3, #4]
 8005624:	609a      	str	r2, [r3, #8]
 8005626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005628:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800562c:	2200      	movs	r2, #0
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
 800563a:	605a      	str	r2, [r3, #4]
 800563c:	609a      	str	r2, [r3, #8]
 800563e:	60da      	str	r2, [r3, #12]
 8005640:	611a      	str	r2, [r3, #16]
 8005642:	615a      	str	r2, [r3, #20]
 8005644:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005646:	1d3b      	adds	r3, r7, #4
 8005648:	2220      	movs	r2, #32
 800564a:	2100      	movs	r1, #0
 800564c:	4618      	mov	r0, r3
 800564e:	f006 f8de 	bl	800b80e <memset>

  htim1.Instance = TIM1;
 8005652:	4b4a      	ldr	r3, [pc, #296]	; (800577c <MX_TIM1_Init+0x168>)
 8005654:	4a4a      	ldr	r2, [pc, #296]	; (8005780 <MX_TIM1_Init+0x16c>)
 8005656:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005658:	4b48      	ldr	r3, [pc, #288]	; (800577c <MX_TIM1_Init+0x168>)
 800565a:	2200      	movs	r2, #0
 800565c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800565e:	4b47      	ldr	r3, [pc, #284]	; (800577c <MX_TIM1_Init+0x168>)
 8005660:	2220      	movs	r2, #32
 8005662:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0x8CA;
 8005664:	4b45      	ldr	r3, [pc, #276]	; (800577c <MX_TIM1_Init+0x168>)
 8005666:	f640 02ca 	movw	r2, #2250	; 0x8ca
 800566a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800566c:	4b43      	ldr	r3, [pc, #268]	; (800577c <MX_TIM1_Init+0x168>)
 800566e:	2200      	movs	r2, #0
 8005670:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8005672:	4b42      	ldr	r3, [pc, #264]	; (800577c <MX_TIM1_Init+0x168>)
 8005674:	2201      	movs	r2, #1
 8005676:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005678:	4b40      	ldr	r3, [pc, #256]	; (800577c <MX_TIM1_Init+0x168>)
 800567a:	2280      	movs	r2, #128	; 0x80
 800567c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800567e:	483f      	ldr	r0, [pc, #252]	; (800577c <MX_TIM1_Init+0x168>)
 8005680:	f002 ff84 	bl	800858c <HAL_TIM_Base_Init>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800568a:	f7fe ff6d 	bl	8004568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800568e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005692:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005694:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005698:	4619      	mov	r1, r3
 800569a:	4838      	ldr	r0, [pc, #224]	; (800577c <MX_TIM1_Init+0x168>)
 800569c:	f003 fa06 	bl	8008aac <HAL_TIM_ConfigClockSource>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80056a6:	f7fe ff5f 	bl	8004568 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80056aa:	4834      	ldr	r0, [pc, #208]	; (800577c <MX_TIM1_Init+0x168>)
 80056ac:	f002 ffbd 	bl	800862a <HAL_TIM_PWM_Init>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80056b6:	f7fe ff57 	bl	8004568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056ba:	2300      	movs	r3, #0
 80056bc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056be:	2300      	movs	r3, #0
 80056c0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80056c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80056c6:	4619      	mov	r1, r3
 80056c8:	482c      	ldr	r0, [pc, #176]	; (800577c <MX_TIM1_Init+0x168>)
 80056ca:	f003 fde9 	bl	80092a0 <HAL_TIMEx_MasterConfigSynchronization>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d001      	beq.n	80056d8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80056d4:	f7fe ff48 	bl	8004568 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80056d8:	2360      	movs	r3, #96	; 0x60
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056e0:	2300      	movs	r3, #0
 80056e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80056e4:	2300      	movs	r3, #0
 80056e6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80056e8:	2304      	movs	r3, #4
 80056ea:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80056ec:	2300      	movs	r3, #0
 80056ee:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056f0:	2300      	movs	r3, #0
 80056f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80056f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056f8:	2200      	movs	r2, #0
 80056fa:	4619      	mov	r1, r3
 80056fc:	481f      	ldr	r0, [pc, #124]	; (800577c <MX_TIM1_Init+0x168>)
 80056fe:	f003 f90f 	bl	8008920 <HAL_TIM_PWM_ConfigChannel>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d001      	beq.n	800570c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8005708:	f7fe ff2e 	bl	8004568 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800570c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005710:	2204      	movs	r2, #4
 8005712:	4619      	mov	r1, r3
 8005714:	4819      	ldr	r0, [pc, #100]	; (800577c <MX_TIM1_Init+0x168>)
 8005716:	f003 f903 	bl	8008920 <HAL_TIM_PWM_ConfigChannel>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8005720:	f7fe ff22 	bl	8004568 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005728:	2208      	movs	r2, #8
 800572a:	4619      	mov	r1, r3
 800572c:	4813      	ldr	r0, [pc, #76]	; (800577c <MX_TIM1_Init+0x168>)
 800572e:	f003 f8f7 	bl	8008920 <HAL_TIM_PWM_ConfigChannel>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8005738:	f7fe ff16 	bl	8004568 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800573c:	2300      	movs	r3, #0
 800573e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005740:	2300      	movs	r3, #0
 8005742:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005748:	2300      	movs	r3, #0
 800574a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800574c:	2300      	movs	r3, #0
 800574e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005750:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005754:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005756:	2300      	movs	r3, #0
 8005758:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800575a:	1d3b      	adds	r3, r7, #4
 800575c:	4619      	mov	r1, r3
 800575e:	4807      	ldr	r0, [pc, #28]	; (800577c <MX_TIM1_Init+0x168>)
 8005760:	f003 fe1a 	bl	8009398 <HAL_TIMEx_ConfigBreakDeadTime>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800576a:	f7fe fefd 	bl	8004568 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800576e:	4803      	ldr	r0, [pc, #12]	; (800577c <MX_TIM1_Init+0x168>)
 8005770:	f000 f830 	bl	80057d4 <HAL_TIM_MspPostInit>

}
 8005774:	bf00      	nop
 8005776:	3758      	adds	r7, #88	; 0x58
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	20009400 	.word	0x20009400
 8005780:	40010000 	.word	0x40010000

08005784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a0e      	ldr	r2, [pc, #56]	; (80057cc <HAL_TIM_Base_MspInit+0x48>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d115      	bne.n	80057c2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	4b0d      	ldr	r3, [pc, #52]	; (80057d0 <HAL_TIM_Base_MspInit+0x4c>)
 800579c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800579e:	4a0c      	ldr	r2, [pc, #48]	; (80057d0 <HAL_TIM_Base_MspInit+0x4c>)
 80057a0:	f043 0301 	orr.w	r3, r3, #1
 80057a4:	6453      	str	r3, [r2, #68]	; 0x44
 80057a6:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <HAL_TIM_Base_MspInit+0x4c>)
 80057a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80057b2:	2200      	movs	r2, #0
 80057b4:	2100      	movs	r1, #0
 80057b6:	2019      	movs	r0, #25
 80057b8:	f001 fccd 	bl	8007156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80057bc:	2019      	movs	r0, #25
 80057be:	f001 fce6 	bl	800718e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80057c2:	bf00      	nop
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	40010000 	.word	0x40010000
 80057d0:	40023800 	.word	0x40023800

080057d4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057dc:	f107 030c 	add.w	r3, r7, #12
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	605a      	str	r2, [r3, #4]
 80057e6:	609a      	str	r2, [r3, #8]
 80057e8:	60da      	str	r2, [r3, #12]
 80057ea:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a12      	ldr	r2, [pc, #72]	; (800583c <HAL_TIM_MspPostInit+0x68>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d11e      	bne.n	8005834 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057f6:	2300      	movs	r3, #0
 80057f8:	60bb      	str	r3, [r7, #8]
 80057fa:	4b11      	ldr	r3, [pc, #68]	; (8005840 <HAL_TIM_MspPostInit+0x6c>)
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	4a10      	ldr	r2, [pc, #64]	; (8005840 <HAL_TIM_MspPostInit+0x6c>)
 8005800:	f043 0301 	orr.w	r3, r3, #1
 8005804:	6313      	str	r3, [r2, #48]	; 0x30
 8005806:	4b0e      	ldr	r3, [pc, #56]	; (8005840 <HAL_TIM_MspPostInit+0x6c>)
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	60bb      	str	r3, [r7, #8]
 8005810:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8005812:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8005816:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005818:	2302      	movs	r3, #2
 800581a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800581c:	2300      	movs	r3, #0
 800581e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005820:	2303      	movs	r3, #3
 8005822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005824:	2301      	movs	r3, #1
 8005826:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005828:	f107 030c 	add.w	r3, r7, #12
 800582c:	4619      	mov	r1, r3
 800582e:	4805      	ldr	r0, [pc, #20]	; (8005844 <HAL_TIM_MspPostInit+0x70>)
 8005830:	f001 fcea 	bl	8007208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005834:	bf00      	nop
 8005836:	3720      	adds	r7, #32
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40010000 	.word	0x40010000
 8005840:	40023800 	.word	0x40023800
 8005844:	40020000 	.word	0x40020000

08005848 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800584c:	4b11      	ldr	r3, [pc, #68]	; (8005894 <MX_USART2_UART_Init+0x4c>)
 800584e:	4a12      	ldr	r2, [pc, #72]	; (8005898 <MX_USART2_UART_Init+0x50>)
 8005850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005852:	4b10      	ldr	r3, [pc, #64]	; (8005894 <MX_USART2_UART_Init+0x4c>)
 8005854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800585a:	4b0e      	ldr	r3, [pc, #56]	; (8005894 <MX_USART2_UART_Init+0x4c>)
 800585c:	2200      	movs	r2, #0
 800585e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005860:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <MX_USART2_UART_Init+0x4c>)
 8005862:	2200      	movs	r2, #0
 8005864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005866:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <MX_USART2_UART_Init+0x4c>)
 8005868:	2200      	movs	r2, #0
 800586a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800586c:	4b09      	ldr	r3, [pc, #36]	; (8005894 <MX_USART2_UART_Init+0x4c>)
 800586e:	220c      	movs	r2, #12
 8005870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005872:	4b08      	ldr	r3, [pc, #32]	; (8005894 <MX_USART2_UART_Init+0x4c>)
 8005874:	2200      	movs	r2, #0
 8005876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005878:	4b06      	ldr	r3, [pc, #24]	; (8005894 <MX_USART2_UART_Init+0x4c>)
 800587a:	2200      	movs	r2, #0
 800587c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800587e:	4805      	ldr	r0, [pc, #20]	; (8005894 <MX_USART2_UART_Init+0x4c>)
 8005880:	f003 fdf0 	bl	8009464 <HAL_UART_Init>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800588a:	f7fe fe6d 	bl	8004568 <Error_Handler>
  }

}
 800588e:	bf00      	nop
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20009440 	.word	0x20009440
 8005898:	40004400 	.word	0x40004400

0800589c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b08a      	sub	sp, #40	; 0x28
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058a4:	f107 0314 	add.w	r3, r7, #20
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	605a      	str	r2, [r3, #4]
 80058ae:	609a      	str	r2, [r3, #8]
 80058b0:	60da      	str	r2, [r3, #12]
 80058b2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a1d      	ldr	r2, [pc, #116]	; (8005930 <HAL_UART_MspInit+0x94>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d133      	bne.n	8005926 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80058be:	2300      	movs	r3, #0
 80058c0:	613b      	str	r3, [r7, #16]
 80058c2:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <HAL_UART_MspInit+0x98>)
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	4a1b      	ldr	r2, [pc, #108]	; (8005934 <HAL_UART_MspInit+0x98>)
 80058c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058cc:	6413      	str	r3, [r2, #64]	; 0x40
 80058ce:	4b19      	ldr	r3, [pc, #100]	; (8005934 <HAL_UART_MspInit+0x98>)
 80058d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d6:	613b      	str	r3, [r7, #16]
 80058d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058da:	2300      	movs	r3, #0
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	4b15      	ldr	r3, [pc, #84]	; (8005934 <HAL_UART_MspInit+0x98>)
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	4a14      	ldr	r2, [pc, #80]	; (8005934 <HAL_UART_MspInit+0x98>)
 80058e4:	f043 0301 	orr.w	r3, r3, #1
 80058e8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ea:	4b12      	ldr	r3, [pc, #72]	; (8005934 <HAL_UART_MspInit+0x98>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80058f6:	230c      	movs	r3, #12
 80058f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058fa:	2302      	movs	r3, #2
 80058fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005902:	2303      	movs	r3, #3
 8005904:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005906:	2307      	movs	r3, #7
 8005908:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800590a:	f107 0314 	add.w	r3, r7, #20
 800590e:	4619      	mov	r1, r3
 8005910:	4809      	ldr	r0, [pc, #36]	; (8005938 <HAL_UART_MspInit+0x9c>)
 8005912:	f001 fc79 	bl	8007208 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005916:	2200      	movs	r2, #0
 8005918:	2100      	movs	r1, #0
 800591a:	2026      	movs	r0, #38	; 0x26
 800591c:	f001 fc1b 	bl	8007156 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005920:	2026      	movs	r0, #38	; 0x26
 8005922:	f001 fc34 	bl	800718e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005926:	bf00      	nop
 8005928:	3728      	adds	r7, #40	; 0x28
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	40004400 	.word	0x40004400
 8005934:	40023800 	.word	0x40023800
 8005938:	40020000 	.word	0x40020000

0800593c <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
} 

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8005944:	1d39      	adds	r1, r7, #4
 8005946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800594a:	2201      	movs	r2, #1
 800594c:	4803      	ldr	r0, [pc, #12]	; (800595c <__io_putchar+0x20>)
 800594e:	f003 fdd6 	bl	80094fe <HAL_UART_Transmit>
return 0;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}
 800595c:	20009440 	.word	0x20009440

08005960 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8005968:	2201      	movs	r2, #1
 800596a:	4904      	ldr	r1, [pc, #16]	; (800597c <HAL_UART_RxCpltCallback+0x1c>)
 800596c:	4804      	ldr	r0, [pc, #16]	; (8005980 <HAL_UART_RxCpltCallback+0x20>)
 800596e:	f003 fe5f 	bl	8009630 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005972:	bf00      	nop
 8005974:	3708      	adds	r7, #8
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	200005d8 	.word	0x200005d8
 8005980:	20009440 	.word	0x20009440

08005984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80059bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005988:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800598a:	e003      	b.n	8005994 <LoopCopyDataInit>

0800598c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800598c:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800598e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005990:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005992:	3104      	adds	r1, #4

08005994 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005994:	480b      	ldr	r0, [pc, #44]	; (80059c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005996:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005998:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800599a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800599c:	d3f6      	bcc.n	800598c <CopyDataInit>
  ldr  r2, =_sbss
 800599e:	4a0b      	ldr	r2, [pc, #44]	; (80059cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80059a0:	e002      	b.n	80059a8 <LoopFillZerobss>

080059a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80059a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80059a4:	f842 3b04 	str.w	r3, [r2], #4

080059a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80059a8:	4b09      	ldr	r3, [pc, #36]	; (80059d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80059aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80059ac:	d3f9      	bcc.n	80059a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80059ae:	f7ff fe1b 	bl	80055e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80059b2:	f005 fefd 	bl	800b7b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80059b6:	f7fe fb07 	bl	8003fc8 <main>
  bx  lr    
 80059ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80059bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80059c0:	080103c0 	.word	0x080103c0
  ldr  r0, =_sdata
 80059c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80059c8:	2000021c 	.word	0x2000021c
  ldr  r2, =_sbss
 80059cc:	20000220 	.word	0x20000220
  ldr  r3, = _ebss
 80059d0:	20009488 	.word	0x20009488

080059d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80059d4:	e7fe      	b.n	80059d4 <ADC_IRQHandler>
	...

080059d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80059dc:	4b0e      	ldr	r3, [pc, #56]	; (8005a18 <HAL_Init+0x40>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0d      	ldr	r2, [pc, #52]	; (8005a18 <HAL_Init+0x40>)
 80059e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80059e8:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <HAL_Init+0x40>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a0a      	ldr	r2, [pc, #40]	; (8005a18 <HAL_Init+0x40>)
 80059ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059f4:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <HAL_Init+0x40>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a07      	ldr	r2, [pc, #28]	; (8005a18 <HAL_Init+0x40>)
 80059fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005a00:	2003      	movs	r0, #3
 8005a02:	f001 fb9d 	bl	8007140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005a06:	2000      	movs	r0, #0
 8005a08:	f000 f808 	bl	8005a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a0c:	f7ff fb6e 	bl	80050ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a10:	2300      	movs	r3, #0
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	40023c00 	.word	0x40023c00

08005a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a24:	4b12      	ldr	r3, [pc, #72]	; (8005a70 <HAL_InitTick+0x54>)
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	4b12      	ldr	r3, [pc, #72]	; (8005a74 <HAL_InitTick+0x58>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f001 fbb5 	bl	80071aa <HAL_SYSTICK_Config>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e00e      	b.n	8005a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b0f      	cmp	r3, #15
 8005a4e:	d80a      	bhi.n	8005a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a50:	2200      	movs	r2, #0
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	f001 fb7d 	bl	8007156 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005a5c:	4a06      	ldr	r2, [pc, #24]	; (8005a78 <HAL_InitTick+0x5c>)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	e000      	b.n	8005a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000040 	.word	0x20000040
 8005a74:	20000048 	.word	0x20000048
 8005a78:	20000044 	.word	0x20000044

08005a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005a80:	4b06      	ldr	r3, [pc, #24]	; (8005a9c <HAL_IncTick+0x20>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	4b06      	ldr	r3, [pc, #24]	; (8005aa0 <HAL_IncTick+0x24>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	4a04      	ldr	r2, [pc, #16]	; (8005aa0 <HAL_IncTick+0x24>)
 8005a8e:	6013      	str	r3, [r2, #0]
}
 8005a90:	bf00      	nop
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	20000048 	.word	0x20000048
 8005aa0:	20009480 	.word	0x20009480

08005aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8005aa8:	4b03      	ldr	r3, [pc, #12]	; (8005ab8 <HAL_GetTick+0x14>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20009480 	.word	0x20009480

08005abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005ac4:	f7ff ffee 	bl	8005aa4 <HAL_GetTick>
 8005ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad4:	d005      	beq.n	8005ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ad6:	4b09      	ldr	r3, [pc, #36]	; (8005afc <HAL_Delay+0x40>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	461a      	mov	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	4413      	add	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005ae2:	bf00      	nop
 8005ae4:	f7ff ffde 	bl	8005aa4 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d8f7      	bhi.n	8005ae4 <HAL_Delay+0x28>
  {
  }
}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000048 	.word	0x20000048

08005b00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e033      	b.n	8005b7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d109      	bne.n	8005b32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fb fb50 	bl	80011c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d118      	bne.n	8005b70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005b46:	f023 0302 	bic.w	r3, r3, #2
 8005b4a:	f043 0202 	orr.w	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 faa2 	bl	800609c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	f043 0201 	orr.w	r2, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	641a      	str	r2, [r3, #64]	; 0x40
 8005b6e:	e001      	b.n	8005b74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <HAL_ADC_Start+0x1a>
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	e0a5      	b.n	8005cee <HAL_ADC_Start+0x166>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d018      	beq.n	8005bea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	689a      	ldr	r2, [r3, #8]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005bc8:	4b4c      	ldr	r3, [pc, #304]	; (8005cfc <HAL_ADC_Start+0x174>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a4c      	ldr	r2, [pc, #304]	; (8005d00 <HAL_ADC_Start+0x178>)
 8005bce:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd2:	0c9a      	lsrs	r2, r3, #18
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	4413      	add	r3, r2
 8005bda:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005bdc:	e002      	b.n	8005be4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	3b01      	subs	r3, #1
 8005be2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1f9      	bne.n	8005bde <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d179      	bne.n	8005cec <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bfc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d007      	beq.n	8005c2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005c22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c36:	d106      	bne.n	8005c46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3c:	f023 0206 	bic.w	r2, r3, #6
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	645a      	str	r2, [r3, #68]	; 0x44
 8005c44:	e002      	b.n	8005c4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c54:	4b2b      	ldr	r3, [pc, #172]	; (8005d04 <HAL_ADC_Start+0x17c>)
 8005c56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005c60:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d12a      	bne.n	8005cc4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a25      	ldr	r2, [pc, #148]	; (8005d08 <HAL_ADC_Start+0x180>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d015      	beq.n	8005ca4 <HAL_ADC_Start+0x11c>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a23      	ldr	r2, [pc, #140]	; (8005d0c <HAL_ADC_Start+0x184>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d105      	bne.n	8005c8e <HAL_ADC_Start+0x106>
 8005c82:	4b20      	ldr	r3, [pc, #128]	; (8005d04 <HAL_ADC_Start+0x17c>)
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	f003 031f 	and.w	r3, r3, #31
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00a      	beq.n	8005ca4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a1f      	ldr	r2, [pc, #124]	; (8005d10 <HAL_ADC_Start+0x188>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d129      	bne.n	8005cec <HAL_ADC_Start+0x164>
 8005c98:	4b1a      	ldr	r3, [pc, #104]	; (8005d04 <HAL_ADC_Start+0x17c>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f003 031f 	and.w	r3, r3, #31
 8005ca0:	2b0f      	cmp	r3, #15
 8005ca2:	d823      	bhi.n	8005cec <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d11c      	bne.n	8005cec <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005cc0:	609a      	str	r2, [r3, #8]
 8005cc2:	e013      	b.n	8005cec <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a0f      	ldr	r2, [pc, #60]	; (8005d08 <HAL_ADC_Start+0x180>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d10e      	bne.n	8005cec <HAL_ADC_Start+0x164>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d107      	bne.n	8005cec <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689a      	ldr	r2, [r3, #8]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005cea:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000040 	.word	0x20000040
 8005d00:	431bde83 	.word	0x431bde83
 8005d04:	40012300 	.word	0x40012300
 8005d08:	40012000 	.word	0x40012000
 8005d0c:	40012100 	.word	0x40012100
 8005d10:	40012200 	.word	0x40012200

08005d14 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b084      	sub	sp, #16
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
 8005d1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d30:	d113      	bne.n	8005d5a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005d3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d40:	d10b      	bne.n	8005d5a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d46:	f043 0220 	orr.w	r2, r3, #32
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	e05c      	b.n	8005e14 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005d5a:	f7ff fea3 	bl	8005aa4 <HAL_GetTick>
 8005d5e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d60:	e01a      	b.n	8005d98 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d68:	d016      	beq.n	8005d98 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d007      	beq.n	8005d80 <HAL_ADC_PollForConversion+0x6c>
 8005d70:	f7ff fe98 	bl	8005aa4 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	683a      	ldr	r2, [r7, #0]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d20b      	bcs.n	8005d98 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	f043 0204 	orr.w	r2, r3, #4
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e03d      	b.n	8005e14 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d1dd      	bne.n	8005d62 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f06f 0212 	mvn.w	r2, #18
 8005dae:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d123      	bne.n	8005e12 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d11f      	bne.n	8005e12 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d111      	bne.n	8005e12 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d105      	bne.n	8005e12 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f043 0201 	orr.w	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
	...

08005e38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_ADC_ConfigChannel+0x1c>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e113      	b.n	800607c <HAL_ADC_ConfigChannel+0x244>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b09      	cmp	r3, #9
 8005e62:	d925      	bls.n	8005eb0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68d9      	ldr	r1, [r3, #12]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	461a      	mov	r2, r3
 8005e72:	4613      	mov	r3, r2
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	4413      	add	r3, r2
 8005e78:	3b1e      	subs	r3, #30
 8005e7a:	2207      	movs	r2, #7
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	43da      	mvns	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	400a      	ands	r2, r1
 8005e88:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68d9      	ldr	r1, [r3, #12]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	005b      	lsls	r3, r3, #1
 8005ea0:	4403      	add	r3, r0
 8005ea2:	3b1e      	subs	r3, #30
 8005ea4:	409a      	lsls	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	60da      	str	r2, [r3, #12]
 8005eae:	e022      	b.n	8005ef6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6919      	ldr	r1, [r3, #16]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	461a      	mov	r2, r3
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	4413      	add	r3, r2
 8005ec4:	2207      	movs	r2, #7
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	43da      	mvns	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	400a      	ands	r2, r1
 8005ed2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6919      	ldr	r1, [r3, #16]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	689a      	ldr	r2, [r3, #8]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	4403      	add	r3, r0
 8005eec:	409a      	lsls	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b06      	cmp	r3, #6
 8005efc:	d824      	bhi.n	8005f48 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	4613      	mov	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	3b05      	subs	r3, #5
 8005f10:	221f      	movs	r2, #31
 8005f12:	fa02 f303 	lsl.w	r3, r2, r3
 8005f16:	43da      	mvns	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	400a      	ands	r2, r1
 8005f1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	4613      	mov	r3, r2
 8005f34:	009b      	lsls	r3, r3, #2
 8005f36:	4413      	add	r3, r2
 8005f38:	3b05      	subs	r3, #5
 8005f3a:	fa00 f203 	lsl.w	r2, r0, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	635a      	str	r2, [r3, #52]	; 0x34
 8005f46:	e04c      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2b0c      	cmp	r3, #12
 8005f4e:	d824      	bhi.n	8005f9a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	3b23      	subs	r3, #35	; 0x23
 8005f62:	221f      	movs	r2, #31
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	43da      	mvns	r2, r3
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	400a      	ands	r2, r1
 8005f70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	4618      	mov	r0, r3
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	3b23      	subs	r3, #35	; 0x23
 8005f8c:	fa00 f203 	lsl.w	r2, r0, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
 8005f98:	e023      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	3b41      	subs	r3, #65	; 0x41
 8005fac:	221f      	movs	r2, #31
 8005fae:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb2:	43da      	mvns	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	400a      	ands	r2, r1
 8005fba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	4618      	mov	r0, r3
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	3b41      	subs	r3, #65	; 0x41
 8005fd6:	fa00 f203 	lsl.w	r2, r0, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005fe2:	4b29      	ldr	r3, [pc, #164]	; (8006088 <HAL_ADC_ConfigChannel+0x250>)
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a28      	ldr	r2, [pc, #160]	; (800608c <HAL_ADC_ConfigChannel+0x254>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d10f      	bne.n	8006010 <HAL_ADC_ConfigChannel+0x1d8>
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b12      	cmp	r3, #18
 8005ff6:	d10b      	bne.n	8006010 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a1d      	ldr	r2, [pc, #116]	; (800608c <HAL_ADC_ConfigChannel+0x254>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d12b      	bne.n	8006072 <HAL_ADC_ConfigChannel+0x23a>
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a1c      	ldr	r2, [pc, #112]	; (8006090 <HAL_ADC_ConfigChannel+0x258>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d003      	beq.n	800602c <HAL_ADC_ConfigChannel+0x1f4>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b11      	cmp	r3, #17
 800602a:	d122      	bne.n	8006072 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a11      	ldr	r2, [pc, #68]	; (8006090 <HAL_ADC_ConfigChannel+0x258>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d111      	bne.n	8006072 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800604e:	4b11      	ldr	r3, [pc, #68]	; (8006094 <HAL_ADC_ConfigChannel+0x25c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a11      	ldr	r2, [pc, #68]	; (8006098 <HAL_ADC_ConfigChannel+0x260>)
 8006054:	fba2 2303 	umull	r2, r3, r2, r3
 8006058:	0c9a      	lsrs	r2, r3, #18
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	005b      	lsls	r3, r3, #1
 8006062:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006064:	e002      	b.n	800606c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	3b01      	subs	r3, #1
 800606a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f9      	bne.n	8006066 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	40012300 	.word	0x40012300
 800608c:	40012000 	.word	0x40012000
 8006090:	10000012 	.word	0x10000012
 8006094:	20000040 	.word	0x20000040
 8006098:	431bde83 	.word	0x431bde83

0800609c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80060a4:	4b79      	ldr	r3, [pc, #484]	; (800628c <ADC_Init+0x1f0>)
 80060a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	431a      	orrs	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6859      	ldr	r1, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	021a      	lsls	r2, r3, #8
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	685a      	ldr	r2, [r3, #4]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80060f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6859      	ldr	r1, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689a      	ldr	r2, [r3, #8]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006116:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6899      	ldr	r1, [r3, #8]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612e:	4a58      	ldr	r2, [pc, #352]	; (8006290 <ADC_Init+0x1f4>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d022      	beq.n	800617a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006142:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	6899      	ldr	r1, [r3, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	430a      	orrs	r2, r1
 8006154:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006164:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6899      	ldr	r1, [r3, #8]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	609a      	str	r2, [r3, #8]
 8006178:	e00f      	b.n	800619a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689a      	ldr	r2, [r3, #8]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006188:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	689a      	ldr	r2, [r3, #8]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006198:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f022 0202 	bic.w	r2, r2, #2
 80061a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6899      	ldr	r1, [r3, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	7e1b      	ldrb	r3, [r3, #24]
 80061b4:	005a      	lsls	r2, r3, #1
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d01b      	beq.n	8006200 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	685a      	ldr	r2, [r3, #4]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685a      	ldr	r2, [r3, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80061e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6859      	ldr	r1, [r3, #4]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f2:	3b01      	subs	r3, #1
 80061f4:	035a      	lsls	r2, r3, #13
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	e007      	b.n	8006210 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685a      	ldr	r2, [r3, #4]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800620e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800621e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	3b01      	subs	r3, #1
 800622c:	051a      	lsls	r2, r3, #20
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006244:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6899      	ldr	r1, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006252:	025a      	lsls	r2, r3, #9
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	430a      	orrs	r2, r1
 800625a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	689a      	ldr	r2, [r3, #8]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6899      	ldr	r1, [r3, #8]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	029a      	lsls	r2, r3, #10
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	609a      	str	r2, [r3, #8]
}
 8006280:	bf00      	nop
 8006282:	3714      	adds	r7, #20
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	40012300 	.word	0x40012300
 8006290:	0f000001 	.word	0x0f000001

08006294 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8006294:	b480      	push	{r7}
 8006296:	b085      	sub	sp, #20
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d101      	bne.n	80062ac <HAL_ADCEx_MultiModeConfigChannel+0x18>
 80062a8:	2302      	movs	r3, #2
 80062aa:	e031      	b.n	8006310 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80062b4:	4b19      	ldr	r3, [pc, #100]	; (800631c <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 80062b6:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f023 021f 	bic.w	r2, r3, #31
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	685a      	ldr	r2, [r3, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	431a      	orrs	r2, r3
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	685a      	ldr	r2, [r3, #4]
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	431a      	orrs	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3714      	adds	r7, #20
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr
 800631c:	40012300 	.word	0x40012300

08006320 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d101      	bne.n	8006332 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e0ed      	b.n	800650e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d102      	bne.n	8006344 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fb fbe0 	bl	8001b04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f022 0202 	bic.w	r2, r2, #2
 8006352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006354:	f7ff fba6 	bl	8005aa4 <HAL_GetTick>
 8006358:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800635a:	e012      	b.n	8006382 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800635c:	f7ff fba2 	bl	8005aa4 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b0a      	cmp	r3, #10
 8006368:	d90b      	bls.n	8006382 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800636e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2205      	movs	r2, #5
 800637a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e0c5      	b.n	800650e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1e5      	bne.n	800635c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0201 	orr.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80063a0:	f7ff fb80 	bl	8005aa4 <HAL_GetTick>
 80063a4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80063a6:	e012      	b.n	80063ce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80063a8:	f7ff fb7c 	bl	8005aa4 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b0a      	cmp	r3, #10
 80063b4:	d90b      	bls.n	80063ce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2205      	movs	r2, #5
 80063c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e09f      	b.n	800650e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0e5      	beq.n	80063a8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	7e1b      	ldrb	r3, [r3, #24]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d108      	bne.n	80063f6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	e007      	b.n	8006406 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006404:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	7e5b      	ldrb	r3, [r3, #25]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d108      	bne.n	8006420 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800641c:	601a      	str	r2, [r3, #0]
 800641e:	e007      	b.n	8006430 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800642e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	7e9b      	ldrb	r3, [r3, #26]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d108      	bne.n	800644a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0220 	orr.w	r2, r2, #32
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	e007      	b.n	800645a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f022 0220 	bic.w	r2, r2, #32
 8006458:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	7edb      	ldrb	r3, [r3, #27]
 800645e:	2b01      	cmp	r3, #1
 8006460:	d108      	bne.n	8006474 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 0210 	bic.w	r2, r2, #16
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	e007      	b.n	8006484 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f042 0210 	orr.w	r2, r2, #16
 8006482:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	7f1b      	ldrb	r3, [r3, #28]
 8006488:	2b01      	cmp	r3, #1
 800648a:	d108      	bne.n	800649e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0208 	orr.w	r2, r2, #8
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	e007      	b.n	80064ae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0208 	bic.w	r2, r2, #8
 80064ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	7f5b      	ldrb	r3, [r3, #29]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d108      	bne.n	80064c8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f042 0204 	orr.w	r2, r2, #4
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	e007      	b.n	80064d8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0204 	bic.w	r2, r2, #4
 80064d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	ea42 0103 	orr.w	r1, r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	1e5a      	subs	r2, r3, #1
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
	...

08006518 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8006518:	b480      	push	{r7}
 800651a:	b087      	sub	sp, #28
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800652e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006530:	7cfb      	ldrb	r3, [r7, #19]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d003      	beq.n	800653e <HAL_CAN_ConfigFilter+0x26>
 8006536:	7cfb      	ldrb	r3, [r7, #19]
 8006538:	2b02      	cmp	r3, #2
 800653a:	f040 80be 	bne.w	80066ba <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800653e:	4b65      	ldr	r3, [pc, #404]	; (80066d4 <HAL_CAN_ConfigFilter+0x1bc>)
 8006540:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006548:	f043 0201 	orr.w	r2, r3, #1
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006558:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	431a      	orrs	r2, r3
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	f003 031f 	and.w	r3, r3, #31
 800657e:	2201      	movs	r2, #1
 8006580:	fa02 f303 	lsl.w	r3, r2, r3
 8006584:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	43db      	mvns	r3, r3
 8006590:	401a      	ands	r2, r3
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d123      	bne.n	80065e8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	43db      	mvns	r3, r3
 80065aa:	401a      	ands	r2, r3
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80065be:	683a      	ldr	r2, [r7, #0]
 80065c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80065c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	3248      	adds	r2, #72	; 0x48
 80065c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80065dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80065de:	6979      	ldr	r1, [r7, #20]
 80065e0:	3348      	adds	r3, #72	; 0x48
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	440b      	add	r3, r1
 80065e6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	69db      	ldr	r3, [r3, #28]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d122      	bne.n	8006636 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	431a      	orrs	r2, r3
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006610:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	3248      	adds	r2, #72	; 0x48
 8006616:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800662a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800662c:	6979      	ldr	r1, [r7, #20]
 800662e:	3348      	adds	r3, #72	; 0x48
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	440b      	add	r3, r1
 8006634:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d109      	bne.n	8006652 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	43db      	mvns	r3, r3
 8006648:	401a      	ands	r2, r3
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8006650:	e007      	b.n	8006662 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	431a      	orrs	r2, r3
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	691b      	ldr	r3, [r3, #16]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d109      	bne.n	800667e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	43db      	mvns	r3, r3
 8006674:	401a      	ands	r2, r3
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800667c:	e007      	b.n	800668e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	431a      	orrs	r2, r3
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d107      	bne.n	80066a6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	431a      	orrs	r2, r3
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80066ac:	f023 0201 	bic.w	r2, r3, #1
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	e006      	b.n	80066c8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
  }
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	40006400 	.word	0x40006400

080066d8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d12e      	bne.n	800674a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2202      	movs	r2, #2
 80066f0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 0201 	bic.w	r2, r2, #1
 8006702:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006704:	f7ff f9ce 	bl	8005aa4 <HAL_GetTick>
 8006708:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800670a:	e012      	b.n	8006732 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800670c:	f7ff f9ca 	bl	8005aa4 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b0a      	cmp	r3, #10
 8006718:	d90b      	bls.n	8006732 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2205      	movs	r2, #5
 800672a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e012      	b.n	8006758 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f003 0301 	and.w	r3, r3, #1
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1e5      	bne.n	800670c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8006746:	2300      	movs	r3, #0
 8006748:	e006      	b.n	8006758 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
  }
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8006760:	b480      	push	{r7}
 8006762:	b089      	sub	sp, #36	; 0x24
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006774:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800677e:	7ffb      	ldrb	r3, [r7, #31]
 8006780:	2b01      	cmp	r3, #1
 8006782:	d003      	beq.n	800678c <HAL_CAN_AddTxMessage+0x2c>
 8006784:	7ffb      	ldrb	r3, [r7, #31]
 8006786:	2b02      	cmp	r3, #2
 8006788:	f040 80b8 	bne.w	80068fc <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d10a      	bne.n	80067ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800679c:	2b00      	cmp	r3, #0
 800679e:	d105      	bne.n	80067ac <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80067a0:	69bb      	ldr	r3, [r7, #24]
 80067a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f000 80a0 	beq.w	80068ec <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	0e1b      	lsrs	r3, r3, #24
 80067b0:	f003 0303 	and.w	r3, r3, #3
 80067b4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d907      	bls.n	80067cc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e09e      	b.n	800690a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80067cc:	2201      	movs	r2, #1
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	409a      	lsls	r2, r3
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	689b      	ldr	r3, [r3, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10d      	bne.n	80067fa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80067e8:	68f9      	ldr	r1, [r7, #12]
 80067ea:	6809      	ldr	r1, [r1, #0]
 80067ec:	431a      	orrs	r2, r3
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	3318      	adds	r3, #24
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	440b      	add	r3, r1
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	e00f      	b.n	800681a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006804:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800680a:	68f9      	ldr	r1, [r7, #12]
 800680c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800680e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	3318      	adds	r3, #24
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	440b      	add	r3, r1
 8006818:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6819      	ldr	r1, [r3, #0]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	691a      	ldr	r2, [r3, #16]
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	3318      	adds	r3, #24
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	440b      	add	r3, r1
 800682a:	3304      	adds	r3, #4
 800682c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	7d1b      	ldrb	r3, [r3, #20]
 8006832:	2b01      	cmp	r3, #1
 8006834:	d111      	bne.n	800685a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	3318      	adds	r3, #24
 800683e:	011b      	lsls	r3, r3, #4
 8006840:	4413      	add	r3, r2
 8006842:	3304      	adds	r3, #4
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	6811      	ldr	r1, [r2, #0]
 800684a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	3318      	adds	r3, #24
 8006852:	011b      	lsls	r3, r3, #4
 8006854:	440b      	add	r3, r1
 8006856:	3304      	adds	r3, #4
 8006858:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3307      	adds	r3, #7
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	061a      	lsls	r2, r3, #24
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3306      	adds	r3, #6
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	041b      	lsls	r3, r3, #16
 800686a:	431a      	orrs	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3305      	adds	r3, #5
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	4313      	orrs	r3, r2
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	3204      	adds	r2, #4
 800687a:	7812      	ldrb	r2, [r2, #0]
 800687c:	4610      	mov	r0, r2
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	6811      	ldr	r1, [r2, #0]
 8006882:	ea43 0200 	orr.w	r2, r3, r0
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	011b      	lsls	r3, r3, #4
 800688a:	440b      	add	r3, r1
 800688c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006890:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	3303      	adds	r3, #3
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	061a      	lsls	r2, r3, #24
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	3302      	adds	r3, #2
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	041b      	lsls	r3, r3, #16
 80068a2:	431a      	orrs	r2, r3
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	3301      	adds	r3, #1
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	021b      	lsls	r3, r3, #8
 80068ac:	4313      	orrs	r3, r2
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	7812      	ldrb	r2, [r2, #0]
 80068b2:	4610      	mov	r0, r2
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	6811      	ldr	r1, [r2, #0]
 80068b8:	ea43 0200 	orr.w	r2, r3, r0
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	440b      	add	r3, r1
 80068c2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80068c6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	3318      	adds	r3, #24
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	4413      	add	r3, r2
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	6811      	ldr	r1, [r2, #0]
 80068da:	f043 0201 	orr.w	r2, r3, #1
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	3318      	adds	r3, #24
 80068e2:	011b      	lsls	r3, r3, #4
 80068e4:	440b      	add	r3, r1
 80068e6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80068e8:	2300      	movs	r3, #0
 80068ea:	e00e      	b.n	800690a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e006      	b.n	800690a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006900:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
  }
}
 800690a:	4618      	mov	r0, r3
 800690c:	3724      	adds	r7, #36	; 0x24
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006916:	b480      	push	{r7}
 8006918:	b087      	sub	sp, #28
 800691a:	af00      	add	r7, sp, #0
 800691c:	60f8      	str	r0, [r7, #12]
 800691e:	60b9      	str	r1, [r7, #8]
 8006920:	607a      	str	r2, [r7, #4]
 8006922:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f893 3020 	ldrb.w	r3, [r3, #32]
 800692a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800692c:	7dfb      	ldrb	r3, [r7, #23]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d003      	beq.n	800693a <HAL_CAN_GetRxMessage+0x24>
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	2b02      	cmp	r3, #2
 8006936:	f040 80f3 	bne.w	8006b20 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10e      	bne.n	800695e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	f003 0303 	and.w	r3, r3, #3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d116      	bne.n	800697c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006952:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e0e7      	b.n	8006b2e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	f003 0303 	and.w	r3, r3, #3
 8006968:	2b00      	cmp	r3, #0
 800696a:	d107      	bne.n	800697c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	e0d8      	b.n	8006b2e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	331b      	adds	r3, #27
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	4413      	add	r3, r2
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f003 0204 	and.w	r2, r3, #4
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10c      	bne.n	80069b4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	331b      	adds	r3, #27
 80069a2:	011b      	lsls	r3, r3, #4
 80069a4:	4413      	add	r3, r2
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	0d5b      	lsrs	r3, r3, #21
 80069aa:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	601a      	str	r2, [r3, #0]
 80069b2:	e00b      	b.n	80069cc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	331b      	adds	r3, #27
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	4413      	add	r3, r2
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	08db      	lsrs	r3, r3, #3
 80069c4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	331b      	adds	r3, #27
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	4413      	add	r3, r2
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0202 	and.w	r2, r3, #2
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	331b      	adds	r3, #27
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	4413      	add	r3, r2
 80069ee:	3304      	adds	r3, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 020f 	and.w	r2, r3, #15
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	331b      	adds	r3, #27
 8006a02:	011b      	lsls	r3, r3, #4
 8006a04:	4413      	add	r3, r2
 8006a06:	3304      	adds	r3, #4
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	0a1b      	lsrs	r3, r3, #8
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	331b      	adds	r3, #27
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	4413      	add	r3, r2
 8006a1e:	3304      	adds	r3, #4
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	0c1b      	lsrs	r3, r3, #16
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	011b      	lsls	r3, r3, #4
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	b2da      	uxtb	r2, r3
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	011b      	lsls	r3, r3, #4
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	0a1a      	lsrs	r2, r3, #8
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	b2d2      	uxtb	r2, r2
 8006a58:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	0c1a      	lsrs	r2, r3, #16
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	3302      	adds	r3, #2
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	4413      	add	r3, r2
 8006a7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	0e1a      	lsrs	r2, r3, #24
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	3303      	adds	r3, #3
 8006a8a:	b2d2      	uxtb	r2, r2
 8006a8c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	0a1a      	lsrs	r2, r3, #8
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	3305      	adds	r3, #5
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	011b      	lsls	r3, r3, #4
 8006ac8:	4413      	add	r3, r2
 8006aca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	0c1a      	lsrs	r2, r3, #16
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	3306      	adds	r3, #6
 8006ad6:	b2d2      	uxtb	r2, r2
 8006ad8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	011b      	lsls	r3, r3, #4
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	0e1a      	lsrs	r2, r3, #24
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	3307      	adds	r3, #7
 8006af0:	b2d2      	uxtb	r2, r2
 8006af2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d108      	bne.n	8006b0c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f042 0220 	orr.w	r2, r2, #32
 8006b08:	60da      	str	r2, [r3, #12]
 8006b0a:	e007      	b.n	8006b1c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691a      	ldr	r2, [r3, #16]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0220 	orr.w	r2, r2, #32
 8006b1a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e006      	b.n	8006b2e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
  }
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	371c      	adds	r7, #28
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b08a      	sub	sp, #40	; 0x28
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006b42:	2300      	movs	r3, #0
 8006b44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	695b      	ldr	r3, [r3, #20]
 8006b4c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	691b      	ldr	r3, [r3, #16]
 8006b6c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d07c      	beq.n	8006c7a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d023      	beq.n	8006bd2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	f003 0302 	and.w	r3, r3, #2
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d003      	beq.n	8006ba4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f97d 	bl	8006e9c <HAL_CAN_TxMailbox0CompleteCallback>
 8006ba2:	e016      	b.n	8006bd2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	f003 0304 	and.w	r3, r3, #4
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d004      	beq.n	8006bb8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb6:	e00c      	b.n	8006bd2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f003 0308 	and.w	r3, r3, #8
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d004      	beq.n	8006bcc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bca:	e002      	b.n	8006bd2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 f983 	bl	8006ed8 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d024      	beq.n	8006c26 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006be4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d003      	beq.n	8006bf8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 f95d 	bl	8006eb0 <HAL_CAN_TxMailbox1CompleteCallback>
 8006bf6:	e016      	b.n	8006c26 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d004      	beq.n	8006c0c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0a:	e00c      	b.n	8006c26 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d004      	beq.n	8006c20 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1e:	e002      	b.n	8006c26 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f963 	bl	8006eec <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d024      	beq.n	8006c7a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006c38:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f93d 	bl	8006ec4 <HAL_CAN_TxMailbox2CompleteCallback>
 8006c4a:	e016      	b.n	8006c7a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5e:	e00c      	b.n	8006c7a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d004      	beq.n	8006c74 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
 8006c72:	e002      	b.n	8006c7a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f943 	bl	8006f00 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d00c      	beq.n	8006c9e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f003 0310 	and.w	r3, r3, #16
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d007      	beq.n	8006c9e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2210      	movs	r2, #16
 8006c9c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006c9e:	6a3b      	ldr	r3, [r7, #32]
 8006ca0:	f003 0304 	and.w	r3, r3, #4
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d00b      	beq.n	8006cc0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d006      	beq.n	8006cc0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2208      	movs	r2, #8
 8006cb8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f934 	bl	8006f28 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f91b 	bl	8006f14 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00c      	beq.n	8006d02 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f003 0310 	and.w	r3, r3, #16
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cf8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2210      	movs	r2, #16
 8006d00:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	f003 0320 	and.w	r3, r3, #32
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	f003 0308 	and.w	r3, r3, #8
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d006      	beq.n	8006d24 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2208      	movs	r2, #8
 8006d1c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 f916 	bl	8006f50 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d002      	beq.n	8006d42 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f8fd 	bl	8006f3c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00b      	beq.n	8006d64 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d006      	beq.n	8006d64 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2210      	movs	r2, #16
 8006d5c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f900 	bl	8006f64 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006d64:	6a3b      	ldr	r3, [r7, #32]
 8006d66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d006      	beq.n	8006d86 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	2208      	movs	r2, #8
 8006d7e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f8f9 	bl	8006f78 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006d86:	6a3b      	ldr	r3, [r7, #32]
 8006d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d075      	beq.n	8006e7c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f003 0304 	and.w	r3, r3, #4
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d06c      	beq.n	8006e74 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006d9a:	6a3b      	ldr	r3, [r7, #32]
 8006d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d008      	beq.n	8006db6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db0:	f043 0301 	orr.w	r3, r3, #1
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d008      	beq.n	8006dd2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	f043 0302 	orr.w	r3, r3, #2
 8006dd0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d008      	beq.n	8006dee <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d003      	beq.n	8006dee <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	f043 0304 	orr.w	r3, r3, #4
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d03d      	beq.n	8006e74 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d038      	beq.n	8006e74 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e08:	2b30      	cmp	r3, #48	; 0x30
 8006e0a:	d017      	beq.n	8006e3c <HAL_CAN_IRQHandler+0x302>
 8006e0c:	2b30      	cmp	r3, #48	; 0x30
 8006e0e:	d804      	bhi.n	8006e1a <HAL_CAN_IRQHandler+0x2e0>
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d009      	beq.n	8006e28 <HAL_CAN_IRQHandler+0x2ee>
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d00c      	beq.n	8006e32 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006e18:	e024      	b.n	8006e64 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8006e1a:	2b50      	cmp	r3, #80	; 0x50
 8006e1c:	d018      	beq.n	8006e50 <HAL_CAN_IRQHandler+0x316>
 8006e1e:	2b60      	cmp	r3, #96	; 0x60
 8006e20:	d01b      	beq.n	8006e5a <HAL_CAN_IRQHandler+0x320>
 8006e22:	2b40      	cmp	r3, #64	; 0x40
 8006e24:	d00f      	beq.n	8006e46 <HAL_CAN_IRQHandler+0x30c>
            break;
 8006e26:	e01d      	b.n	8006e64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8006e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2a:	f043 0308 	orr.w	r3, r3, #8
 8006e2e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e30:	e018      	b.n	8006e64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	f043 0310 	orr.w	r3, r3, #16
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e3a:	e013      	b.n	8006e64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	f043 0320 	orr.w	r3, r3, #32
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e44:	e00e      	b.n	8006e64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8006e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e4c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e4e:	e009      	b.n	8006e64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e56:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e58:	e004      	b.n	8006e64 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e62:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006e72:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2204      	movs	r2, #4
 8006e7a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d008      	beq.n	8006e94 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e88:	431a      	orrs	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f87c 	bl	8006f8c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006e94:	bf00      	nop
 8006e96:	3728      	adds	r7, #40	; 0x28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006eb8:	bf00      	nop
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006ecc:	bf00      	nop
 8006ece:	370c      	adds	r7, #12
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006ee0:	bf00      	nop
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b083      	sub	sp, #12
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006f30:	bf00      	nop
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr

08006f8c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <__NVIC_SetPriorityGrouping>:
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fb0:	4b0c      	ldr	r3, [pc, #48]	; (8006fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fd2:	4a04      	ldr	r2, [pc, #16]	; (8006fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	60d3      	str	r3, [r2, #12]
}
 8006fd8:	bf00      	nop
 8006fda:	3714      	adds	r7, #20
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	e000ed00 	.word	0xe000ed00

08006fe8 <__NVIC_GetPriorityGrouping>:
{
 8006fe8:	b480      	push	{r7}
 8006fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fec:	4b04      	ldr	r3, [pc, #16]	; (8007000 <__NVIC_GetPriorityGrouping+0x18>)
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	0a1b      	lsrs	r3, r3, #8
 8006ff2:	f003 0307 	and.w	r3, r3, #7
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr
 8007000:	e000ed00 	.word	0xe000ed00

08007004 <__NVIC_EnableIRQ>:
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	4603      	mov	r3, r0
 800700c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800700e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007012:	2b00      	cmp	r3, #0
 8007014:	db0b      	blt.n	800702e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	f003 021f 	and.w	r2, r3, #31
 800701c:	4907      	ldr	r1, [pc, #28]	; (800703c <__NVIC_EnableIRQ+0x38>)
 800701e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007022:	095b      	lsrs	r3, r3, #5
 8007024:	2001      	movs	r0, #1
 8007026:	fa00 f202 	lsl.w	r2, r0, r2
 800702a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800702e:	bf00      	nop
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	e000e100 	.word	0xe000e100

08007040 <__NVIC_SetPriority>:
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	4603      	mov	r3, r0
 8007048:	6039      	str	r1, [r7, #0]
 800704a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800704c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007050:	2b00      	cmp	r3, #0
 8007052:	db0a      	blt.n	800706a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	b2da      	uxtb	r2, r3
 8007058:	490c      	ldr	r1, [pc, #48]	; (800708c <__NVIC_SetPriority+0x4c>)
 800705a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800705e:	0112      	lsls	r2, r2, #4
 8007060:	b2d2      	uxtb	r2, r2
 8007062:	440b      	add	r3, r1
 8007064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007068:	e00a      	b.n	8007080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	b2da      	uxtb	r2, r3
 800706e:	4908      	ldr	r1, [pc, #32]	; (8007090 <__NVIC_SetPriority+0x50>)
 8007070:	79fb      	ldrb	r3, [r7, #7]
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	3b04      	subs	r3, #4
 8007078:	0112      	lsls	r2, r2, #4
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	440b      	add	r3, r1
 800707e:	761a      	strb	r2, [r3, #24]
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr
 800708c:	e000e100 	.word	0xe000e100
 8007090:	e000ed00 	.word	0xe000ed00

08007094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007094:	b480      	push	{r7}
 8007096:	b089      	sub	sp, #36	; 0x24
 8007098:	af00      	add	r7, sp, #0
 800709a:	60f8      	str	r0, [r7, #12]
 800709c:	60b9      	str	r1, [r7, #8]
 800709e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	f1c3 0307 	rsb	r3, r3, #7
 80070ae:	2b04      	cmp	r3, #4
 80070b0:	bf28      	it	cs
 80070b2:	2304      	movcs	r3, #4
 80070b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070b6:	69fb      	ldr	r3, [r7, #28]
 80070b8:	3304      	adds	r3, #4
 80070ba:	2b06      	cmp	r3, #6
 80070bc:	d902      	bls.n	80070c4 <NVIC_EncodePriority+0x30>
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	3b03      	subs	r3, #3
 80070c2:	e000      	b.n	80070c6 <NVIC_EncodePriority+0x32>
 80070c4:	2300      	movs	r3, #0
 80070c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070c8:	f04f 32ff 	mov.w	r2, #4294967295
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	fa02 f303 	lsl.w	r3, r2, r3
 80070d2:	43da      	mvns	r2, r3
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	401a      	ands	r2, r3
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070dc:	f04f 31ff 	mov.w	r1, #4294967295
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	fa01 f303 	lsl.w	r3, r1, r3
 80070e6:	43d9      	mvns	r1, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070ec:	4313      	orrs	r3, r2
         );
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3724      	adds	r7, #36	; 0x24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
	...

080070fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	3b01      	subs	r3, #1
 8007108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800710c:	d301      	bcc.n	8007112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800710e:	2301      	movs	r3, #1
 8007110:	e00f      	b.n	8007132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007112:	4a0a      	ldr	r2, [pc, #40]	; (800713c <SysTick_Config+0x40>)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3b01      	subs	r3, #1
 8007118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800711a:	210f      	movs	r1, #15
 800711c:	f04f 30ff 	mov.w	r0, #4294967295
 8007120:	f7ff ff8e 	bl	8007040 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007124:	4b05      	ldr	r3, [pc, #20]	; (800713c <SysTick_Config+0x40>)
 8007126:	2200      	movs	r2, #0
 8007128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800712a:	4b04      	ldr	r3, [pc, #16]	; (800713c <SysTick_Config+0x40>)
 800712c:	2207      	movs	r2, #7
 800712e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	e000e010 	.word	0xe000e010

08007140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b082      	sub	sp, #8
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff ff29 	bl	8006fa0 <__NVIC_SetPriorityGrouping>
}
 800714e:	bf00      	nop
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007156:	b580      	push	{r7, lr}
 8007158:	b086      	sub	sp, #24
 800715a:	af00      	add	r7, sp, #0
 800715c:	4603      	mov	r3, r0
 800715e:	60b9      	str	r1, [r7, #8]
 8007160:	607a      	str	r2, [r7, #4]
 8007162:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007164:	2300      	movs	r3, #0
 8007166:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007168:	f7ff ff3e 	bl	8006fe8 <__NVIC_GetPriorityGrouping>
 800716c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	68b9      	ldr	r1, [r7, #8]
 8007172:	6978      	ldr	r0, [r7, #20]
 8007174:	f7ff ff8e 	bl	8007094 <NVIC_EncodePriority>
 8007178:	4602      	mov	r2, r0
 800717a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800717e:	4611      	mov	r1, r2
 8007180:	4618      	mov	r0, r3
 8007182:	f7ff ff5d 	bl	8007040 <__NVIC_SetPriority>
}
 8007186:	bf00      	nop
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b082      	sub	sp, #8
 8007192:	af00      	add	r7, sp, #0
 8007194:	4603      	mov	r3, r0
 8007196:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff ff31 	bl	8007004 <__NVIC_EnableIRQ>
}
 80071a2:	bf00      	nop
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b082      	sub	sp, #8
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f7ff ffa2 	bl	80070fc <SysTick_Config>
 80071b8:	4603      	mov	r3, r0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80071c2:	b480      	push	{r7}
 80071c4:	b083      	sub	sp, #12
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d004      	beq.n	80071e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2280      	movs	r2, #128	; 0x80
 80071da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e00c      	b.n	80071fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2205      	movs	r2, #5
 80071e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f022 0201 	bic.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
	...

08007208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007208:	b480      	push	{r7}
 800720a:	b089      	sub	sp, #36	; 0x24
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007212:	2300      	movs	r3, #0
 8007214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007216:	2300      	movs	r3, #0
 8007218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800721a:	2300      	movs	r3, #0
 800721c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800721e:	2300      	movs	r3, #0
 8007220:	61fb      	str	r3, [r7, #28]
 8007222:	e165      	b.n	80074f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007224:	2201      	movs	r2, #1
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	fa02 f303 	lsl.w	r3, r2, r3
 800722c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4013      	ands	r3, r2
 8007236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007238:	693a      	ldr	r2, [r7, #16]
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	429a      	cmp	r2, r3
 800723e:	f040 8154 	bne.w	80074ea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d00b      	beq.n	8007262 <HAL_GPIO_Init+0x5a>
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d007      	beq.n	8007262 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007256:	2b11      	cmp	r3, #17
 8007258:	d003      	beq.n	8007262 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2b12      	cmp	r3, #18
 8007260:	d130      	bne.n	80072c4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	2203      	movs	r2, #3
 800726e:	fa02 f303 	lsl.w	r3, r2, r3
 8007272:	43db      	mvns	r3, r3
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	4013      	ands	r3, r2
 8007278:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	005b      	lsls	r3, r3, #1
 8007282:	fa02 f303 	lsl.w	r3, r2, r3
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	4313      	orrs	r3, r2
 800728a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007298:	2201      	movs	r2, #1
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	fa02 f303 	lsl.w	r3, r2, r3
 80072a0:	43db      	mvns	r3, r3
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	4013      	ands	r3, r2
 80072a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	091b      	lsrs	r3, r3, #4
 80072ae:	f003 0201 	and.w	r2, r3, #1
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	fa02 f303 	lsl.w	r3, r2, r3
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	69ba      	ldr	r2, [r7, #24]
 80072c2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	2203      	movs	r2, #3
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	43db      	mvns	r3, r3
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	4013      	ands	r3, r2
 80072da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	fa02 f303 	lsl.w	r3, r2, r3
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	4313      	orrs	r3, r2
 80072ec:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	d003      	beq.n	8007304 <HAL_GPIO_Init+0xfc>
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	2b12      	cmp	r3, #18
 8007302:	d123      	bne.n	800734c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	08da      	lsrs	r2, r3, #3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	3208      	adds	r2, #8
 800730c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	009b      	lsls	r3, r3, #2
 800731a:	220f      	movs	r2, #15
 800731c:	fa02 f303 	lsl.w	r3, r2, r3
 8007320:	43db      	mvns	r3, r3
 8007322:	69ba      	ldr	r2, [r7, #24]
 8007324:	4013      	ands	r3, r2
 8007326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	691a      	ldr	r2, [r3, #16]
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f003 0307 	and.w	r3, r3, #7
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	fa02 f303 	lsl.w	r3, r2, r3
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	4313      	orrs	r3, r2
 800733c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	08da      	lsrs	r2, r3, #3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	3208      	adds	r2, #8
 8007346:	69b9      	ldr	r1, [r7, #24]
 8007348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	2203      	movs	r2, #3
 8007358:	fa02 f303 	lsl.w	r3, r2, r3
 800735c:	43db      	mvns	r3, r3
 800735e:	69ba      	ldr	r2, [r7, #24]
 8007360:	4013      	ands	r3, r2
 8007362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f003 0203 	and.w	r2, r3, #3
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	fa02 f303 	lsl.w	r3, r2, r3
 8007374:	69ba      	ldr	r2, [r7, #24]
 8007376:	4313      	orrs	r3, r2
 8007378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 80ae 	beq.w	80074ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800738e:	2300      	movs	r3, #0
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	4b5c      	ldr	r3, [pc, #368]	; (8007504 <HAL_GPIO_Init+0x2fc>)
 8007394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007396:	4a5b      	ldr	r2, [pc, #364]	; (8007504 <HAL_GPIO_Init+0x2fc>)
 8007398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800739c:	6453      	str	r3, [r2, #68]	; 0x44
 800739e:	4b59      	ldr	r3, [pc, #356]	; (8007504 <HAL_GPIO_Init+0x2fc>)
 80073a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073a6:	60fb      	str	r3, [r7, #12]
 80073a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80073aa:	4a57      	ldr	r2, [pc, #348]	; (8007508 <HAL_GPIO_Init+0x300>)
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	089b      	lsrs	r3, r3, #2
 80073b0:	3302      	adds	r3, #2
 80073b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	f003 0303 	and.w	r3, r3, #3
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	220f      	movs	r2, #15
 80073c2:	fa02 f303 	lsl.w	r3, r2, r3
 80073c6:	43db      	mvns	r3, r3
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	4013      	ands	r3, r2
 80073cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a4e      	ldr	r2, [pc, #312]	; (800750c <HAL_GPIO_Init+0x304>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d025      	beq.n	8007422 <HAL_GPIO_Init+0x21a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a4d      	ldr	r2, [pc, #308]	; (8007510 <HAL_GPIO_Init+0x308>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d01f      	beq.n	800741e <HAL_GPIO_Init+0x216>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a4c      	ldr	r2, [pc, #304]	; (8007514 <HAL_GPIO_Init+0x30c>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d019      	beq.n	800741a <HAL_GPIO_Init+0x212>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a4b      	ldr	r2, [pc, #300]	; (8007518 <HAL_GPIO_Init+0x310>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d013      	beq.n	8007416 <HAL_GPIO_Init+0x20e>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a4a      	ldr	r2, [pc, #296]	; (800751c <HAL_GPIO_Init+0x314>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d00d      	beq.n	8007412 <HAL_GPIO_Init+0x20a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a49      	ldr	r2, [pc, #292]	; (8007520 <HAL_GPIO_Init+0x318>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d007      	beq.n	800740e <HAL_GPIO_Init+0x206>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a48      	ldr	r2, [pc, #288]	; (8007524 <HAL_GPIO_Init+0x31c>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d101      	bne.n	800740a <HAL_GPIO_Init+0x202>
 8007406:	2306      	movs	r3, #6
 8007408:	e00c      	b.n	8007424 <HAL_GPIO_Init+0x21c>
 800740a:	2307      	movs	r3, #7
 800740c:	e00a      	b.n	8007424 <HAL_GPIO_Init+0x21c>
 800740e:	2305      	movs	r3, #5
 8007410:	e008      	b.n	8007424 <HAL_GPIO_Init+0x21c>
 8007412:	2304      	movs	r3, #4
 8007414:	e006      	b.n	8007424 <HAL_GPIO_Init+0x21c>
 8007416:	2303      	movs	r3, #3
 8007418:	e004      	b.n	8007424 <HAL_GPIO_Init+0x21c>
 800741a:	2302      	movs	r3, #2
 800741c:	e002      	b.n	8007424 <HAL_GPIO_Init+0x21c>
 800741e:	2301      	movs	r3, #1
 8007420:	e000      	b.n	8007424 <HAL_GPIO_Init+0x21c>
 8007422:	2300      	movs	r3, #0
 8007424:	69fa      	ldr	r2, [r7, #28]
 8007426:	f002 0203 	and.w	r2, r2, #3
 800742a:	0092      	lsls	r2, r2, #2
 800742c:	4093      	lsls	r3, r2
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	4313      	orrs	r3, r2
 8007432:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007434:	4934      	ldr	r1, [pc, #208]	; (8007508 <HAL_GPIO_Init+0x300>)
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	089b      	lsrs	r3, r3, #2
 800743a:	3302      	adds	r3, #2
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007442:	4b39      	ldr	r3, [pc, #228]	; (8007528 <HAL_GPIO_Init+0x320>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	43db      	mvns	r3, r3
 800744c:	69ba      	ldr	r2, [r7, #24]
 800744e:	4013      	ands	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	4313      	orrs	r3, r2
 8007464:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007466:	4a30      	ldr	r2, [pc, #192]	; (8007528 <HAL_GPIO_Init+0x320>)
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800746c:	4b2e      	ldr	r3, [pc, #184]	; (8007528 <HAL_GPIO_Init+0x320>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	43db      	mvns	r3, r3
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	4013      	ands	r3, r2
 800747a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d003      	beq.n	8007490 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007488:	69ba      	ldr	r2, [r7, #24]
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	4313      	orrs	r3, r2
 800748e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007490:	4a25      	ldr	r2, [pc, #148]	; (8007528 <HAL_GPIO_Init+0x320>)
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007496:	4b24      	ldr	r3, [pc, #144]	; (8007528 <HAL_GPIO_Init+0x320>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	43db      	mvns	r3, r3
 80074a0:	69ba      	ldr	r2, [r7, #24]
 80074a2:	4013      	ands	r3, r2
 80074a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80074b2:	69ba      	ldr	r2, [r7, #24]
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80074ba:	4a1b      	ldr	r2, [pc, #108]	; (8007528 <HAL_GPIO_Init+0x320>)
 80074bc:	69bb      	ldr	r3, [r7, #24]
 80074be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80074c0:	4b19      	ldr	r3, [pc, #100]	; (8007528 <HAL_GPIO_Init+0x320>)
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	43db      	mvns	r3, r3
 80074ca:	69ba      	ldr	r2, [r7, #24]
 80074cc:	4013      	ands	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d003      	beq.n	80074e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80074dc:	69ba      	ldr	r2, [r7, #24]
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80074e4:	4a10      	ldr	r2, [pc, #64]	; (8007528 <HAL_GPIO_Init+0x320>)
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	3301      	adds	r3, #1
 80074ee:	61fb      	str	r3, [r7, #28]
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	2b0f      	cmp	r3, #15
 80074f4:	f67f ae96 	bls.w	8007224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80074f8:	bf00      	nop
 80074fa:	3724      	adds	r7, #36	; 0x24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	40023800 	.word	0x40023800
 8007508:	40013800 	.word	0x40013800
 800750c:	40020000 	.word	0x40020000
 8007510:	40020400 	.word	0x40020400
 8007514:	40020800 	.word	0x40020800
 8007518:	40020c00 	.word	0x40020c00
 800751c:	40021000 	.word	0x40021000
 8007520:	40021400 	.word	0x40021400
 8007524:	40021800 	.word	0x40021800
 8007528:	40013c00 	.word	0x40013c00

0800752c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	460b      	mov	r3, r1
 8007536:	807b      	strh	r3, [r7, #2]
 8007538:	4613      	mov	r3, r2
 800753a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800753c:	787b      	ldrb	r3, [r7, #1]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d003      	beq.n	800754a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007542:	887a      	ldrh	r2, [r7, #2]
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007548:	e003      	b.n	8007552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800754a:	887b      	ldrh	r3, [r7, #2]
 800754c:	041a      	lsls	r2, r3, #16
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	619a      	str	r2, [r3, #24]
}
 8007552:	bf00      	nop
 8007554:	370c      	adds	r7, #12
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
	...

08007560 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007566:	2300      	movs	r3, #0
 8007568:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800756a:	2300      	movs	r3, #0
 800756c:	603b      	str	r3, [r7, #0]
 800756e:	4b20      	ldr	r3, [pc, #128]	; (80075f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8007570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007572:	4a1f      	ldr	r2, [pc, #124]	; (80075f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8007574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007578:	6413      	str	r3, [r2, #64]	; 0x40
 800757a:	4b1d      	ldr	r3, [pc, #116]	; (80075f0 <HAL_PWREx_EnableOverDrive+0x90>)
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007582:	603b      	str	r3, [r7, #0]
 8007584:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007586:	4b1b      	ldr	r3, [pc, #108]	; (80075f4 <HAL_PWREx_EnableOverDrive+0x94>)
 8007588:	2201      	movs	r2, #1
 800758a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800758c:	f7fe fa8a 	bl	8005aa4 <HAL_GetTick>
 8007590:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007592:	e009      	b.n	80075a8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007594:	f7fe fa86 	bl	8005aa4 <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075a2:	d901      	bls.n	80075a8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e01f      	b.n	80075e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80075a8:	4b13      	ldr	r3, [pc, #76]	; (80075f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80075aa:	685b      	ldr	r3, [r3, #4]
 80075ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075b4:	d1ee      	bne.n	8007594 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80075b6:	4b11      	ldr	r3, [pc, #68]	; (80075fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80075b8:	2201      	movs	r2, #1
 80075ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075bc:	f7fe fa72 	bl	8005aa4 <HAL_GetTick>
 80075c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80075c2:	e009      	b.n	80075d8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80075c4:	f7fe fa6e 	bl	8005aa4 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075d2:	d901      	bls.n	80075d8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e007      	b.n	80075e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80075d8:	4b07      	ldr	r3, [pc, #28]	; (80075f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075e4:	d1ee      	bne.n	80075c4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3708      	adds	r7, #8
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}
 80075f0:	40023800 	.word	0x40023800
 80075f4:	420e0040 	.word	0x420e0040
 80075f8:	40007000 	.word	0x40007000
 80075fc:	420e0044 	.word	0x420e0044

08007600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d101      	bne.n	8007614 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e0cc      	b.n	80077ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007614:	4b68      	ldr	r3, [pc, #416]	; (80077b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 030f 	and.w	r3, r3, #15
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	429a      	cmp	r2, r3
 8007620:	d90c      	bls.n	800763c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007622:	4b65      	ldr	r3, [pc, #404]	; (80077b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007624:	683a      	ldr	r2, [r7, #0]
 8007626:	b2d2      	uxtb	r2, r2
 8007628:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800762a:	4b63      	ldr	r3, [pc, #396]	; (80077b8 <HAL_RCC_ClockConfig+0x1b8>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	683a      	ldr	r2, [r7, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d001      	beq.n	800763c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007638:	2301      	movs	r3, #1
 800763a:	e0b8      	b.n	80077ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d020      	beq.n	800768a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 0304 	and.w	r3, r3, #4
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007654:	4b59      	ldr	r3, [pc, #356]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	4a58      	ldr	r2, [pc, #352]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 800765a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800765e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0308 	and.w	r3, r3, #8
 8007668:	2b00      	cmp	r3, #0
 800766a:	d005      	beq.n	8007678 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800766c:	4b53      	ldr	r3, [pc, #332]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	4a52      	ldr	r2, [pc, #328]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 8007672:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007676:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007678:	4b50      	ldr	r3, [pc, #320]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689b      	ldr	r3, [r3, #8]
 8007684:	494d      	ldr	r1, [pc, #308]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 8007686:	4313      	orrs	r3, r2
 8007688:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0301 	and.w	r3, r3, #1
 8007692:	2b00      	cmp	r3, #0
 8007694:	d044      	beq.n	8007720 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	2b01      	cmp	r3, #1
 800769c:	d107      	bne.n	80076ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800769e:	4b47      	ldr	r3, [pc, #284]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d119      	bne.n	80076de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e07f      	b.n	80077ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	2b02      	cmp	r3, #2
 80076b4:	d003      	beq.n	80076be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076ba:	2b03      	cmp	r3, #3
 80076bc:	d107      	bne.n	80076ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076be:	4b3f      	ldr	r3, [pc, #252]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d109      	bne.n	80076de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e06f      	b.n	80077ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ce:	4b3b      	ldr	r3, [pc, #236]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d101      	bne.n	80076de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e067      	b.n	80077ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076de:	4b37      	ldr	r3, [pc, #220]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f023 0203 	bic.w	r2, r3, #3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	4934      	ldr	r1, [pc, #208]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80076f0:	f7fe f9d8 	bl	8005aa4 <HAL_GetTick>
 80076f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076f6:	e00a      	b.n	800770e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076f8:	f7fe f9d4 	bl	8005aa4 <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	f241 3288 	movw	r2, #5000	; 0x1388
 8007706:	4293      	cmp	r3, r2
 8007708:	d901      	bls.n	800770e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800770a:	2303      	movs	r3, #3
 800770c:	e04f      	b.n	80077ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800770e:	4b2b      	ldr	r3, [pc, #172]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	f003 020c 	and.w	r2, r3, #12
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	429a      	cmp	r2, r3
 800771e:	d1eb      	bne.n	80076f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007720:	4b25      	ldr	r3, [pc, #148]	; (80077b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f003 030f 	and.w	r3, r3, #15
 8007728:	683a      	ldr	r2, [r7, #0]
 800772a:	429a      	cmp	r2, r3
 800772c:	d20c      	bcs.n	8007748 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800772e:	4b22      	ldr	r3, [pc, #136]	; (80077b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007730:	683a      	ldr	r2, [r7, #0]
 8007732:	b2d2      	uxtb	r2, r2
 8007734:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007736:	4b20      	ldr	r3, [pc, #128]	; (80077b8 <HAL_RCC_ClockConfig+0x1b8>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 030f 	and.w	r3, r3, #15
 800773e:	683a      	ldr	r2, [r7, #0]
 8007740:	429a      	cmp	r2, r3
 8007742:	d001      	beq.n	8007748 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e032      	b.n	80077ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0304 	and.w	r3, r3, #4
 8007750:	2b00      	cmp	r3, #0
 8007752:	d008      	beq.n	8007766 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007754:	4b19      	ldr	r3, [pc, #100]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	4916      	ldr	r1, [pc, #88]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 8007762:	4313      	orrs	r3, r2
 8007764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b00      	cmp	r3, #0
 8007770:	d009      	beq.n	8007786 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007772:	4b12      	ldr	r3, [pc, #72]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	490e      	ldr	r1, [pc, #56]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 8007782:	4313      	orrs	r3, r2
 8007784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007786:	f000 f855 	bl	8007834 <HAL_RCC_GetSysClockFreq>
 800778a:	4601      	mov	r1, r0
 800778c:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <HAL_RCC_ClockConfig+0x1bc>)
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	091b      	lsrs	r3, r3, #4
 8007792:	f003 030f 	and.w	r3, r3, #15
 8007796:	4a0a      	ldr	r2, [pc, #40]	; (80077c0 <HAL_RCC_ClockConfig+0x1c0>)
 8007798:	5cd3      	ldrb	r3, [r2, r3]
 800779a:	fa21 f303 	lsr.w	r3, r1, r3
 800779e:	4a09      	ldr	r2, [pc, #36]	; (80077c4 <HAL_RCC_ClockConfig+0x1c4>)
 80077a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80077a2:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <HAL_RCC_ClockConfig+0x1c8>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe f938 	bl	8005a1c <HAL_InitTick>

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	40023c00 	.word	0x40023c00
 80077bc:	40023800 	.word	0x40023800
 80077c0:	0800fc5c 	.word	0x0800fc5c
 80077c4:	20000040 	.word	0x20000040
 80077c8:	20000044 	.word	0x20000044

080077cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077d0:	4b03      	ldr	r3, [pc, #12]	; (80077e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80077d2:	681b      	ldr	r3, [r3, #0]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20000040 	.word	0x20000040

080077e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80077e8:	f7ff fff0 	bl	80077cc <HAL_RCC_GetHCLKFreq>
 80077ec:	4601      	mov	r1, r0
 80077ee:	4b05      	ldr	r3, [pc, #20]	; (8007804 <HAL_RCC_GetPCLK1Freq+0x20>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	0a9b      	lsrs	r3, r3, #10
 80077f4:	f003 0307 	and.w	r3, r3, #7
 80077f8:	4a03      	ldr	r2, [pc, #12]	; (8007808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077fa:	5cd3      	ldrb	r3, [r2, r3]
 80077fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007800:	4618      	mov	r0, r3
 8007802:	bd80      	pop	{r7, pc}
 8007804:	40023800 	.word	0x40023800
 8007808:	0800fc6c 	.word	0x0800fc6c

0800780c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007810:	f7ff ffdc 	bl	80077cc <HAL_RCC_GetHCLKFreq>
 8007814:	4601      	mov	r1, r0
 8007816:	4b05      	ldr	r3, [pc, #20]	; (800782c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	0b5b      	lsrs	r3, r3, #13
 800781c:	f003 0307 	and.w	r3, r3, #7
 8007820:	4a03      	ldr	r2, [pc, #12]	; (8007830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007822:	5cd3      	ldrb	r3, [r2, r3]
 8007824:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007828:	4618      	mov	r0, r3
 800782a:	bd80      	pop	{r7, pc}
 800782c:	40023800 	.word	0x40023800
 8007830:	0800fc6c 	.word	0x0800fc6c

08007834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800783a:	2300      	movs	r3, #0
 800783c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8007842:	2300      	movs	r3, #0
 8007844:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8007846:	2300      	movs	r3, #0
 8007848:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800784e:	4bc6      	ldr	r3, [pc, #792]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x334>)
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f003 030c 	and.w	r3, r3, #12
 8007856:	2b0c      	cmp	r3, #12
 8007858:	f200 817e 	bhi.w	8007b58 <HAL_RCC_GetSysClockFreq+0x324>
 800785c:	a201      	add	r2, pc, #4	; (adr r2, 8007864 <HAL_RCC_GetSysClockFreq+0x30>)
 800785e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007862:	bf00      	nop
 8007864:	08007899 	.word	0x08007899
 8007868:	08007b59 	.word	0x08007b59
 800786c:	08007b59 	.word	0x08007b59
 8007870:	08007b59 	.word	0x08007b59
 8007874:	0800789f 	.word	0x0800789f
 8007878:	08007b59 	.word	0x08007b59
 800787c:	08007b59 	.word	0x08007b59
 8007880:	08007b59 	.word	0x08007b59
 8007884:	080078a5 	.word	0x080078a5
 8007888:	08007b59 	.word	0x08007b59
 800788c:	08007b59 	.word	0x08007b59
 8007890:	08007b59 	.word	0x08007b59
 8007894:	08007a01 	.word	0x08007a01
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007898:	4bb4      	ldr	r3, [pc, #720]	; (8007b6c <HAL_RCC_GetSysClockFreq+0x338>)
 800789a:	613b      	str	r3, [r7, #16]
       break;
 800789c:	e15f      	b.n	8007b5e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800789e:	4bb4      	ldr	r3, [pc, #720]	; (8007b70 <HAL_RCC_GetSysClockFreq+0x33c>)
 80078a0:	613b      	str	r3, [r7, #16]
      break;
 80078a2:	e15c      	b.n	8007b5e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80078a4:	4bb0      	ldr	r3, [pc, #704]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x334>)
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80078ac:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80078ae:	4bae      	ldr	r3, [pc, #696]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x334>)
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d04a      	beq.n	8007950 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078ba:	4bab      	ldr	r3, [pc, #684]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x334>)
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	099b      	lsrs	r3, r3, #6
 80078c0:	f04f 0400 	mov.w	r4, #0
 80078c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80078c8:	f04f 0200 	mov.w	r2, #0
 80078cc:	ea03 0501 	and.w	r5, r3, r1
 80078d0:	ea04 0602 	and.w	r6, r4, r2
 80078d4:	4629      	mov	r1, r5
 80078d6:	4632      	mov	r2, r6
 80078d8:	f04f 0300 	mov.w	r3, #0
 80078dc:	f04f 0400 	mov.w	r4, #0
 80078e0:	0154      	lsls	r4, r2, #5
 80078e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80078e6:	014b      	lsls	r3, r1, #5
 80078e8:	4619      	mov	r1, r3
 80078ea:	4622      	mov	r2, r4
 80078ec:	1b49      	subs	r1, r1, r5
 80078ee:	eb62 0206 	sbc.w	r2, r2, r6
 80078f2:	f04f 0300 	mov.w	r3, #0
 80078f6:	f04f 0400 	mov.w	r4, #0
 80078fa:	0194      	lsls	r4, r2, #6
 80078fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007900:	018b      	lsls	r3, r1, #6
 8007902:	1a5b      	subs	r3, r3, r1
 8007904:	eb64 0402 	sbc.w	r4, r4, r2
 8007908:	f04f 0100 	mov.w	r1, #0
 800790c:	f04f 0200 	mov.w	r2, #0
 8007910:	00e2      	lsls	r2, r4, #3
 8007912:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007916:	00d9      	lsls	r1, r3, #3
 8007918:	460b      	mov	r3, r1
 800791a:	4614      	mov	r4, r2
 800791c:	195b      	adds	r3, r3, r5
 800791e:	eb44 0406 	adc.w	r4, r4, r6
 8007922:	f04f 0100 	mov.w	r1, #0
 8007926:	f04f 0200 	mov.w	r2, #0
 800792a:	0262      	lsls	r2, r4, #9
 800792c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007930:	0259      	lsls	r1, r3, #9
 8007932:	460b      	mov	r3, r1
 8007934:	4614      	mov	r4, r2
 8007936:	4618      	mov	r0, r3
 8007938:	4621      	mov	r1, r4
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f04f 0400 	mov.w	r4, #0
 8007940:	461a      	mov	r2, r3
 8007942:	4623      	mov	r3, r4
 8007944:	f7f9 f9c0 	bl	8000cc8 <__aeabi_uldivmod>
 8007948:	4603      	mov	r3, r0
 800794a:	460c      	mov	r4, r1
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	e049      	b.n	80079e4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007950:	4b85      	ldr	r3, [pc, #532]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x334>)
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	099b      	lsrs	r3, r3, #6
 8007956:	f04f 0400 	mov.w	r4, #0
 800795a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800795e:	f04f 0200 	mov.w	r2, #0
 8007962:	ea03 0501 	and.w	r5, r3, r1
 8007966:	ea04 0602 	and.w	r6, r4, r2
 800796a:	4629      	mov	r1, r5
 800796c:	4632      	mov	r2, r6
 800796e:	f04f 0300 	mov.w	r3, #0
 8007972:	f04f 0400 	mov.w	r4, #0
 8007976:	0154      	lsls	r4, r2, #5
 8007978:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800797c:	014b      	lsls	r3, r1, #5
 800797e:	4619      	mov	r1, r3
 8007980:	4622      	mov	r2, r4
 8007982:	1b49      	subs	r1, r1, r5
 8007984:	eb62 0206 	sbc.w	r2, r2, r6
 8007988:	f04f 0300 	mov.w	r3, #0
 800798c:	f04f 0400 	mov.w	r4, #0
 8007990:	0194      	lsls	r4, r2, #6
 8007992:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007996:	018b      	lsls	r3, r1, #6
 8007998:	1a5b      	subs	r3, r3, r1
 800799a:	eb64 0402 	sbc.w	r4, r4, r2
 800799e:	f04f 0100 	mov.w	r1, #0
 80079a2:	f04f 0200 	mov.w	r2, #0
 80079a6:	00e2      	lsls	r2, r4, #3
 80079a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80079ac:	00d9      	lsls	r1, r3, #3
 80079ae:	460b      	mov	r3, r1
 80079b0:	4614      	mov	r4, r2
 80079b2:	195b      	adds	r3, r3, r5
 80079b4:	eb44 0406 	adc.w	r4, r4, r6
 80079b8:	f04f 0100 	mov.w	r1, #0
 80079bc:	f04f 0200 	mov.w	r2, #0
 80079c0:	02a2      	lsls	r2, r4, #10
 80079c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80079c6:	0299      	lsls	r1, r3, #10
 80079c8:	460b      	mov	r3, r1
 80079ca:	4614      	mov	r4, r2
 80079cc:	4618      	mov	r0, r3
 80079ce:	4621      	mov	r1, r4
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f04f 0400 	mov.w	r4, #0
 80079d6:	461a      	mov	r2, r3
 80079d8:	4623      	mov	r3, r4
 80079da:	f7f9 f975 	bl	8000cc8 <__aeabi_uldivmod>
 80079de:	4603      	mov	r3, r0
 80079e0:	460c      	mov	r4, r1
 80079e2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80079e4:	4b60      	ldr	r3, [pc, #384]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x334>)
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	0c1b      	lsrs	r3, r3, #16
 80079ea:	f003 0303 	and.w	r3, r3, #3
 80079ee:	3301      	adds	r3, #1
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80079f4:	697a      	ldr	r2, [r7, #20]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079fc:	613b      	str	r3, [r7, #16]
      break;
 80079fe:	e0ae      	b.n	8007b5e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a00:	4b59      	ldr	r3, [pc, #356]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x334>)
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a08:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007a0a:	4b57      	ldr	r3, [pc, #348]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x334>)
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d04a      	beq.n	8007aac <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a16:	4b54      	ldr	r3, [pc, #336]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x334>)
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	099b      	lsrs	r3, r3, #6
 8007a1c:	f04f 0400 	mov.w	r4, #0
 8007a20:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007a24:	f04f 0200 	mov.w	r2, #0
 8007a28:	ea03 0501 	and.w	r5, r3, r1
 8007a2c:	ea04 0602 	and.w	r6, r4, r2
 8007a30:	4629      	mov	r1, r5
 8007a32:	4632      	mov	r2, r6
 8007a34:	f04f 0300 	mov.w	r3, #0
 8007a38:	f04f 0400 	mov.w	r4, #0
 8007a3c:	0154      	lsls	r4, r2, #5
 8007a3e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007a42:	014b      	lsls	r3, r1, #5
 8007a44:	4619      	mov	r1, r3
 8007a46:	4622      	mov	r2, r4
 8007a48:	1b49      	subs	r1, r1, r5
 8007a4a:	eb62 0206 	sbc.w	r2, r2, r6
 8007a4e:	f04f 0300 	mov.w	r3, #0
 8007a52:	f04f 0400 	mov.w	r4, #0
 8007a56:	0194      	lsls	r4, r2, #6
 8007a58:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007a5c:	018b      	lsls	r3, r1, #6
 8007a5e:	1a5b      	subs	r3, r3, r1
 8007a60:	eb64 0402 	sbc.w	r4, r4, r2
 8007a64:	f04f 0100 	mov.w	r1, #0
 8007a68:	f04f 0200 	mov.w	r2, #0
 8007a6c:	00e2      	lsls	r2, r4, #3
 8007a6e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007a72:	00d9      	lsls	r1, r3, #3
 8007a74:	460b      	mov	r3, r1
 8007a76:	4614      	mov	r4, r2
 8007a78:	195b      	adds	r3, r3, r5
 8007a7a:	eb44 0406 	adc.w	r4, r4, r6
 8007a7e:	f04f 0100 	mov.w	r1, #0
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	0262      	lsls	r2, r4, #9
 8007a88:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007a8c:	0259      	lsls	r1, r3, #9
 8007a8e:	460b      	mov	r3, r1
 8007a90:	4614      	mov	r4, r2
 8007a92:	4618      	mov	r0, r3
 8007a94:	4621      	mov	r1, r4
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f04f 0400 	mov.w	r4, #0
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4623      	mov	r3, r4
 8007aa0:	f7f9 f912 	bl	8000cc8 <__aeabi_uldivmod>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	460c      	mov	r4, r1
 8007aa8:	617b      	str	r3, [r7, #20]
 8007aaa:	e049      	b.n	8007b40 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aac:	4b2e      	ldr	r3, [pc, #184]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x334>)
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	099b      	lsrs	r3, r3, #6
 8007ab2:	f04f 0400 	mov.w	r4, #0
 8007ab6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007aba:	f04f 0200 	mov.w	r2, #0
 8007abe:	ea03 0501 	and.w	r5, r3, r1
 8007ac2:	ea04 0602 	and.w	r6, r4, r2
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	4632      	mov	r2, r6
 8007aca:	f04f 0300 	mov.w	r3, #0
 8007ace:	f04f 0400 	mov.w	r4, #0
 8007ad2:	0154      	lsls	r4, r2, #5
 8007ad4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007ad8:	014b      	lsls	r3, r1, #5
 8007ada:	4619      	mov	r1, r3
 8007adc:	4622      	mov	r2, r4
 8007ade:	1b49      	subs	r1, r1, r5
 8007ae0:	eb62 0206 	sbc.w	r2, r2, r6
 8007ae4:	f04f 0300 	mov.w	r3, #0
 8007ae8:	f04f 0400 	mov.w	r4, #0
 8007aec:	0194      	lsls	r4, r2, #6
 8007aee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007af2:	018b      	lsls	r3, r1, #6
 8007af4:	1a5b      	subs	r3, r3, r1
 8007af6:	eb64 0402 	sbc.w	r4, r4, r2
 8007afa:	f04f 0100 	mov.w	r1, #0
 8007afe:	f04f 0200 	mov.w	r2, #0
 8007b02:	00e2      	lsls	r2, r4, #3
 8007b04:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007b08:	00d9      	lsls	r1, r3, #3
 8007b0a:	460b      	mov	r3, r1
 8007b0c:	4614      	mov	r4, r2
 8007b0e:	195b      	adds	r3, r3, r5
 8007b10:	eb44 0406 	adc.w	r4, r4, r6
 8007b14:	f04f 0100 	mov.w	r1, #0
 8007b18:	f04f 0200 	mov.w	r2, #0
 8007b1c:	02a2      	lsls	r2, r4, #10
 8007b1e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007b22:	0299      	lsls	r1, r3, #10
 8007b24:	460b      	mov	r3, r1
 8007b26:	4614      	mov	r4, r2
 8007b28:	4618      	mov	r0, r3
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f04f 0400 	mov.w	r4, #0
 8007b32:	461a      	mov	r2, r3
 8007b34:	4623      	mov	r3, r4
 8007b36:	f7f9 f8c7 	bl	8000cc8 <__aeabi_uldivmod>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	460c      	mov	r4, r1
 8007b3e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007b40:	4b09      	ldr	r3, [pc, #36]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x334>)
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	0f1b      	lsrs	r3, r3, #28
 8007b46:	f003 0307 	and.w	r3, r3, #7
 8007b4a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8007b4c:	697a      	ldr	r2, [r7, #20]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b54:	613b      	str	r3, [r7, #16]
      break;
 8007b56:	e002      	b.n	8007b5e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b58:	4b04      	ldr	r3, [pc, #16]	; (8007b6c <HAL_RCC_GetSysClockFreq+0x338>)
 8007b5a:	613b      	str	r3, [r7, #16]
      break;
 8007b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b5e:	693b      	ldr	r3, [r7, #16]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	371c      	adds	r7, #28
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b68:	40023800 	.word	0x40023800
 8007b6c:	00f42400 	.word	0x00f42400
 8007b70:	007a1200 	.word	0x007a1200

08007b74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b086      	sub	sp, #24
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f000 8083 	beq.w	8007c94 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007b8e:	4b95      	ldr	r3, [pc, #596]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007b90:	689b      	ldr	r3, [r3, #8]
 8007b92:	f003 030c 	and.w	r3, r3, #12
 8007b96:	2b04      	cmp	r3, #4
 8007b98:	d019      	beq.n	8007bce <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007b9a:	4b92      	ldr	r3, [pc, #584]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007ba2:	2b08      	cmp	r3, #8
 8007ba4:	d106      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007ba6:	4b8f      	ldr	r3, [pc, #572]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bb2:	d00c      	beq.n	8007bce <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bb4:	4b8b      	ldr	r3, [pc, #556]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007bbc:	2b0c      	cmp	r3, #12
 8007bbe:	d112      	bne.n	8007be6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007bc0:	4b88      	ldr	r3, [pc, #544]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bcc:	d10b      	bne.n	8007be6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007bce:	4b85      	ldr	r3, [pc, #532]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d05b      	beq.n	8007c92 <HAL_RCC_OscConfig+0x11e>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d157      	bne.n	8007c92 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e216      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bee:	d106      	bne.n	8007bfe <HAL_RCC_OscConfig+0x8a>
 8007bf0:	4b7c      	ldr	r3, [pc, #496]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a7b      	ldr	r2, [pc, #492]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007bfa:	6013      	str	r3, [r2, #0]
 8007bfc:	e01d      	b.n	8007c3a <HAL_RCC_OscConfig+0xc6>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c06:	d10c      	bne.n	8007c22 <HAL_RCC_OscConfig+0xae>
 8007c08:	4b76      	ldr	r3, [pc, #472]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	4a75      	ldr	r2, [pc, #468]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007c0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c12:	6013      	str	r3, [r2, #0]
 8007c14:	4b73      	ldr	r3, [pc, #460]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a72      	ldr	r2, [pc, #456]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007c1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c1e:	6013      	str	r3, [r2, #0]
 8007c20:	e00b      	b.n	8007c3a <HAL_RCC_OscConfig+0xc6>
 8007c22:	4b70      	ldr	r3, [pc, #448]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a6f      	ldr	r2, [pc, #444]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	4b6d      	ldr	r3, [pc, #436]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a6c      	ldr	r2, [pc, #432]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c38:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	685b      	ldr	r3, [r3, #4]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d013      	beq.n	8007c6a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c42:	f7fd ff2f 	bl	8005aa4 <HAL_GetTick>
 8007c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c48:	e008      	b.n	8007c5c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c4a:	f7fd ff2b 	bl	8005aa4 <HAL_GetTick>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	1ad3      	subs	r3, r2, r3
 8007c54:	2b64      	cmp	r3, #100	; 0x64
 8007c56:	d901      	bls.n	8007c5c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e1db      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c5c:	4b61      	ldr	r3, [pc, #388]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0f0      	beq.n	8007c4a <HAL_RCC_OscConfig+0xd6>
 8007c68:	e014      	b.n	8007c94 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c6a:	f7fd ff1b 	bl	8005aa4 <HAL_GetTick>
 8007c6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c70:	e008      	b.n	8007c84 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007c72:	f7fd ff17 	bl	8005aa4 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	2b64      	cmp	r3, #100	; 0x64
 8007c7e:	d901      	bls.n	8007c84 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8007c80:	2303      	movs	r3, #3
 8007c82:	e1c7      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c84:	4b57      	ldr	r3, [pc, #348]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1f0      	bne.n	8007c72 <HAL_RCC_OscConfig+0xfe>
 8007c90:	e000      	b.n	8007c94 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c92:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d06f      	beq.n	8007d80 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007ca0:	4b50      	ldr	r3, [pc, #320]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	f003 030c 	and.w	r3, r3, #12
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d017      	beq.n	8007cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cac:	4b4d      	ldr	r3, [pc, #308]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007cae:	689b      	ldr	r3, [r3, #8]
 8007cb0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007cb4:	2b08      	cmp	r3, #8
 8007cb6:	d105      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007cb8:	4b4a      	ldr	r3, [pc, #296]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00b      	beq.n	8007cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cc4:	4b47      	ldr	r3, [pc, #284]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007ccc:	2b0c      	cmp	r3, #12
 8007cce:	d11c      	bne.n	8007d0a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007cd0:	4b44      	ldr	r3, [pc, #272]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d116      	bne.n	8007d0a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007cdc:	4b41      	ldr	r3, [pc, #260]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d005      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x180>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d001      	beq.n	8007cf4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e18f      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cf4:	4b3b      	ldr	r3, [pc, #236]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	691b      	ldr	r3, [r3, #16]
 8007d00:	00db      	lsls	r3, r3, #3
 8007d02:	4938      	ldr	r1, [pc, #224]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d08:	e03a      	b.n	8007d80 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d020      	beq.n	8007d54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d12:	4b35      	ldr	r3, [pc, #212]	; (8007de8 <HAL_RCC_OscConfig+0x274>)
 8007d14:	2201      	movs	r2, #1
 8007d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d18:	f7fd fec4 	bl	8005aa4 <HAL_GetTick>
 8007d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d1e:	e008      	b.n	8007d32 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d20:	f7fd fec0 	bl	8005aa4 <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d901      	bls.n	8007d32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e170      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d32:	4b2c      	ldr	r3, [pc, #176]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0f0      	beq.n	8007d20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d3e:	4b29      	ldr	r3, [pc, #164]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	00db      	lsls	r3, r3, #3
 8007d4c:	4925      	ldr	r1, [pc, #148]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	600b      	str	r3, [r1, #0]
 8007d52:	e015      	b.n	8007d80 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d54:	4b24      	ldr	r3, [pc, #144]	; (8007de8 <HAL_RCC_OscConfig+0x274>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d5a:	f7fd fea3 	bl	8005aa4 <HAL_GetTick>
 8007d5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d60:	e008      	b.n	8007d74 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007d62:	f7fd fe9f 	bl	8005aa4 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d901      	bls.n	8007d74 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e14f      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007d74:	4b1b      	ldr	r3, [pc, #108]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1f0      	bne.n	8007d62 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0308 	and.w	r3, r3, #8
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d037      	beq.n	8007dfc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d016      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d94:	4b15      	ldr	r3, [pc, #84]	; (8007dec <HAL_RCC_OscConfig+0x278>)
 8007d96:	2201      	movs	r2, #1
 8007d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d9a:	f7fd fe83 	bl	8005aa4 <HAL_GetTick>
 8007d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007da0:	e008      	b.n	8007db4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007da2:	f7fd fe7f 	bl	8005aa4 <HAL_GetTick>
 8007da6:	4602      	mov	r2, r0
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	1ad3      	subs	r3, r2, r3
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d901      	bls.n	8007db4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e12f      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007db4:	4b0b      	ldr	r3, [pc, #44]	; (8007de4 <HAL_RCC_OscConfig+0x270>)
 8007db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db8:	f003 0302 	and.w	r3, r3, #2
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d0f0      	beq.n	8007da2 <HAL_RCC_OscConfig+0x22e>
 8007dc0:	e01c      	b.n	8007dfc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <HAL_RCC_OscConfig+0x278>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc8:	f7fd fe6c 	bl	8005aa4 <HAL_GetTick>
 8007dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007dce:	e00f      	b.n	8007df0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dd0:	f7fd fe68 	bl	8005aa4 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d908      	bls.n	8007df0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e118      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
 8007de2:	bf00      	nop
 8007de4:	40023800 	.word	0x40023800
 8007de8:	42470000 	.word	0x42470000
 8007dec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007df0:	4b8a      	ldr	r3, [pc, #552]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007df2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d1e9      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0304 	and.w	r3, r3, #4
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	f000 8097 	beq.w	8007f38 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e0e:	4b83      	ldr	r3, [pc, #524]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10f      	bne.n	8007e3a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	4b7f      	ldr	r3, [pc, #508]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	4a7e      	ldr	r2, [pc, #504]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007e24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e28:	6413      	str	r3, [r2, #64]	; 0x40
 8007e2a:	4b7c      	ldr	r3, [pc, #496]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007e36:	2301      	movs	r3, #1
 8007e38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e3a:	4b79      	ldr	r3, [pc, #484]	; (8008020 <HAL_RCC_OscConfig+0x4ac>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d118      	bne.n	8007e78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007e46:	4b76      	ldr	r3, [pc, #472]	; (8008020 <HAL_RCC_OscConfig+0x4ac>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a75      	ldr	r2, [pc, #468]	; (8008020 <HAL_RCC_OscConfig+0x4ac>)
 8007e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007e52:	f7fd fe27 	bl	8005aa4 <HAL_GetTick>
 8007e56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e58:	e008      	b.n	8007e6c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e5a:	f7fd fe23 	bl	8005aa4 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	2b02      	cmp	r3, #2
 8007e66:	d901      	bls.n	8007e6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e0d3      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007e6c:	4b6c      	ldr	r3, [pc, #432]	; (8008020 <HAL_RCC_OscConfig+0x4ac>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0f0      	beq.n	8007e5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d106      	bne.n	8007e8e <HAL_RCC_OscConfig+0x31a>
 8007e80:	4b66      	ldr	r3, [pc, #408]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e84:	4a65      	ldr	r2, [pc, #404]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007e86:	f043 0301 	orr.w	r3, r3, #1
 8007e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8007e8c:	e01c      	b.n	8007ec8 <HAL_RCC_OscConfig+0x354>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	d10c      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x33c>
 8007e96:	4b61      	ldr	r3, [pc, #388]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9a:	4a60      	ldr	r2, [pc, #384]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007e9c:	f043 0304 	orr.w	r3, r3, #4
 8007ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ea2:	4b5e      	ldr	r3, [pc, #376]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ea6:	4a5d      	ldr	r2, [pc, #372]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007ea8:	f043 0301 	orr.w	r3, r3, #1
 8007eac:	6713      	str	r3, [r2, #112]	; 0x70
 8007eae:	e00b      	b.n	8007ec8 <HAL_RCC_OscConfig+0x354>
 8007eb0:	4b5a      	ldr	r3, [pc, #360]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eb4:	4a59      	ldr	r2, [pc, #356]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007eb6:	f023 0301 	bic.w	r3, r3, #1
 8007eba:	6713      	str	r3, [r2, #112]	; 0x70
 8007ebc:	4b57      	ldr	r3, [pc, #348]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec0:	4a56      	ldr	r2, [pc, #344]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007ec2:	f023 0304 	bic.w	r3, r3, #4
 8007ec6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d015      	beq.n	8007efc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ed0:	f7fd fde8 	bl	8005aa4 <HAL_GetTick>
 8007ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ed6:	e00a      	b.n	8007eee <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ed8:	f7fd fde4 	bl	8005aa4 <HAL_GetTick>
 8007edc:	4602      	mov	r2, r0
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d901      	bls.n	8007eee <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e092      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007eee:	4b4b      	ldr	r3, [pc, #300]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0ee      	beq.n	8007ed8 <HAL_RCC_OscConfig+0x364>
 8007efa:	e014      	b.n	8007f26 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007efc:	f7fd fdd2 	bl	8005aa4 <HAL_GetTick>
 8007f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f02:	e00a      	b.n	8007f1a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f04:	f7fd fdce 	bl	8005aa4 <HAL_GetTick>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	1ad3      	subs	r3, r2, r3
 8007f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d901      	bls.n	8007f1a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8007f16:	2303      	movs	r3, #3
 8007f18:	e07c      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f1a:	4b40      	ldr	r3, [pc, #256]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f1e:	f003 0302 	and.w	r3, r3, #2
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d1ee      	bne.n	8007f04 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d105      	bne.n	8007f38 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f2c:	4b3b      	ldr	r3, [pc, #236]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f30:	4a3a      	ldr	r2, [pc, #232]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d068      	beq.n	8008012 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007f40:	4b36      	ldr	r3, [pc, #216]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f003 030c 	and.w	r3, r3, #12
 8007f48:	2b08      	cmp	r3, #8
 8007f4a:	d060      	beq.n	800800e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	699b      	ldr	r3, [r3, #24]
 8007f50:	2b02      	cmp	r3, #2
 8007f52:	d145      	bne.n	8007fe0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f54:	4b33      	ldr	r3, [pc, #204]	; (8008024 <HAL_RCC_OscConfig+0x4b0>)
 8007f56:	2200      	movs	r2, #0
 8007f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f5a:	f7fd fda3 	bl	8005aa4 <HAL_GetTick>
 8007f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f60:	e008      	b.n	8007f74 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f62:	f7fd fd9f 	bl	8005aa4 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d901      	bls.n	8007f74 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e04f      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f74:	4b29      	ldr	r3, [pc, #164]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1f0      	bne.n	8007f62 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	69da      	ldr	r2, [r3, #28]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	431a      	orrs	r2, r3
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8e:	019b      	lsls	r3, r3, #6
 8007f90:	431a      	orrs	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f96:	085b      	lsrs	r3, r3, #1
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	041b      	lsls	r3, r3, #16
 8007f9c:	431a      	orrs	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	061b      	lsls	r3, r3, #24
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007faa:	071b      	lsls	r3, r3, #28
 8007fac:	491b      	ldr	r1, [pc, #108]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007fb2:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <HAL_RCC_OscConfig+0x4b0>)
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb8:	f7fd fd74 	bl	8005aa4 <HAL_GetTick>
 8007fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fbe:	e008      	b.n	8007fd2 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fc0:	f7fd fd70 	bl	8005aa4 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	2b02      	cmp	r3, #2
 8007fcc:	d901      	bls.n	8007fd2 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007fce:	2303      	movs	r3, #3
 8007fd0:	e020      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fd2:	4b12      	ldr	r3, [pc, #72]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d0f0      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x44c>
 8007fde:	e018      	b.n	8008012 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fe0:	4b10      	ldr	r3, [pc, #64]	; (8008024 <HAL_RCC_OscConfig+0x4b0>)
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe6:	f7fd fd5d 	bl	8005aa4 <HAL_GetTick>
 8007fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007fec:	e008      	b.n	8008000 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007fee:	f7fd fd59 	bl	8005aa4 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d901      	bls.n	8008000 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e009      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008000:	4b06      	ldr	r3, [pc, #24]	; (800801c <HAL_RCC_OscConfig+0x4a8>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1f0      	bne.n	8007fee <HAL_RCC_OscConfig+0x47a>
 800800c:	e001      	b.n	8008012 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8008012:	2300      	movs	r3, #0
}
 8008014:	4618      	mov	r0, r3
 8008016:	3718      	adds	r7, #24
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	40023800 	.word	0x40023800
 8008020:	40007000 	.word	0x40007000
 8008024:	42470060 	.word	0x42470060

08008028 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e056      	b.n	80080e8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b00      	cmp	r3, #0
 800804a:	d106      	bne.n	800805a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7fc fea9 	bl	8004dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2202      	movs	r2, #2
 800805e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008070:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	431a      	orrs	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	431a      	orrs	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	431a      	orrs	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	431a      	orrs	r2, r3
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	699b      	ldr	r3, [r3, #24]
 8008092:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008096:	431a      	orrs	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	69db      	ldr	r3, [r3, #28]
 800809c:	431a      	orrs	r2, r3
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6a1b      	ldr	r3, [r3, #32]
 80080a2:	ea42 0103 	orr.w	r1, r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	430a      	orrs	r2, r1
 80080b0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	0c1b      	lsrs	r3, r3, #16
 80080b8:	f003 0104 	and.w	r1, r3, #4
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	69da      	ldr	r2, [r3, #28]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08c      	sub	sp, #48	; 0x30
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
 80080fc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80080fe:	2301      	movs	r3, #1
 8008100:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008102:	2300      	movs	r3, #0
 8008104:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_SPI_TransmitReceive+0x26>
 8008112:	2302      	movs	r3, #2
 8008114:	e18a      	b.n	800842c <HAL_SPI_TransmitReceive+0x33c>
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800811e:	f7fd fcc1 	bl	8005aa4 <HAL_GetTick>
 8008122:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800812a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008134:	887b      	ldrh	r3, [r7, #2]
 8008136:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800813c:	2b01      	cmp	r3, #1
 800813e:	d00f      	beq.n	8008160 <HAL_SPI_TransmitReceive+0x70>
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008146:	d107      	bne.n	8008158 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d103      	bne.n	8008158 <HAL_SPI_TransmitReceive+0x68>
 8008150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008154:	2b04      	cmp	r3, #4
 8008156:	d003      	beq.n	8008160 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008158:	2302      	movs	r3, #2
 800815a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800815e:	e15b      	b.n	8008418 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d005      	beq.n	8008172 <HAL_SPI_TransmitReceive+0x82>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <HAL_SPI_TransmitReceive+0x82>
 800816c:	887b      	ldrh	r3, [r7, #2]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d103      	bne.n	800817a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008178:	e14e      	b.n	8008418 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b04      	cmp	r3, #4
 8008184:	d003      	beq.n	800818e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2205      	movs	r2, #5
 800818a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	887a      	ldrh	r2, [r7, #2]
 800819e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	887a      	ldrh	r2, [r7, #2]
 80081a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	887a      	ldrh	r2, [r7, #2]
 80081b0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	887a      	ldrh	r2, [r7, #2]
 80081b6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ce:	2b40      	cmp	r3, #64	; 0x40
 80081d0:	d007      	beq.n	80081e2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ea:	d178      	bne.n	80082de <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d002      	beq.n	80081fa <HAL_SPI_TransmitReceive+0x10a>
 80081f4:	8b7b      	ldrh	r3, [r7, #26]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d166      	bne.n	80082c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fe:	881a      	ldrh	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820a:	1c9a      	adds	r2, r3, #2
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008214:	b29b      	uxth	r3, r3
 8008216:	3b01      	subs	r3, #1
 8008218:	b29a      	uxth	r2, r3
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800821e:	e053      	b.n	80082c8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	f003 0302 	and.w	r3, r3, #2
 800822a:	2b02      	cmp	r3, #2
 800822c:	d11b      	bne.n	8008266 <HAL_SPI_TransmitReceive+0x176>
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008232:	b29b      	uxth	r3, r3
 8008234:	2b00      	cmp	r3, #0
 8008236:	d016      	beq.n	8008266 <HAL_SPI_TransmitReceive+0x176>
 8008238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823a:	2b01      	cmp	r3, #1
 800823c:	d113      	bne.n	8008266 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008242:	881a      	ldrh	r2, [r3, #0]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824e:	1c9a      	adds	r2, r3, #2
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008258:	b29b      	uxth	r3, r3
 800825a:	3b01      	subs	r3, #1
 800825c:	b29a      	uxth	r2, r3
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008262:	2300      	movs	r3, #0
 8008264:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	f003 0301 	and.w	r3, r3, #1
 8008270:	2b01      	cmp	r3, #1
 8008272:	d119      	bne.n	80082a8 <HAL_SPI_TransmitReceive+0x1b8>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008278:	b29b      	uxth	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d014      	beq.n	80082a8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008288:	b292      	uxth	r2, r2
 800828a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008290:	1c9a      	adds	r2, r3, #2
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800829a:	b29b      	uxth	r3, r3
 800829c:	3b01      	subs	r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082a4:	2301      	movs	r3, #1
 80082a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80082a8:	f7fd fbfc 	bl	8005aa4 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d807      	bhi.n	80082c8 <HAL_SPI_TransmitReceive+0x1d8>
 80082b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082be:	d003      	beq.n	80082c8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80082c6:	e0a7      	b.n	8008418 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d1a6      	bne.n	8008220 <HAL_SPI_TransmitReceive+0x130>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d1a1      	bne.n	8008220 <HAL_SPI_TransmitReceive+0x130>
 80082dc:	e07c      	b.n	80083d8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d002      	beq.n	80082ec <HAL_SPI_TransmitReceive+0x1fc>
 80082e6:	8b7b      	ldrh	r3, [r7, #26]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	d16b      	bne.n	80083c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	330c      	adds	r3, #12
 80082f6:	7812      	ldrb	r2, [r2, #0]
 80082f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008308:	b29b      	uxth	r3, r3
 800830a:	3b01      	subs	r3, #1
 800830c:	b29a      	uxth	r2, r3
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008312:	e057      	b.n	80083c4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f003 0302 	and.w	r3, r3, #2
 800831e:	2b02      	cmp	r3, #2
 8008320:	d11c      	bne.n	800835c <HAL_SPI_TransmitReceive+0x26c>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008326:	b29b      	uxth	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	d017      	beq.n	800835c <HAL_SPI_TransmitReceive+0x26c>
 800832c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832e:	2b01      	cmp	r3, #1
 8008330:	d114      	bne.n	800835c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	330c      	adds	r3, #12
 800833c:	7812      	ldrb	r2, [r2, #0]
 800833e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008344:	1c5a      	adds	r2, r3, #1
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800834e:	b29b      	uxth	r3, r3
 8008350:	3b01      	subs	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	2b01      	cmp	r3, #1
 8008368:	d119      	bne.n	800839e <HAL_SPI_TransmitReceive+0x2ae>
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d014      	beq.n	800839e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68da      	ldr	r2, [r3, #12]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008390:	b29b      	uxth	r3, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	b29a      	uxth	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800839a:	2301      	movs	r3, #1
 800839c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800839e:	f7fd fb81 	bl	8005aa4 <HAL_GetTick>
 80083a2:	4602      	mov	r2, r0
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	1ad3      	subs	r3, r2, r3
 80083a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d803      	bhi.n	80083b6 <HAL_SPI_TransmitReceive+0x2c6>
 80083ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b4:	d102      	bne.n	80083bc <HAL_SPI_TransmitReceive+0x2cc>
 80083b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d103      	bne.n	80083c4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80083c2:	e029      	b.n	8008418 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d1a2      	bne.n	8008314 <HAL_SPI_TransmitReceive+0x224>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083d2:	b29b      	uxth	r3, r3
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d19d      	bne.n	8008314 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f000 f893 	bl	8008508 <SPI_EndRxTxTransaction>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d006      	beq.n	80083f6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2220      	movs	r2, #32
 80083f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80083f4:	e010      	b.n	8008418 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d10b      	bne.n	8008416 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083fe:	2300      	movs	r3, #0
 8008400:	617b      	str	r3, [r7, #20]
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	68db      	ldr	r3, [r3, #12]
 8008408:	617b      	str	r3, [r7, #20]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	617b      	str	r3, [r7, #20]
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	e000      	b.n	8008418 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008416:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008428:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800842c:	4618      	mov	r0, r3
 800842e:	3730      	adds	r7, #48	; 0x30
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	603b      	str	r3, [r7, #0]
 8008440:	4613      	mov	r3, r2
 8008442:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008444:	e04c      	b.n	80084e0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800844c:	d048      	beq.n	80084e0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800844e:	f7fd fb29 	bl	8005aa4 <HAL_GetTick>
 8008452:	4602      	mov	r2, r0
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	1ad3      	subs	r3, r2, r3
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	429a      	cmp	r2, r3
 800845c:	d902      	bls.n	8008464 <SPI_WaitFlagStateUntilTimeout+0x30>
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d13d      	bne.n	80084e0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008472:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800847c:	d111      	bne.n	80084a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008486:	d004      	beq.n	8008492 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008490:	d107      	bne.n	80084a2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	681a      	ldr	r2, [r3, #0]
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084aa:	d10f      	bne.n	80084cc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681a      	ldr	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2200      	movs	r2, #0
 80084d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80084dc:	2303      	movs	r3, #3
 80084de:	e00f      	b.n	8008500 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689a      	ldr	r2, [r3, #8]
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	4013      	ands	r3, r2
 80084ea:	68ba      	ldr	r2, [r7, #8]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	bf0c      	ite	eq
 80084f0:	2301      	moveq	r3, #1
 80084f2:	2300      	movne	r3, #0
 80084f4:	b2db      	uxtb	r3, r3
 80084f6:	461a      	mov	r2, r3
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d1a3      	bne.n	8008446 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3710      	adds	r7, #16
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af02      	add	r7, sp, #8
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008514:	4b1b      	ldr	r3, [pc, #108]	; (8008584 <SPI_EndRxTxTransaction+0x7c>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a1b      	ldr	r2, [pc, #108]	; (8008588 <SPI_EndRxTxTransaction+0x80>)
 800851a:	fba2 2303 	umull	r2, r3, r2, r3
 800851e:	0d5b      	lsrs	r3, r3, #21
 8008520:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008524:	fb02 f303 	mul.w	r3, r2, r3
 8008528:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008532:	d112      	bne.n	800855a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	9300      	str	r3, [sp, #0]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2200      	movs	r2, #0
 800853c:	2180      	movs	r1, #128	; 0x80
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f7ff ff78 	bl	8008434 <SPI_WaitFlagStateUntilTimeout>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d016      	beq.n	8008578 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800854e:	f043 0220 	orr.w	r2, r3, #32
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008556:	2303      	movs	r3, #3
 8008558:	e00f      	b.n	800857a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00a      	beq.n	8008576 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	3b01      	subs	r3, #1
 8008564:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008570:	2b80      	cmp	r3, #128	; 0x80
 8008572:	d0f2      	beq.n	800855a <SPI_EndRxTxTransaction+0x52>
 8008574:	e000      	b.n	8008578 <SPI_EndRxTxTransaction+0x70>
        break;
 8008576:	bf00      	nop
  }

  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3718      	adds	r7, #24
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	20000040 	.word	0x20000040
 8008588:	165e9f81 	.word	0x165e9f81

0800858c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e01d      	b.n	80085da <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a4:	b2db      	uxtb	r3, r3
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d106      	bne.n	80085b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7fd f8e6 	bl	8005784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3304      	adds	r3, #4
 80085c8:	4619      	mov	r1, r3
 80085ca:	4610      	mov	r0, r2
 80085cc:	f000 fb58 	bl	8008c80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}

080085e2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68da      	ldr	r2, [r3, #12]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f042 0201 	orr.w	r2, r2, #1
 80085f8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f003 0307 	and.w	r3, r3, #7
 8008604:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2b06      	cmp	r3, #6
 800860a:	d007      	beq.n	800861c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f042 0201 	orr.w	r2, r2, #1
 800861a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800861c:	2300      	movs	r3, #0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3714      	adds	r7, #20
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800862a:	b580      	push	{r7, lr}
 800862c:	b082      	sub	sp, #8
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e01d      	b.n	8008678 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008642:	b2db      	uxtb	r3, r3
 8008644:	2b00      	cmp	r3, #0
 8008646:	d106      	bne.n	8008656 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f815 	bl	8008680 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2202      	movs	r2, #2
 800865a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	3304      	adds	r3, #4
 8008666:	4619      	mov	r1, r3
 8008668:	4610      	mov	r0, r2
 800866a:	f000 fb09 	bl	8008c80 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b084      	sub	sp, #16
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	2201      	movs	r2, #1
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 fdd4 	bl	8009254 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a15      	ldr	r2, [pc, #84]	; (8008708 <HAL_TIM_PWM_Start+0x74>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d004      	beq.n	80086c0 <HAL_TIM_PWM_Start+0x2c>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a14      	ldr	r2, [pc, #80]	; (800870c <HAL_TIM_PWM_Start+0x78>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d101      	bne.n	80086c4 <HAL_TIM_PWM_Start+0x30>
 80086c0:	2301      	movs	r3, #1
 80086c2:	e000      	b.n	80086c6 <HAL_TIM_PWM_Start+0x32>
 80086c4:	2300      	movs	r3, #0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d007      	beq.n	80086da <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086d8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	f003 0307 	and.w	r3, r3, #7
 80086e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2b06      	cmp	r3, #6
 80086ea:	d007      	beq.n	80086fc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0201 	orr.w	r2, r2, #1
 80086fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	40010000 	.word	0x40010000
 800870c:	40010400 	.word	0x40010400

08008710 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b02      	cmp	r3, #2
 8008724:	d122      	bne.n	800876c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	f003 0302 	and.w	r3, r3, #2
 8008730:	2b02      	cmp	r3, #2
 8008732:	d11b      	bne.n	800876c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f06f 0202 	mvn.w	r2, #2
 800873c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	699b      	ldr	r3, [r3, #24]
 800874a:	f003 0303 	and.w	r3, r3, #3
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 fa75 	bl	8008c42 <HAL_TIM_IC_CaptureCallback>
 8008758:	e005      	b.n	8008766 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 fa67 	bl	8008c2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fa78 	bl	8008c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	f003 0304 	and.w	r3, r3, #4
 8008776:	2b04      	cmp	r3, #4
 8008778:	d122      	bne.n	80087c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	68db      	ldr	r3, [r3, #12]
 8008780:	f003 0304 	and.w	r3, r3, #4
 8008784:	2b04      	cmp	r3, #4
 8008786:	d11b      	bne.n	80087c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f06f 0204 	mvn.w	r2, #4
 8008790:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2202      	movs	r2, #2
 8008796:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	699b      	ldr	r3, [r3, #24]
 800879e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d003      	beq.n	80087ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fa4b 	bl	8008c42 <HAL_TIM_IC_CaptureCallback>
 80087ac:	e005      	b.n	80087ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 fa3d 	bl	8008c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 fa4e 	bl	8008c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	f003 0308 	and.w	r3, r3, #8
 80087ca:	2b08      	cmp	r3, #8
 80087cc:	d122      	bne.n	8008814 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	f003 0308 	and.w	r3, r3, #8
 80087d8:	2b08      	cmp	r3, #8
 80087da:	d11b      	bne.n	8008814 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f06f 0208 	mvn.w	r2, #8
 80087e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2204      	movs	r2, #4
 80087ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	69db      	ldr	r3, [r3, #28]
 80087f2:	f003 0303 	and.w	r3, r3, #3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 fa21 	bl	8008c42 <HAL_TIM_IC_CaptureCallback>
 8008800:	e005      	b.n	800880e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fa13 	bl	8008c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fa24 	bl	8008c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	f003 0310 	and.w	r3, r3, #16
 800881e:	2b10      	cmp	r3, #16
 8008820:	d122      	bne.n	8008868 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	f003 0310 	and.w	r3, r3, #16
 800882c:	2b10      	cmp	r3, #16
 800882e:	d11b      	bne.n	8008868 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f06f 0210 	mvn.w	r2, #16
 8008838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2208      	movs	r2, #8
 800883e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	69db      	ldr	r3, [r3, #28]
 8008846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800884a:	2b00      	cmp	r3, #0
 800884c:	d003      	beq.n	8008856 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f9f7 	bl	8008c42 <HAL_TIM_IC_CaptureCallback>
 8008854:	e005      	b.n	8008862 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f9e9 	bl	8008c2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f000 f9fa 	bl	8008c56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	691b      	ldr	r3, [r3, #16]
 800886e:	f003 0301 	and.w	r3, r3, #1
 8008872:	2b01      	cmp	r3, #1
 8008874:	d10e      	bne.n	8008894 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
 800887c:	f003 0301 	and.w	r3, r3, #1
 8008880:	2b01      	cmp	r3, #1
 8008882:	d107      	bne.n	8008894 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f06f 0201 	mvn.w	r2, #1
 800888c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f9c3 	bl	8008c1a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800889e:	2b80      	cmp	r3, #128	; 0x80
 80088a0:	d10e      	bne.n	80088c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ac:	2b80      	cmp	r3, #128	; 0x80
 80088ae:	d107      	bne.n	80088c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 fdc8 	bl	8009450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ca:	2b40      	cmp	r3, #64	; 0x40
 80088cc:	d10e      	bne.n	80088ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d8:	2b40      	cmp	r3, #64	; 0x40
 80088da:	d107      	bne.n	80088ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f9bf 	bl	8008c6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	f003 0320 	and.w	r3, r3, #32
 80088f6:	2b20      	cmp	r3, #32
 80088f8:	d10e      	bne.n	8008918 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f003 0320 	and.w	r3, r3, #32
 8008904:	2b20      	cmp	r3, #32
 8008906:	d107      	bne.n	8008918 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f06f 0220 	mvn.w	r2, #32
 8008910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 fd92 	bl	800943c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008918:	bf00      	nop
 800891a:	3708      	adds	r7, #8
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008932:	2b01      	cmp	r3, #1
 8008934:	d101      	bne.n	800893a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008936:	2302      	movs	r3, #2
 8008938:	e0b4      	b.n	8008aa4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2202      	movs	r2, #2
 8008946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b0c      	cmp	r3, #12
 800894e:	f200 809f 	bhi.w	8008a90 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008952:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008958:	0800898d 	.word	0x0800898d
 800895c:	08008a91 	.word	0x08008a91
 8008960:	08008a91 	.word	0x08008a91
 8008964:	08008a91 	.word	0x08008a91
 8008968:	080089cd 	.word	0x080089cd
 800896c:	08008a91 	.word	0x08008a91
 8008970:	08008a91 	.word	0x08008a91
 8008974:	08008a91 	.word	0x08008a91
 8008978:	08008a0f 	.word	0x08008a0f
 800897c:	08008a91 	.word	0x08008a91
 8008980:	08008a91 	.word	0x08008a91
 8008984:	08008a91 	.word	0x08008a91
 8008988:	08008a4f 	.word	0x08008a4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	68b9      	ldr	r1, [r7, #8]
 8008992:	4618      	mov	r0, r3
 8008994:	f000 fa14 	bl	8008dc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	699a      	ldr	r2, [r3, #24]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f042 0208 	orr.w	r2, r2, #8
 80089a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	699a      	ldr	r2, [r3, #24]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f022 0204 	bic.w	r2, r2, #4
 80089b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6999      	ldr	r1, [r3, #24]
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	619a      	str	r2, [r3, #24]
      break;
 80089ca:	e062      	b.n	8008a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	68b9      	ldr	r1, [r7, #8]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fa64 	bl	8008ea0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	699a      	ldr	r2, [r3, #24]
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	699a      	ldr	r2, [r3, #24]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6999      	ldr	r1, [r3, #24]
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	021a      	lsls	r2, r3, #8
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	619a      	str	r2, [r3, #24]
      break;
 8008a0c:	e041      	b.n	8008a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fab9 	bl	8008f8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	69da      	ldr	r2, [r3, #28]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f042 0208 	orr.w	r2, r2, #8
 8008a28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	69da      	ldr	r2, [r3, #28]
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 0204 	bic.w	r2, r2, #4
 8008a38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69d9      	ldr	r1, [r3, #28]
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	691a      	ldr	r2, [r3, #16]
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	61da      	str	r2, [r3, #28]
      break;
 8008a4c:	e021      	b.n	8008a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68b9      	ldr	r1, [r7, #8]
 8008a54:	4618      	mov	r0, r3
 8008a56:	f000 fb0d 	bl	8009074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69da      	ldr	r2, [r3, #28]
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	69da      	ldr	r2, [r3, #28]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	69d9      	ldr	r1, [r3, #28]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	021a      	lsls	r2, r3, #8
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	61da      	str	r2, [r3, #28]
      break;
 8008a8e:	e000      	b.n	8008a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008a90:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2201      	movs	r2, #1
 8008a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d101      	bne.n	8008ac4 <HAL_TIM_ConfigClockSource+0x18>
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	e0a6      	b.n	8008c12 <HAL_TIM_ConfigClockSource+0x166>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2202      	movs	r2, #2
 8008ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008ae2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008aea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b40      	cmp	r3, #64	; 0x40
 8008afa:	d067      	beq.n	8008bcc <HAL_TIM_ConfigClockSource+0x120>
 8008afc:	2b40      	cmp	r3, #64	; 0x40
 8008afe:	d80b      	bhi.n	8008b18 <HAL_TIM_ConfigClockSource+0x6c>
 8008b00:	2b10      	cmp	r3, #16
 8008b02:	d073      	beq.n	8008bec <HAL_TIM_ConfigClockSource+0x140>
 8008b04:	2b10      	cmp	r3, #16
 8008b06:	d802      	bhi.n	8008b0e <HAL_TIM_ConfigClockSource+0x62>
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d06f      	beq.n	8008bec <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008b0c:	e078      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008b0e:	2b20      	cmp	r3, #32
 8008b10:	d06c      	beq.n	8008bec <HAL_TIM_ConfigClockSource+0x140>
 8008b12:	2b30      	cmp	r3, #48	; 0x30
 8008b14:	d06a      	beq.n	8008bec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008b16:	e073      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008b18:	2b70      	cmp	r3, #112	; 0x70
 8008b1a:	d00d      	beq.n	8008b38 <HAL_TIM_ConfigClockSource+0x8c>
 8008b1c:	2b70      	cmp	r3, #112	; 0x70
 8008b1e:	d804      	bhi.n	8008b2a <HAL_TIM_ConfigClockSource+0x7e>
 8008b20:	2b50      	cmp	r3, #80	; 0x50
 8008b22:	d033      	beq.n	8008b8c <HAL_TIM_ConfigClockSource+0xe0>
 8008b24:	2b60      	cmp	r3, #96	; 0x60
 8008b26:	d041      	beq.n	8008bac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008b28:	e06a      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b2e:	d066      	beq.n	8008bfe <HAL_TIM_ConfigClockSource+0x152>
 8008b30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b34:	d017      	beq.n	8008b66 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008b36:	e063      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6818      	ldr	r0, [r3, #0]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	6899      	ldr	r1, [r3, #8]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f000 fb64 	bl	8009214 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	609a      	str	r2, [r3, #8]
      break;
 8008b64:	e04c      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6818      	ldr	r0, [r3, #0]
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6899      	ldr	r1, [r3, #8]
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f000 fb4d 	bl	8009214 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689a      	ldr	r2, [r3, #8]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b88:	609a      	str	r2, [r3, #8]
      break;
 8008b8a:	e039      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6818      	ldr	r0, [r3, #0]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	6859      	ldr	r1, [r3, #4]
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	68db      	ldr	r3, [r3, #12]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	f000 fac1 	bl	8009120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2150      	movs	r1, #80	; 0x50
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 fb1a 	bl	80091de <TIM_ITRx_SetConfig>
      break;
 8008baa:	e029      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6818      	ldr	r0, [r3, #0]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	6859      	ldr	r1, [r3, #4]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	f000 fae0 	bl	800917e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2160      	movs	r1, #96	; 0x60
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 fb0a 	bl	80091de <TIM_ITRx_SetConfig>
      break;
 8008bca:	e019      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6818      	ldr	r0, [r3, #0]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	6859      	ldr	r1, [r3, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	f000 faa1 	bl	8009120 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2140      	movs	r1, #64	; 0x40
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 fafa 	bl	80091de <TIM_ITRx_SetConfig>
      break;
 8008bea:	e009      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	4610      	mov	r0, r2
 8008bf8:	f000 faf1 	bl	80091de <TIM_ITRx_SetConfig>
      break;
 8008bfc:	e000      	b.n	8008c00 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008bfe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008c10:	2300      	movs	r3, #0
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b083      	sub	sp, #12
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008c22:	bf00      	nop
 8008c24:	370c      	adds	r7, #12
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr

08008c2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	b083      	sub	sp, #12
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c36:	bf00      	nop
 8008c38:	370c      	adds	r7, #12
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr

08008c42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c42:	b480      	push	{r7}
 8008c44:	b083      	sub	sp, #12
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c4a:	bf00      	nop
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr

08008c56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c5e:	bf00      	nop
 8008c60:	370c      	adds	r7, #12
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr

08008c6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b083      	sub	sp, #12
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c72:	bf00      	nop
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
	...

08008c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a40      	ldr	r2, [pc, #256]	; (8008d94 <TIM_Base_SetConfig+0x114>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d013      	beq.n	8008cc0 <TIM_Base_SetConfig+0x40>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9e:	d00f      	beq.n	8008cc0 <TIM_Base_SetConfig+0x40>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4a3d      	ldr	r2, [pc, #244]	; (8008d98 <TIM_Base_SetConfig+0x118>)
 8008ca4:	4293      	cmp	r3, r2
 8008ca6:	d00b      	beq.n	8008cc0 <TIM_Base_SetConfig+0x40>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a3c      	ldr	r2, [pc, #240]	; (8008d9c <TIM_Base_SetConfig+0x11c>)
 8008cac:	4293      	cmp	r3, r2
 8008cae:	d007      	beq.n	8008cc0 <TIM_Base_SetConfig+0x40>
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a3b      	ldr	r2, [pc, #236]	; (8008da0 <TIM_Base_SetConfig+0x120>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d003      	beq.n	8008cc0 <TIM_Base_SetConfig+0x40>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a3a      	ldr	r2, [pc, #232]	; (8008da4 <TIM_Base_SetConfig+0x124>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d108      	bne.n	8008cd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4a2f      	ldr	r2, [pc, #188]	; (8008d94 <TIM_Base_SetConfig+0x114>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d02b      	beq.n	8008d32 <TIM_Base_SetConfig+0xb2>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce0:	d027      	beq.n	8008d32 <TIM_Base_SetConfig+0xb2>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a2c      	ldr	r2, [pc, #176]	; (8008d98 <TIM_Base_SetConfig+0x118>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d023      	beq.n	8008d32 <TIM_Base_SetConfig+0xb2>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	4a2b      	ldr	r2, [pc, #172]	; (8008d9c <TIM_Base_SetConfig+0x11c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d01f      	beq.n	8008d32 <TIM_Base_SetConfig+0xb2>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	4a2a      	ldr	r2, [pc, #168]	; (8008da0 <TIM_Base_SetConfig+0x120>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d01b      	beq.n	8008d32 <TIM_Base_SetConfig+0xb2>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	4a29      	ldr	r2, [pc, #164]	; (8008da4 <TIM_Base_SetConfig+0x124>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d017      	beq.n	8008d32 <TIM_Base_SetConfig+0xb2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	4a28      	ldr	r2, [pc, #160]	; (8008da8 <TIM_Base_SetConfig+0x128>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d013      	beq.n	8008d32 <TIM_Base_SetConfig+0xb2>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4a27      	ldr	r2, [pc, #156]	; (8008dac <TIM_Base_SetConfig+0x12c>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d00f      	beq.n	8008d32 <TIM_Base_SetConfig+0xb2>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	4a26      	ldr	r2, [pc, #152]	; (8008db0 <TIM_Base_SetConfig+0x130>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d00b      	beq.n	8008d32 <TIM_Base_SetConfig+0xb2>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4a25      	ldr	r2, [pc, #148]	; (8008db4 <TIM_Base_SetConfig+0x134>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d007      	beq.n	8008d32 <TIM_Base_SetConfig+0xb2>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	4a24      	ldr	r2, [pc, #144]	; (8008db8 <TIM_Base_SetConfig+0x138>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d003      	beq.n	8008d32 <TIM_Base_SetConfig+0xb2>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	4a23      	ldr	r2, [pc, #140]	; (8008dbc <TIM_Base_SetConfig+0x13c>)
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	d108      	bne.n	8008d44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	695b      	ldr	r3, [r3, #20]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	689a      	ldr	r2, [r3, #8]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	4a0a      	ldr	r2, [pc, #40]	; (8008d94 <TIM_Base_SetConfig+0x114>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d003      	beq.n	8008d78 <TIM_Base_SetConfig+0xf8>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	4a0c      	ldr	r2, [pc, #48]	; (8008da4 <TIM_Base_SetConfig+0x124>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d103      	bne.n	8008d80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	691a      	ldr	r2, [r3, #16]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	615a      	str	r2, [r3, #20]
}
 8008d86:	bf00      	nop
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	40010000 	.word	0x40010000
 8008d98:	40000400 	.word	0x40000400
 8008d9c:	40000800 	.word	0x40000800
 8008da0:	40000c00 	.word	0x40000c00
 8008da4:	40010400 	.word	0x40010400
 8008da8:	40014000 	.word	0x40014000
 8008dac:	40014400 	.word	0x40014400
 8008db0:	40014800 	.word	0x40014800
 8008db4:	40001800 	.word	0x40001800
 8008db8:	40001c00 	.word	0x40001c00
 8008dbc:	40002000 	.word	0x40002000

08008dc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b087      	sub	sp, #28
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	f023 0201 	bic.w	r2, r3, #1
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	699b      	ldr	r3, [r3, #24]
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f023 0303 	bic.w	r3, r3, #3
 8008df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	f023 0302 	bic.w	r3, r3, #2
 8008e08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	697a      	ldr	r2, [r7, #20]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a20      	ldr	r2, [pc, #128]	; (8008e98 <TIM_OC1_SetConfig+0xd8>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d003      	beq.n	8008e24 <TIM_OC1_SetConfig+0x64>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a1f      	ldr	r2, [pc, #124]	; (8008e9c <TIM_OC1_SetConfig+0xdc>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d10c      	bne.n	8008e3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	f023 0308 	bic.w	r3, r3, #8
 8008e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	f023 0304 	bic.w	r3, r3, #4
 8008e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a15      	ldr	r2, [pc, #84]	; (8008e98 <TIM_OC1_SetConfig+0xd8>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d003      	beq.n	8008e4e <TIM_OC1_SetConfig+0x8e>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a14      	ldr	r2, [pc, #80]	; (8008e9c <TIM_OC1_SetConfig+0xdc>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d111      	bne.n	8008e72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	695b      	ldr	r3, [r3, #20]
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	699b      	ldr	r3, [r3, #24]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	68fa      	ldr	r2, [r7, #12]
 8008e7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685a      	ldr	r2, [r3, #4]
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	621a      	str	r2, [r3, #32]
}
 8008e8c:	bf00      	nop
 8008e8e:	371c      	adds	r7, #28
 8008e90:	46bd      	mov	sp, r7
 8008e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e96:	4770      	bx	lr
 8008e98:	40010000 	.word	0x40010000
 8008e9c:	40010400 	.word	0x40010400

08008ea0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b087      	sub	sp, #28
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a1b      	ldr	r3, [r3, #32]
 8008eae:	f023 0210 	bic.w	r2, r3, #16
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6a1b      	ldr	r3, [r3, #32]
 8008eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	699b      	ldr	r3, [r3, #24]
 8008ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	021b      	lsls	r3, r3, #8
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f023 0320 	bic.w	r3, r3, #32
 8008eea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	689b      	ldr	r3, [r3, #8]
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	4a22      	ldr	r2, [pc, #136]	; (8008f84 <TIM_OC2_SetConfig+0xe4>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d003      	beq.n	8008f08 <TIM_OC2_SetConfig+0x68>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a21      	ldr	r2, [pc, #132]	; (8008f88 <TIM_OC2_SetConfig+0xe8>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d10d      	bne.n	8008f24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	68db      	ldr	r3, [r3, #12]
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a17      	ldr	r2, [pc, #92]	; (8008f84 <TIM_OC2_SetConfig+0xe4>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d003      	beq.n	8008f34 <TIM_OC2_SetConfig+0x94>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a16      	ldr	r2, [pc, #88]	; (8008f88 <TIM_OC2_SetConfig+0xe8>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d113      	bne.n	8008f5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	695b      	ldr	r3, [r3, #20]
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	699b      	ldr	r3, [r3, #24]
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	693a      	ldr	r2, [r7, #16]
 8008f60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	621a      	str	r2, [r3, #32]
}
 8008f76:	bf00      	nop
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	40010000 	.word	0x40010000
 8008f88:	40010400 	.word	0x40010400

08008f8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b087      	sub	sp, #28
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f023 0303 	bic.w	r3, r3, #3
 8008fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	021b      	lsls	r3, r3, #8
 8008fdc:	697a      	ldr	r2, [r7, #20]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a21      	ldr	r2, [pc, #132]	; (800906c <TIM_OC3_SetConfig+0xe0>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d003      	beq.n	8008ff2 <TIM_OC3_SetConfig+0x66>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a20      	ldr	r2, [pc, #128]	; (8009070 <TIM_OC3_SetConfig+0xe4>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d10d      	bne.n	800900e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	021b      	lsls	r3, r3, #8
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	4313      	orrs	r3, r2
 8009004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009006:	697b      	ldr	r3, [r7, #20]
 8009008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800900c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	4a16      	ldr	r2, [pc, #88]	; (800906c <TIM_OC3_SetConfig+0xe0>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d003      	beq.n	800901e <TIM_OC3_SetConfig+0x92>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a15      	ldr	r2, [pc, #84]	; (8009070 <TIM_OC3_SetConfig+0xe4>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d113      	bne.n	8009046 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009024:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800902c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	011b      	lsls	r3, r3, #4
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	4313      	orrs	r3, r2
 8009038:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	011b      	lsls	r3, r3, #4
 8009040:	693a      	ldr	r2, [r7, #16]
 8009042:	4313      	orrs	r3, r2
 8009044:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	693a      	ldr	r2, [r7, #16]
 800904a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	621a      	str	r2, [r3, #32]
}
 8009060:	bf00      	nop
 8009062:	371c      	adds	r7, #28
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr
 800906c:	40010000 	.word	0x40010000
 8009070:	40010400 	.word	0x40010400

08009074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a1b      	ldr	r3, [r3, #32]
 8009082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	021b      	lsls	r3, r3, #8
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	4313      	orrs	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	689b      	ldr	r3, [r3, #8]
 80090c4:	031b      	lsls	r3, r3, #12
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a12      	ldr	r2, [pc, #72]	; (8009118 <TIM_OC4_SetConfig+0xa4>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d003      	beq.n	80090dc <TIM_OC4_SetConfig+0x68>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a11      	ldr	r2, [pc, #68]	; (800911c <TIM_OC4_SetConfig+0xa8>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d109      	bne.n	80090f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	695b      	ldr	r3, [r3, #20]
 80090e8:	019b      	lsls	r3, r3, #6
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	697a      	ldr	r2, [r7, #20]
 80090f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	685a      	ldr	r2, [r3, #4]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	693a      	ldr	r2, [r7, #16]
 8009108:	621a      	str	r2, [r3, #32]
}
 800910a:	bf00      	nop
 800910c:	371c      	adds	r7, #28
 800910e:	46bd      	mov	sp, r7
 8009110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009114:	4770      	bx	lr
 8009116:	bf00      	nop
 8009118:	40010000 	.word	0x40010000
 800911c:	40010400 	.word	0x40010400

08009120 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009120:	b480      	push	{r7}
 8009122:	b087      	sub	sp, #28
 8009124:	af00      	add	r7, sp, #0
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6a1b      	ldr	r3, [r3, #32]
 8009130:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	f023 0201 	bic.w	r2, r3, #1
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800914a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	011b      	lsls	r3, r3, #4
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	4313      	orrs	r3, r2
 8009154:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f023 030a 	bic.w	r3, r3, #10
 800915c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800915e:	697a      	ldr	r2, [r7, #20]
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	4313      	orrs	r3, r2
 8009164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	693a      	ldr	r2, [r7, #16]
 800916a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	621a      	str	r2, [r3, #32]
}
 8009172:	bf00      	nop
 8009174:	371c      	adds	r7, #28
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800917e:	b480      	push	{r7}
 8009180:	b087      	sub	sp, #28
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	60b9      	str	r1, [r7, #8]
 8009188:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	f023 0210 	bic.w	r2, r3, #16
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	699b      	ldr	r3, [r3, #24]
 800919a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	6a1b      	ldr	r3, [r3, #32]
 80091a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	031b      	lsls	r3, r3, #12
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	011b      	lsls	r3, r3, #4
 80091c0:	693a      	ldr	r2, [r7, #16]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	697a      	ldr	r2, [r7, #20]
 80091ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	693a      	ldr	r2, [r7, #16]
 80091d0:	621a      	str	r2, [r3, #32]
}
 80091d2:	bf00      	nop
 80091d4:	371c      	adds	r7, #28
 80091d6:	46bd      	mov	sp, r7
 80091d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091dc:	4770      	bx	lr

080091de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091de:	b480      	push	{r7}
 80091e0:	b085      	sub	sp, #20
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	f043 0307 	orr.w	r3, r3, #7
 8009200:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	609a      	str	r2, [r3, #8]
}
 8009208:	bf00      	nop
 800920a:	3714      	adds	r7, #20
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800922e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	021a      	lsls	r2, r3, #8
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	431a      	orrs	r2, r3
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	4313      	orrs	r3, r2
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	4313      	orrs	r3, r2
 8009240:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	609a      	str	r2, [r3, #8]
}
 8009248:	bf00      	nop
 800924a:	371c      	adds	r7, #28
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009254:	b480      	push	{r7}
 8009256:	b087      	sub	sp, #28
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	f003 031f 	and.w	r3, r3, #31
 8009266:	2201      	movs	r2, #1
 8009268:	fa02 f303 	lsl.w	r3, r2, r3
 800926c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	6a1a      	ldr	r2, [r3, #32]
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	43db      	mvns	r3, r3
 8009276:	401a      	ands	r2, r3
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6a1a      	ldr	r2, [r3, #32]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f003 031f 	and.w	r3, r3, #31
 8009286:	6879      	ldr	r1, [r7, #4]
 8009288:	fa01 f303 	lsl.w	r3, r1, r3
 800928c:	431a      	orrs	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	621a      	str	r2, [r3, #32]
}
 8009292:	bf00      	nop
 8009294:	371c      	adds	r7, #28
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr
	...

080092a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d101      	bne.n	80092b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092b4:	2302      	movs	r3, #2
 80092b6:	e05a      	b.n	800936e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	4313      	orrs	r3, r2
 80092e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a21      	ldr	r2, [pc, #132]	; (800937c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d022      	beq.n	8009342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009304:	d01d      	beq.n	8009342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a1d      	ldr	r2, [pc, #116]	; (8009380 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d018      	beq.n	8009342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a1b      	ldr	r2, [pc, #108]	; (8009384 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d013      	beq.n	8009342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a1a      	ldr	r2, [pc, #104]	; (8009388 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d00e      	beq.n	8009342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a18      	ldr	r2, [pc, #96]	; (800938c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d009      	beq.n	8009342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a17      	ldr	r2, [pc, #92]	; (8009390 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d004      	beq.n	8009342 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a15      	ldr	r2, [pc, #84]	; (8009394 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d10c      	bne.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009348:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	68ba      	ldr	r2, [r7, #8]
 8009350:	4313      	orrs	r3, r2
 8009352:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	3714      	adds	r7, #20
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop
 800937c:	40010000 	.word	0x40010000
 8009380:	40000400 	.word	0x40000400
 8009384:	40000800 	.word	0x40000800
 8009388:	40000c00 	.word	0x40000c00
 800938c:	40010400 	.word	0x40010400
 8009390:	40014000 	.word	0x40014000
 8009394:	40001800 	.word	0x40001800

08009398 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d101      	bne.n	80093b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80093b0:	2302      	movs	r3, #2
 80093b2:	e03d      	b.n	8009430 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	4313      	orrs	r3, r2
 8009400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	695b      	ldr	r3, [r3, #20]
 800940c:	4313      	orrs	r3, r2
 800940e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	4618      	mov	r0, r3
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr

0800943c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e03f      	b.n	80094f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b00      	cmp	r3, #0
 8009480:	d106      	bne.n	8009490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7fc fa06 	bl	800589c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2224      	movs	r2, #36	; 0x24
 8009494:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fb97 	bl	8009bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	695a      	ldr	r2, [r3, #20]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68da      	ldr	r2, [r3, #12]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2220      	movs	r2, #32
 80094e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2220      	movs	r2, #32
 80094f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3708      	adds	r7, #8
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b088      	sub	sp, #32
 8009502:	af02      	add	r7, sp, #8
 8009504:	60f8      	str	r0, [r7, #12]
 8009506:	60b9      	str	r1, [r7, #8]
 8009508:	603b      	str	r3, [r7, #0]
 800950a:	4613      	mov	r3, r2
 800950c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b20      	cmp	r3, #32
 800951c:	f040 8083 	bne.w	8009626 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d002      	beq.n	800952c <HAL_UART_Transmit+0x2e>
 8009526:	88fb      	ldrh	r3, [r7, #6]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d101      	bne.n	8009530 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800952c:	2301      	movs	r3, #1
 800952e:	e07b      	b.n	8009628 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009536:	2b01      	cmp	r3, #1
 8009538:	d101      	bne.n	800953e <HAL_UART_Transmit+0x40>
 800953a:	2302      	movs	r3, #2
 800953c:	e074      	b.n	8009628 <HAL_UART_Transmit+0x12a>
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2221      	movs	r2, #33	; 0x21
 8009550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009554:	f7fc faa6 	bl	8005aa4 <HAL_GetTick>
 8009558:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	88fa      	ldrh	r2, [r7, #6]
 800955e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	88fa      	ldrh	r2, [r7, #6]
 8009564:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800956e:	e042      	b.n	80095f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009574:	b29b      	uxth	r3, r3
 8009576:	3b01      	subs	r3, #1
 8009578:	b29a      	uxth	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009586:	d122      	bne.n	80095ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	9300      	str	r3, [sp, #0]
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2200      	movs	r2, #0
 8009590:	2180      	movs	r1, #128	; 0x80
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 f9b6 	bl	8009904 <UART_WaitOnFlagUntilTimeout>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d001      	beq.n	80095a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800959e:	2303      	movs	r3, #3
 80095a0:	e042      	b.n	8009628 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	881b      	ldrh	r3, [r3, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	691b      	ldr	r3, [r3, #16]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d103      	bne.n	80095c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	3302      	adds	r3, #2
 80095c2:	60bb      	str	r3, [r7, #8]
 80095c4:	e017      	b.n	80095f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	3301      	adds	r3, #1
 80095ca:	60bb      	str	r3, [r7, #8]
 80095cc:	e013      	b.n	80095f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2200      	movs	r2, #0
 80095d6:	2180      	movs	r1, #128	; 0x80
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f000 f993 	bl	8009904 <UART_WaitOnFlagUntilTimeout>
 80095de:	4603      	mov	r3, r0
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d001      	beq.n	80095e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80095e4:	2303      	movs	r3, #3
 80095e6:	e01f      	b.n	8009628 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	60ba      	str	r2, [r7, #8]
 80095ee:	781a      	ldrb	r2, [r3, #0]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1b7      	bne.n	8009570 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	9300      	str	r3, [sp, #0]
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2200      	movs	r2, #0
 8009608:	2140      	movs	r1, #64	; 0x40
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 f97a 	bl	8009904 <UART_WaitOnFlagUntilTimeout>
 8009610:	4603      	mov	r3, r0
 8009612:	2b00      	cmp	r3, #0
 8009614:	d001      	beq.n	800961a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e006      	b.n	8009628 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2220      	movs	r2, #32
 800961e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	e000      	b.n	8009628 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009626:	2302      	movs	r3, #2
  }
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	4613      	mov	r3, r2
 800963c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009644:	b2db      	uxtb	r3, r3
 8009646:	2b20      	cmp	r3, #32
 8009648:	d140      	bne.n	80096cc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d002      	beq.n	8009656 <HAL_UART_Receive_IT+0x26>
 8009650:	88fb      	ldrh	r3, [r7, #6]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d101      	bne.n	800965a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e039      	b.n	80096ce <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009660:	2b01      	cmp	r3, #1
 8009662:	d101      	bne.n	8009668 <HAL_UART_Receive_IT+0x38>
 8009664:	2302      	movs	r3, #2
 8009666:	e032      	b.n	80096ce <HAL_UART_Receive_IT+0x9e>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	88fa      	ldrh	r2, [r7, #6]
 800967a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	88fa      	ldrh	r2, [r7, #6]
 8009680:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2200      	movs	r2, #0
 8009686:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2222      	movs	r2, #34	; 0x22
 800968c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	68da      	ldr	r2, [r3, #12]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	695a      	ldr	r2, [r3, #20]
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f042 0201 	orr.w	r2, r2, #1
 80096b6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	68da      	ldr	r2, [r3, #12]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f042 0220 	orr.w	r2, r2, #32
 80096c6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80096c8:	2300      	movs	r3, #0
 80096ca:	e000      	b.n	80096ce <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80096cc:	2302      	movs	r3, #2
  }
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3714      	adds	r7, #20
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr
	...

080096dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b088      	sub	sp, #32
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	695b      	ldr	r3, [r3, #20]
 80096fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80096fc:	2300      	movs	r3, #0
 80096fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009700:	2300      	movs	r3, #0
 8009702:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	f003 030f 	and.w	r3, r3, #15
 800970a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10d      	bne.n	800972e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	d008      	beq.n	800972e <HAL_UART_IRQHandler+0x52>
 800971c:	69bb      	ldr	r3, [r7, #24]
 800971e:	f003 0320 	and.w	r3, r3, #32
 8009722:	2b00      	cmp	r3, #0
 8009724:	d003      	beq.n	800972e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 f9d6 	bl	8009ad8 <UART_Receive_IT>
      return;
 800972c:	e0d1      	b.n	80098d2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 80b0 	beq.w	8009896 <HAL_UART_IRQHandler+0x1ba>
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	f003 0301 	and.w	r3, r3, #1
 800973c:	2b00      	cmp	r3, #0
 800973e:	d105      	bne.n	800974c <HAL_UART_IRQHandler+0x70>
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 80a5 	beq.w	8009896 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00a      	beq.n	800976c <HAL_UART_IRQHandler+0x90>
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800975c:	2b00      	cmp	r3, #0
 800975e:	d005      	beq.n	800976c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009764:	f043 0201 	orr.w	r2, r3, #1
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800976c:	69fb      	ldr	r3, [r7, #28]
 800976e:	f003 0304 	and.w	r3, r3, #4
 8009772:	2b00      	cmp	r3, #0
 8009774:	d00a      	beq.n	800978c <HAL_UART_IRQHandler+0xb0>
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	f003 0301 	and.w	r3, r3, #1
 800977c:	2b00      	cmp	r3, #0
 800977e:	d005      	beq.n	800978c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009784:	f043 0202 	orr.w	r2, r3, #2
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	f003 0302 	and.w	r3, r3, #2
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00a      	beq.n	80097ac <HAL_UART_IRQHandler+0xd0>
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f003 0301 	and.w	r3, r3, #1
 800979c:	2b00      	cmp	r3, #0
 800979e:	d005      	beq.n	80097ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a4:	f043 0204 	orr.w	r2, r3, #4
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	f003 0308 	and.w	r3, r3, #8
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d00f      	beq.n	80097d6 <HAL_UART_IRQHandler+0xfa>
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	f003 0320 	and.w	r3, r3, #32
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d104      	bne.n	80097ca <HAL_UART_IRQHandler+0xee>
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d005      	beq.n	80097d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097ce:	f043 0208 	orr.w	r2, r3, #8
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d078      	beq.n	80098d0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80097de:	69fb      	ldr	r3, [r7, #28]
 80097e0:	f003 0320 	and.w	r3, r3, #32
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d007      	beq.n	80097f8 <HAL_UART_IRQHandler+0x11c>
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	f003 0320 	and.w	r3, r3, #32
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d002      	beq.n	80097f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 f970 	bl	8009ad8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009802:	2b40      	cmp	r3, #64	; 0x40
 8009804:	bf0c      	ite	eq
 8009806:	2301      	moveq	r3, #1
 8009808:	2300      	movne	r3, #0
 800980a:	b2db      	uxtb	r3, r3
 800980c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009812:	f003 0308 	and.w	r3, r3, #8
 8009816:	2b00      	cmp	r3, #0
 8009818:	d102      	bne.n	8009820 <HAL_UART_IRQHandler+0x144>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b00      	cmp	r3, #0
 800981e:	d031      	beq.n	8009884 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f000 f8b9 	bl	8009998 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009830:	2b40      	cmp	r3, #64	; 0x40
 8009832:	d123      	bne.n	800987c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	695a      	ldr	r2, [r3, #20]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009842:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009848:	2b00      	cmp	r3, #0
 800984a:	d013      	beq.n	8009874 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009850:	4a21      	ldr	r2, [pc, #132]	; (80098d8 <HAL_UART_IRQHandler+0x1fc>)
 8009852:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009858:	4618      	mov	r0, r3
 800985a:	f7fd fcb2 	bl	80071c2 <HAL_DMA_Abort_IT>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d016      	beq.n	8009892 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800986e:	4610      	mov	r0, r2
 8009870:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009872:	e00e      	b.n	8009892 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 f83b 	bl	80098f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800987a:	e00a      	b.n	8009892 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	f000 f837 	bl	80098f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009882:	e006      	b.n	8009892 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f833 	bl	80098f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009890:	e01e      	b.n	80098d0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009892:	bf00      	nop
    return;
 8009894:	e01c      	b.n	80098d0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989c:	2b00      	cmp	r3, #0
 800989e:	d008      	beq.n	80098b2 <HAL_UART_IRQHandler+0x1d6>
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d003      	beq.n	80098b2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f000 f8a6 	bl	80099fc <UART_Transmit_IT>
    return;
 80098b0:	e00f      	b.n	80098d2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80098b2:	69fb      	ldr	r3, [r7, #28]
 80098b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00a      	beq.n	80098d2 <HAL_UART_IRQHandler+0x1f6>
 80098bc:	69bb      	ldr	r3, [r7, #24]
 80098be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d005      	beq.n	80098d2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f8ee 	bl	8009aa8 <UART_EndTransmit_IT>
    return;
 80098cc:	bf00      	nop
 80098ce:	e000      	b.n	80098d2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80098d0:	bf00      	nop
  }
}
 80098d2:	3720      	adds	r7, #32
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	080099d5 	.word	0x080099d5

080098dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80098dc:	b480      	push	{r7}
 80098de:	b083      	sub	sp, #12
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80098e4:	bf00      	nop
 80098e6:	370c      	adds	r7, #12
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr

080098f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	60f8      	str	r0, [r7, #12]
 800990c:	60b9      	str	r1, [r7, #8]
 800990e:	603b      	str	r3, [r7, #0]
 8009910:	4613      	mov	r3, r2
 8009912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009914:	e02c      	b.n	8009970 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800991c:	d028      	beq.n	8009970 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d007      	beq.n	8009934 <UART_WaitOnFlagUntilTimeout+0x30>
 8009924:	f7fc f8be 	bl	8005aa4 <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	69ba      	ldr	r2, [r7, #24]
 8009930:	429a      	cmp	r2, r3
 8009932:	d21d      	bcs.n	8009970 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68da      	ldr	r2, [r3, #12]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009942:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	695a      	ldr	r2, [r3, #20]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f022 0201 	bic.w	r2, r2, #1
 8009952:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2220      	movs	r2, #32
 8009958:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2220      	movs	r2, #32
 8009960:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e00f      	b.n	8009990 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4013      	ands	r3, r2
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	429a      	cmp	r2, r3
 800997e:	bf0c      	ite	eq
 8009980:	2301      	moveq	r3, #1
 8009982:	2300      	movne	r3, #0
 8009984:	b2db      	uxtb	r3, r3
 8009986:	461a      	mov	r2, r3
 8009988:	79fb      	ldrb	r3, [r7, #7]
 800998a:	429a      	cmp	r2, r3
 800998c:	d0c3      	beq.n	8009916 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3710      	adds	r7, #16
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68da      	ldr	r2, [r3, #12]
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80099ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	695a      	ldr	r2, [r3, #20]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f022 0201 	bic.w	r2, r2, #1
 80099be:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2220      	movs	r2, #32
 80099c4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2200      	movs	r2, #0
 80099e6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2200      	movs	r2, #0
 80099ec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80099ee:	68f8      	ldr	r0, [r7, #12]
 80099f0:	f7ff ff7e 	bl	80098f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80099f4:	bf00      	nop
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b085      	sub	sp, #20
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b21      	cmp	r3, #33	; 0x21
 8009a0e:	d144      	bne.n	8009a9a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a18:	d11a      	bne.n	8009a50 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6a1b      	ldr	r3, [r3, #32]
 8009a1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	461a      	mov	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a2e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d105      	bne.n	8009a44 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6a1b      	ldr	r3, [r3, #32]
 8009a3c:	1c9a      	adds	r2, r3, #2
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	621a      	str	r2, [r3, #32]
 8009a42:	e00e      	b.n	8009a62 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a1b      	ldr	r3, [r3, #32]
 8009a48:	1c5a      	adds	r2, r3, #1
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	621a      	str	r2, [r3, #32]
 8009a4e:	e008      	b.n	8009a62 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	1c59      	adds	r1, r3, #1
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	6211      	str	r1, [r2, #32]
 8009a5a:	781a      	ldrb	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	3b01      	subs	r3, #1
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d10f      	bne.n	8009a96 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	68da      	ldr	r2, [r3, #12]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68da      	ldr	r2, [r3, #12]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009a96:	2300      	movs	r3, #0
 8009a98:	e000      	b.n	8009a9c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009a9a:	2302      	movs	r3, #2
  }
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68da      	ldr	r2, [r3, #12]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009abe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff ff07 	bl	80098dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009ace:	2300      	movs	r3, #0
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3708      	adds	r7, #8
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009ae6:	b2db      	uxtb	r3, r3
 8009ae8:	2b22      	cmp	r3, #34	; 0x22
 8009aea:	d171      	bne.n	8009bd0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	689b      	ldr	r3, [r3, #8]
 8009af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009af4:	d123      	bne.n	8009b3e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afa:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10e      	bne.n	8009b22 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	685b      	ldr	r3, [r3, #4]
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b1a:	1c9a      	adds	r2, r3, #2
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8009b20:	e029      	b.n	8009b76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	629a      	str	r2, [r3, #40]	; 0x28
 8009b3c:	e01b      	b.n	8009b76 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d10a      	bne.n	8009b5c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	6858      	ldr	r0, [r3, #4]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b50:	1c59      	adds	r1, r3, #1
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	6291      	str	r1, [r2, #40]	; 0x28
 8009b56:	b2c2      	uxtb	r2, r0
 8009b58:	701a      	strb	r2, [r3, #0]
 8009b5a:	e00c      	b.n	8009b76 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	b2da      	uxtb	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b68:	1c58      	adds	r0, r3, #1
 8009b6a:	6879      	ldr	r1, [r7, #4]
 8009b6c:	6288      	str	r0, [r1, #40]	; 0x28
 8009b6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009b72:	b2d2      	uxtb	r2, r2
 8009b74:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	4619      	mov	r1, r3
 8009b84:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d120      	bne.n	8009bcc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68da      	ldr	r2, [r3, #12]
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f022 0220 	bic.w	r2, r2, #32
 8009b98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68da      	ldr	r2, [r3, #12]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ba8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	695a      	ldr	r2, [r3, #20]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f022 0201 	bic.w	r2, r2, #1
 8009bb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f7fb fecc 	bl	8005960 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	e002      	b.n	8009bd2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	e000      	b.n	8009bd2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009bd0:	2302      	movs	r3, #2
  }
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
	...

08009bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be0:	b085      	sub	sp, #20
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	68da      	ldr	r2, [r3, #12]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	689a      	ldr	r2, [r3, #8]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	691b      	ldr	r3, [r3, #16]
 8009c04:	431a      	orrs	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	695b      	ldr	r3, [r3, #20]
 8009c0a:	431a      	orrs	r2, r3
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	69db      	ldr	r3, [r3, #28]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009c1e:	f023 030c 	bic.w	r3, r3, #12
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	6812      	ldr	r2, [r2, #0]
 8009c26:	68f9      	ldr	r1, [r7, #12]
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	695b      	ldr	r3, [r3, #20]
 8009c32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	699a      	ldr	r2, [r3, #24]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	430a      	orrs	r2, r1
 8009c40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	69db      	ldr	r3, [r3, #28]
 8009c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c4a:	f040 818b 	bne.w	8009f64 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4ac1      	ldr	r2, [pc, #772]	; (8009f58 <UART_SetConfig+0x37c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d005      	beq.n	8009c64 <UART_SetConfig+0x88>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4abf      	ldr	r2, [pc, #764]	; (8009f5c <UART_SetConfig+0x380>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	f040 80bd 	bne.w	8009dde <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c64:	f7fd fdd2 	bl	800780c <HAL_RCC_GetPCLK2Freq>
 8009c68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	461d      	mov	r5, r3
 8009c6e:	f04f 0600 	mov.w	r6, #0
 8009c72:	46a8      	mov	r8, r5
 8009c74:	46b1      	mov	r9, r6
 8009c76:	eb18 0308 	adds.w	r3, r8, r8
 8009c7a:	eb49 0409 	adc.w	r4, r9, r9
 8009c7e:	4698      	mov	r8, r3
 8009c80:	46a1      	mov	r9, r4
 8009c82:	eb18 0805 	adds.w	r8, r8, r5
 8009c86:	eb49 0906 	adc.w	r9, r9, r6
 8009c8a:	f04f 0100 	mov.w	r1, #0
 8009c8e:	f04f 0200 	mov.w	r2, #0
 8009c92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009c96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009c9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009c9e:	4688      	mov	r8, r1
 8009ca0:	4691      	mov	r9, r2
 8009ca2:	eb18 0005 	adds.w	r0, r8, r5
 8009ca6:	eb49 0106 	adc.w	r1, r9, r6
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	461d      	mov	r5, r3
 8009cb0:	f04f 0600 	mov.w	r6, #0
 8009cb4:	196b      	adds	r3, r5, r5
 8009cb6:	eb46 0406 	adc.w	r4, r6, r6
 8009cba:	461a      	mov	r2, r3
 8009cbc:	4623      	mov	r3, r4
 8009cbe:	f7f7 f803 	bl	8000cc8 <__aeabi_uldivmod>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4ba5      	ldr	r3, [pc, #660]	; (8009f60 <UART_SetConfig+0x384>)
 8009cca:	fba3 2302 	umull	r2, r3, r3, r2
 8009cce:	095b      	lsrs	r3, r3, #5
 8009cd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	461d      	mov	r5, r3
 8009cd8:	f04f 0600 	mov.w	r6, #0
 8009cdc:	46a9      	mov	r9, r5
 8009cde:	46b2      	mov	sl, r6
 8009ce0:	eb19 0309 	adds.w	r3, r9, r9
 8009ce4:	eb4a 040a 	adc.w	r4, sl, sl
 8009ce8:	4699      	mov	r9, r3
 8009cea:	46a2      	mov	sl, r4
 8009cec:	eb19 0905 	adds.w	r9, r9, r5
 8009cf0:	eb4a 0a06 	adc.w	sl, sl, r6
 8009cf4:	f04f 0100 	mov.w	r1, #0
 8009cf8:	f04f 0200 	mov.w	r2, #0
 8009cfc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d08:	4689      	mov	r9, r1
 8009d0a:	4692      	mov	sl, r2
 8009d0c:	eb19 0005 	adds.w	r0, r9, r5
 8009d10:	eb4a 0106 	adc.w	r1, sl, r6
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	461d      	mov	r5, r3
 8009d1a:	f04f 0600 	mov.w	r6, #0
 8009d1e:	196b      	adds	r3, r5, r5
 8009d20:	eb46 0406 	adc.w	r4, r6, r6
 8009d24:	461a      	mov	r2, r3
 8009d26:	4623      	mov	r3, r4
 8009d28:	f7f6 ffce 	bl	8000cc8 <__aeabi_uldivmod>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	460c      	mov	r4, r1
 8009d30:	461a      	mov	r2, r3
 8009d32:	4b8b      	ldr	r3, [pc, #556]	; (8009f60 <UART_SetConfig+0x384>)
 8009d34:	fba3 1302 	umull	r1, r3, r3, r2
 8009d38:	095b      	lsrs	r3, r3, #5
 8009d3a:	2164      	movs	r1, #100	; 0x64
 8009d3c:	fb01 f303 	mul.w	r3, r1, r3
 8009d40:	1ad3      	subs	r3, r2, r3
 8009d42:	00db      	lsls	r3, r3, #3
 8009d44:	3332      	adds	r3, #50	; 0x32
 8009d46:	4a86      	ldr	r2, [pc, #536]	; (8009f60 <UART_SetConfig+0x384>)
 8009d48:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4c:	095b      	lsrs	r3, r3, #5
 8009d4e:	005b      	lsls	r3, r3, #1
 8009d50:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009d54:	4498      	add	r8, r3
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	461d      	mov	r5, r3
 8009d5a:	f04f 0600 	mov.w	r6, #0
 8009d5e:	46a9      	mov	r9, r5
 8009d60:	46b2      	mov	sl, r6
 8009d62:	eb19 0309 	adds.w	r3, r9, r9
 8009d66:	eb4a 040a 	adc.w	r4, sl, sl
 8009d6a:	4699      	mov	r9, r3
 8009d6c:	46a2      	mov	sl, r4
 8009d6e:	eb19 0905 	adds.w	r9, r9, r5
 8009d72:	eb4a 0a06 	adc.w	sl, sl, r6
 8009d76:	f04f 0100 	mov.w	r1, #0
 8009d7a:	f04f 0200 	mov.w	r2, #0
 8009d7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d82:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009d86:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009d8a:	4689      	mov	r9, r1
 8009d8c:	4692      	mov	sl, r2
 8009d8e:	eb19 0005 	adds.w	r0, r9, r5
 8009d92:	eb4a 0106 	adc.w	r1, sl, r6
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	461d      	mov	r5, r3
 8009d9c:	f04f 0600 	mov.w	r6, #0
 8009da0:	196b      	adds	r3, r5, r5
 8009da2:	eb46 0406 	adc.w	r4, r6, r6
 8009da6:	461a      	mov	r2, r3
 8009da8:	4623      	mov	r3, r4
 8009daa:	f7f6 ff8d 	bl	8000cc8 <__aeabi_uldivmod>
 8009dae:	4603      	mov	r3, r0
 8009db0:	460c      	mov	r4, r1
 8009db2:	461a      	mov	r2, r3
 8009db4:	4b6a      	ldr	r3, [pc, #424]	; (8009f60 <UART_SetConfig+0x384>)
 8009db6:	fba3 1302 	umull	r1, r3, r3, r2
 8009dba:	095b      	lsrs	r3, r3, #5
 8009dbc:	2164      	movs	r1, #100	; 0x64
 8009dbe:	fb01 f303 	mul.w	r3, r1, r3
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	00db      	lsls	r3, r3, #3
 8009dc6:	3332      	adds	r3, #50	; 0x32
 8009dc8:	4a65      	ldr	r2, [pc, #404]	; (8009f60 <UART_SetConfig+0x384>)
 8009dca:	fba2 2303 	umull	r2, r3, r2, r3
 8009dce:	095b      	lsrs	r3, r3, #5
 8009dd0:	f003 0207 	and.w	r2, r3, #7
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4442      	add	r2, r8
 8009dda:	609a      	str	r2, [r3, #8]
 8009ddc:	e26f      	b.n	800a2be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009dde:	f7fd fd01 	bl	80077e4 <HAL_RCC_GetPCLK1Freq>
 8009de2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	461d      	mov	r5, r3
 8009de8:	f04f 0600 	mov.w	r6, #0
 8009dec:	46a8      	mov	r8, r5
 8009dee:	46b1      	mov	r9, r6
 8009df0:	eb18 0308 	adds.w	r3, r8, r8
 8009df4:	eb49 0409 	adc.w	r4, r9, r9
 8009df8:	4698      	mov	r8, r3
 8009dfa:	46a1      	mov	r9, r4
 8009dfc:	eb18 0805 	adds.w	r8, r8, r5
 8009e00:	eb49 0906 	adc.w	r9, r9, r6
 8009e04:	f04f 0100 	mov.w	r1, #0
 8009e08:	f04f 0200 	mov.w	r2, #0
 8009e0c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009e10:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009e14:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009e18:	4688      	mov	r8, r1
 8009e1a:	4691      	mov	r9, r2
 8009e1c:	eb18 0005 	adds.w	r0, r8, r5
 8009e20:	eb49 0106 	adc.w	r1, r9, r6
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	685b      	ldr	r3, [r3, #4]
 8009e28:	461d      	mov	r5, r3
 8009e2a:	f04f 0600 	mov.w	r6, #0
 8009e2e:	196b      	adds	r3, r5, r5
 8009e30:	eb46 0406 	adc.w	r4, r6, r6
 8009e34:	461a      	mov	r2, r3
 8009e36:	4623      	mov	r3, r4
 8009e38:	f7f6 ff46 	bl	8000cc8 <__aeabi_uldivmod>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	460c      	mov	r4, r1
 8009e40:	461a      	mov	r2, r3
 8009e42:	4b47      	ldr	r3, [pc, #284]	; (8009f60 <UART_SetConfig+0x384>)
 8009e44:	fba3 2302 	umull	r2, r3, r3, r2
 8009e48:	095b      	lsrs	r3, r3, #5
 8009e4a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	461d      	mov	r5, r3
 8009e52:	f04f 0600 	mov.w	r6, #0
 8009e56:	46a9      	mov	r9, r5
 8009e58:	46b2      	mov	sl, r6
 8009e5a:	eb19 0309 	adds.w	r3, r9, r9
 8009e5e:	eb4a 040a 	adc.w	r4, sl, sl
 8009e62:	4699      	mov	r9, r3
 8009e64:	46a2      	mov	sl, r4
 8009e66:	eb19 0905 	adds.w	r9, r9, r5
 8009e6a:	eb4a 0a06 	adc.w	sl, sl, r6
 8009e6e:	f04f 0100 	mov.w	r1, #0
 8009e72:	f04f 0200 	mov.w	r2, #0
 8009e76:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009e7a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009e7e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009e82:	4689      	mov	r9, r1
 8009e84:	4692      	mov	sl, r2
 8009e86:	eb19 0005 	adds.w	r0, r9, r5
 8009e8a:	eb4a 0106 	adc.w	r1, sl, r6
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	461d      	mov	r5, r3
 8009e94:	f04f 0600 	mov.w	r6, #0
 8009e98:	196b      	adds	r3, r5, r5
 8009e9a:	eb46 0406 	adc.w	r4, r6, r6
 8009e9e:	461a      	mov	r2, r3
 8009ea0:	4623      	mov	r3, r4
 8009ea2:	f7f6 ff11 	bl	8000cc8 <__aeabi_uldivmod>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	460c      	mov	r4, r1
 8009eaa:	461a      	mov	r2, r3
 8009eac:	4b2c      	ldr	r3, [pc, #176]	; (8009f60 <UART_SetConfig+0x384>)
 8009eae:	fba3 1302 	umull	r1, r3, r3, r2
 8009eb2:	095b      	lsrs	r3, r3, #5
 8009eb4:	2164      	movs	r1, #100	; 0x64
 8009eb6:	fb01 f303 	mul.w	r3, r1, r3
 8009eba:	1ad3      	subs	r3, r2, r3
 8009ebc:	00db      	lsls	r3, r3, #3
 8009ebe:	3332      	adds	r3, #50	; 0x32
 8009ec0:	4a27      	ldr	r2, [pc, #156]	; (8009f60 <UART_SetConfig+0x384>)
 8009ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ec6:	095b      	lsrs	r3, r3, #5
 8009ec8:	005b      	lsls	r3, r3, #1
 8009eca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ece:	4498      	add	r8, r3
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	461d      	mov	r5, r3
 8009ed4:	f04f 0600 	mov.w	r6, #0
 8009ed8:	46a9      	mov	r9, r5
 8009eda:	46b2      	mov	sl, r6
 8009edc:	eb19 0309 	adds.w	r3, r9, r9
 8009ee0:	eb4a 040a 	adc.w	r4, sl, sl
 8009ee4:	4699      	mov	r9, r3
 8009ee6:	46a2      	mov	sl, r4
 8009ee8:	eb19 0905 	adds.w	r9, r9, r5
 8009eec:	eb4a 0a06 	adc.w	sl, sl, r6
 8009ef0:	f04f 0100 	mov.w	r1, #0
 8009ef4:	f04f 0200 	mov.w	r2, #0
 8009ef8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009efc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009f00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009f04:	4689      	mov	r9, r1
 8009f06:	4692      	mov	sl, r2
 8009f08:	eb19 0005 	adds.w	r0, r9, r5
 8009f0c:	eb4a 0106 	adc.w	r1, sl, r6
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	461d      	mov	r5, r3
 8009f16:	f04f 0600 	mov.w	r6, #0
 8009f1a:	196b      	adds	r3, r5, r5
 8009f1c:	eb46 0406 	adc.w	r4, r6, r6
 8009f20:	461a      	mov	r2, r3
 8009f22:	4623      	mov	r3, r4
 8009f24:	f7f6 fed0 	bl	8000cc8 <__aeabi_uldivmod>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	4b0c      	ldr	r3, [pc, #48]	; (8009f60 <UART_SetConfig+0x384>)
 8009f30:	fba3 1302 	umull	r1, r3, r3, r2
 8009f34:	095b      	lsrs	r3, r3, #5
 8009f36:	2164      	movs	r1, #100	; 0x64
 8009f38:	fb01 f303 	mul.w	r3, r1, r3
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	00db      	lsls	r3, r3, #3
 8009f40:	3332      	adds	r3, #50	; 0x32
 8009f42:	4a07      	ldr	r2, [pc, #28]	; (8009f60 <UART_SetConfig+0x384>)
 8009f44:	fba2 2303 	umull	r2, r3, r2, r3
 8009f48:	095b      	lsrs	r3, r3, #5
 8009f4a:	f003 0207 	and.w	r2, r3, #7
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4442      	add	r2, r8
 8009f54:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8009f56:	e1b2      	b.n	800a2be <UART_SetConfig+0x6e2>
 8009f58:	40011000 	.word	0x40011000
 8009f5c:	40011400 	.word	0x40011400
 8009f60:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4ad7      	ldr	r2, [pc, #860]	; (800a2c8 <UART_SetConfig+0x6ec>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d005      	beq.n	8009f7a <UART_SetConfig+0x39e>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4ad6      	ldr	r2, [pc, #856]	; (800a2cc <UART_SetConfig+0x6f0>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	f040 80d1 	bne.w	800a11c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f7a:	f7fd fc47 	bl	800780c <HAL_RCC_GetPCLK2Freq>
 8009f7e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	469a      	mov	sl, r3
 8009f84:	f04f 0b00 	mov.w	fp, #0
 8009f88:	46d0      	mov	r8, sl
 8009f8a:	46d9      	mov	r9, fp
 8009f8c:	eb18 0308 	adds.w	r3, r8, r8
 8009f90:	eb49 0409 	adc.w	r4, r9, r9
 8009f94:	4698      	mov	r8, r3
 8009f96:	46a1      	mov	r9, r4
 8009f98:	eb18 080a 	adds.w	r8, r8, sl
 8009f9c:	eb49 090b 	adc.w	r9, r9, fp
 8009fa0:	f04f 0100 	mov.w	r1, #0
 8009fa4:	f04f 0200 	mov.w	r2, #0
 8009fa8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009fac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009fb0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009fb4:	4688      	mov	r8, r1
 8009fb6:	4691      	mov	r9, r2
 8009fb8:	eb1a 0508 	adds.w	r5, sl, r8
 8009fbc:	eb4b 0609 	adc.w	r6, fp, r9
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	f04f 0200 	mov.w	r2, #0
 8009fca:	f04f 0300 	mov.w	r3, #0
 8009fce:	f04f 0400 	mov.w	r4, #0
 8009fd2:	0094      	lsls	r4, r2, #2
 8009fd4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009fd8:	008b      	lsls	r3, r1, #2
 8009fda:	461a      	mov	r2, r3
 8009fdc:	4623      	mov	r3, r4
 8009fde:	4628      	mov	r0, r5
 8009fe0:	4631      	mov	r1, r6
 8009fe2:	f7f6 fe71 	bl	8000cc8 <__aeabi_uldivmod>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	460c      	mov	r4, r1
 8009fea:	461a      	mov	r2, r3
 8009fec:	4bb8      	ldr	r3, [pc, #736]	; (800a2d0 <UART_SetConfig+0x6f4>)
 8009fee:	fba3 2302 	umull	r2, r3, r3, r2
 8009ff2:	095b      	lsrs	r3, r3, #5
 8009ff4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	469b      	mov	fp, r3
 8009ffc:	f04f 0c00 	mov.w	ip, #0
 800a000:	46d9      	mov	r9, fp
 800a002:	46e2      	mov	sl, ip
 800a004:	eb19 0309 	adds.w	r3, r9, r9
 800a008:	eb4a 040a 	adc.w	r4, sl, sl
 800a00c:	4699      	mov	r9, r3
 800a00e:	46a2      	mov	sl, r4
 800a010:	eb19 090b 	adds.w	r9, r9, fp
 800a014:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a018:	f04f 0100 	mov.w	r1, #0
 800a01c:	f04f 0200 	mov.w	r2, #0
 800a020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a024:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a028:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a02c:	4689      	mov	r9, r1
 800a02e:	4692      	mov	sl, r2
 800a030:	eb1b 0509 	adds.w	r5, fp, r9
 800a034:	eb4c 060a 	adc.w	r6, ip, sl
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	4619      	mov	r1, r3
 800a03e:	f04f 0200 	mov.w	r2, #0
 800a042:	f04f 0300 	mov.w	r3, #0
 800a046:	f04f 0400 	mov.w	r4, #0
 800a04a:	0094      	lsls	r4, r2, #2
 800a04c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a050:	008b      	lsls	r3, r1, #2
 800a052:	461a      	mov	r2, r3
 800a054:	4623      	mov	r3, r4
 800a056:	4628      	mov	r0, r5
 800a058:	4631      	mov	r1, r6
 800a05a:	f7f6 fe35 	bl	8000cc8 <__aeabi_uldivmod>
 800a05e:	4603      	mov	r3, r0
 800a060:	460c      	mov	r4, r1
 800a062:	461a      	mov	r2, r3
 800a064:	4b9a      	ldr	r3, [pc, #616]	; (800a2d0 <UART_SetConfig+0x6f4>)
 800a066:	fba3 1302 	umull	r1, r3, r3, r2
 800a06a:	095b      	lsrs	r3, r3, #5
 800a06c:	2164      	movs	r1, #100	; 0x64
 800a06e:	fb01 f303 	mul.w	r3, r1, r3
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	3332      	adds	r3, #50	; 0x32
 800a078:	4a95      	ldr	r2, [pc, #596]	; (800a2d0 <UART_SetConfig+0x6f4>)
 800a07a:	fba2 2303 	umull	r2, r3, r2, r3
 800a07e:	095b      	lsrs	r3, r3, #5
 800a080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a084:	4498      	add	r8, r3
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	469b      	mov	fp, r3
 800a08a:	f04f 0c00 	mov.w	ip, #0
 800a08e:	46d9      	mov	r9, fp
 800a090:	46e2      	mov	sl, ip
 800a092:	eb19 0309 	adds.w	r3, r9, r9
 800a096:	eb4a 040a 	adc.w	r4, sl, sl
 800a09a:	4699      	mov	r9, r3
 800a09c:	46a2      	mov	sl, r4
 800a09e:	eb19 090b 	adds.w	r9, r9, fp
 800a0a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a0a6:	f04f 0100 	mov.w	r1, #0
 800a0aa:	f04f 0200 	mov.w	r2, #0
 800a0ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a0b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a0ba:	4689      	mov	r9, r1
 800a0bc:	4692      	mov	sl, r2
 800a0be:	eb1b 0509 	adds.w	r5, fp, r9
 800a0c2:	eb4c 060a 	adc.w	r6, ip, sl
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	685b      	ldr	r3, [r3, #4]
 800a0ca:	4619      	mov	r1, r3
 800a0cc:	f04f 0200 	mov.w	r2, #0
 800a0d0:	f04f 0300 	mov.w	r3, #0
 800a0d4:	f04f 0400 	mov.w	r4, #0
 800a0d8:	0094      	lsls	r4, r2, #2
 800a0da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a0de:	008b      	lsls	r3, r1, #2
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	4623      	mov	r3, r4
 800a0e4:	4628      	mov	r0, r5
 800a0e6:	4631      	mov	r1, r6
 800a0e8:	f7f6 fdee 	bl	8000cc8 <__aeabi_uldivmod>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	460c      	mov	r4, r1
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	4b77      	ldr	r3, [pc, #476]	; (800a2d0 <UART_SetConfig+0x6f4>)
 800a0f4:	fba3 1302 	umull	r1, r3, r3, r2
 800a0f8:	095b      	lsrs	r3, r3, #5
 800a0fa:	2164      	movs	r1, #100	; 0x64
 800a0fc:	fb01 f303 	mul.w	r3, r1, r3
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	011b      	lsls	r3, r3, #4
 800a104:	3332      	adds	r3, #50	; 0x32
 800a106:	4a72      	ldr	r2, [pc, #456]	; (800a2d0 <UART_SetConfig+0x6f4>)
 800a108:	fba2 2303 	umull	r2, r3, r2, r3
 800a10c:	095b      	lsrs	r3, r3, #5
 800a10e:	f003 020f 	and.w	r2, r3, #15
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4442      	add	r2, r8
 800a118:	609a      	str	r2, [r3, #8]
 800a11a:	e0d0      	b.n	800a2be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800a11c:	f7fd fb62 	bl	80077e4 <HAL_RCC_GetPCLK1Freq>
 800a120:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	469a      	mov	sl, r3
 800a126:	f04f 0b00 	mov.w	fp, #0
 800a12a:	46d0      	mov	r8, sl
 800a12c:	46d9      	mov	r9, fp
 800a12e:	eb18 0308 	adds.w	r3, r8, r8
 800a132:	eb49 0409 	adc.w	r4, r9, r9
 800a136:	4698      	mov	r8, r3
 800a138:	46a1      	mov	r9, r4
 800a13a:	eb18 080a 	adds.w	r8, r8, sl
 800a13e:	eb49 090b 	adc.w	r9, r9, fp
 800a142:	f04f 0100 	mov.w	r1, #0
 800a146:	f04f 0200 	mov.w	r2, #0
 800a14a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800a14e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800a152:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800a156:	4688      	mov	r8, r1
 800a158:	4691      	mov	r9, r2
 800a15a:	eb1a 0508 	adds.w	r5, sl, r8
 800a15e:	eb4b 0609 	adc.w	r6, fp, r9
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	4619      	mov	r1, r3
 800a168:	f04f 0200 	mov.w	r2, #0
 800a16c:	f04f 0300 	mov.w	r3, #0
 800a170:	f04f 0400 	mov.w	r4, #0
 800a174:	0094      	lsls	r4, r2, #2
 800a176:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a17a:	008b      	lsls	r3, r1, #2
 800a17c:	461a      	mov	r2, r3
 800a17e:	4623      	mov	r3, r4
 800a180:	4628      	mov	r0, r5
 800a182:	4631      	mov	r1, r6
 800a184:	f7f6 fda0 	bl	8000cc8 <__aeabi_uldivmod>
 800a188:	4603      	mov	r3, r0
 800a18a:	460c      	mov	r4, r1
 800a18c:	461a      	mov	r2, r3
 800a18e:	4b50      	ldr	r3, [pc, #320]	; (800a2d0 <UART_SetConfig+0x6f4>)
 800a190:	fba3 2302 	umull	r2, r3, r3, r2
 800a194:	095b      	lsrs	r3, r3, #5
 800a196:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	469b      	mov	fp, r3
 800a19e:	f04f 0c00 	mov.w	ip, #0
 800a1a2:	46d9      	mov	r9, fp
 800a1a4:	46e2      	mov	sl, ip
 800a1a6:	eb19 0309 	adds.w	r3, r9, r9
 800a1aa:	eb4a 040a 	adc.w	r4, sl, sl
 800a1ae:	4699      	mov	r9, r3
 800a1b0:	46a2      	mov	sl, r4
 800a1b2:	eb19 090b 	adds.w	r9, r9, fp
 800a1b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a1ba:	f04f 0100 	mov.w	r1, #0
 800a1be:	f04f 0200 	mov.w	r2, #0
 800a1c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a1c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a1ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a1ce:	4689      	mov	r9, r1
 800a1d0:	4692      	mov	sl, r2
 800a1d2:	eb1b 0509 	adds.w	r5, fp, r9
 800a1d6:	eb4c 060a 	adc.w	r6, ip, sl
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	f04f 0200 	mov.w	r2, #0
 800a1e4:	f04f 0300 	mov.w	r3, #0
 800a1e8:	f04f 0400 	mov.w	r4, #0
 800a1ec:	0094      	lsls	r4, r2, #2
 800a1ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a1f2:	008b      	lsls	r3, r1, #2
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	4623      	mov	r3, r4
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	4631      	mov	r1, r6
 800a1fc:	f7f6 fd64 	bl	8000cc8 <__aeabi_uldivmod>
 800a200:	4603      	mov	r3, r0
 800a202:	460c      	mov	r4, r1
 800a204:	461a      	mov	r2, r3
 800a206:	4b32      	ldr	r3, [pc, #200]	; (800a2d0 <UART_SetConfig+0x6f4>)
 800a208:	fba3 1302 	umull	r1, r3, r3, r2
 800a20c:	095b      	lsrs	r3, r3, #5
 800a20e:	2164      	movs	r1, #100	; 0x64
 800a210:	fb01 f303 	mul.w	r3, r1, r3
 800a214:	1ad3      	subs	r3, r2, r3
 800a216:	011b      	lsls	r3, r3, #4
 800a218:	3332      	adds	r3, #50	; 0x32
 800a21a:	4a2d      	ldr	r2, [pc, #180]	; (800a2d0 <UART_SetConfig+0x6f4>)
 800a21c:	fba2 2303 	umull	r2, r3, r2, r3
 800a220:	095b      	lsrs	r3, r3, #5
 800a222:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a226:	4498      	add	r8, r3
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	469b      	mov	fp, r3
 800a22c:	f04f 0c00 	mov.w	ip, #0
 800a230:	46d9      	mov	r9, fp
 800a232:	46e2      	mov	sl, ip
 800a234:	eb19 0309 	adds.w	r3, r9, r9
 800a238:	eb4a 040a 	adc.w	r4, sl, sl
 800a23c:	4699      	mov	r9, r3
 800a23e:	46a2      	mov	sl, r4
 800a240:	eb19 090b 	adds.w	r9, r9, fp
 800a244:	eb4a 0a0c 	adc.w	sl, sl, ip
 800a248:	f04f 0100 	mov.w	r1, #0
 800a24c:	f04f 0200 	mov.w	r2, #0
 800a250:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a254:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800a258:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800a25c:	4689      	mov	r9, r1
 800a25e:	4692      	mov	sl, r2
 800a260:	eb1b 0509 	adds.w	r5, fp, r9
 800a264:	eb4c 060a 	adc.w	r6, ip, sl
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	4619      	mov	r1, r3
 800a26e:	f04f 0200 	mov.w	r2, #0
 800a272:	f04f 0300 	mov.w	r3, #0
 800a276:	f04f 0400 	mov.w	r4, #0
 800a27a:	0094      	lsls	r4, r2, #2
 800a27c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800a280:	008b      	lsls	r3, r1, #2
 800a282:	461a      	mov	r2, r3
 800a284:	4623      	mov	r3, r4
 800a286:	4628      	mov	r0, r5
 800a288:	4631      	mov	r1, r6
 800a28a:	f7f6 fd1d 	bl	8000cc8 <__aeabi_uldivmod>
 800a28e:	4603      	mov	r3, r0
 800a290:	460c      	mov	r4, r1
 800a292:	461a      	mov	r2, r3
 800a294:	4b0e      	ldr	r3, [pc, #56]	; (800a2d0 <UART_SetConfig+0x6f4>)
 800a296:	fba3 1302 	umull	r1, r3, r3, r2
 800a29a:	095b      	lsrs	r3, r3, #5
 800a29c:	2164      	movs	r1, #100	; 0x64
 800a29e:	fb01 f303 	mul.w	r3, r1, r3
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	011b      	lsls	r3, r3, #4
 800a2a6:	3332      	adds	r3, #50	; 0x32
 800a2a8:	4a09      	ldr	r2, [pc, #36]	; (800a2d0 <UART_SetConfig+0x6f4>)
 800a2aa:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ae:	095b      	lsrs	r3, r3, #5
 800a2b0:	f003 020f 	and.w	r2, r3, #15
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4442      	add	r2, r8
 800a2ba:	609a      	str	r2, [r3, #8]
}
 800a2bc:	e7ff      	b.n	800a2be <UART_SetConfig+0x6e2>
 800a2be:	bf00      	nop
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2c8:	40011000 	.word	0x40011000
 800a2cc:	40011400 	.word	0x40011400
 800a2d0:	51eb851f 	.word	0x51eb851f

0800a2d4 <round>:
 800a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2d6:	ec57 6b10 	vmov	r6, r7, d0
 800a2da:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800a2de:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800a2e2:	2c13      	cmp	r4, #19
 800a2e4:	463b      	mov	r3, r7
 800a2e6:	463d      	mov	r5, r7
 800a2e8:	dc17      	bgt.n	800a31a <round+0x46>
 800a2ea:	2c00      	cmp	r4, #0
 800a2ec:	da09      	bge.n	800a302 <round+0x2e>
 800a2ee:	3401      	adds	r4, #1
 800a2f0:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800a2f4:	d103      	bne.n	800a2fe <round+0x2a>
 800a2f6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a2fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a2fe:	2100      	movs	r1, #0
 800a300:	e02c      	b.n	800a35c <round+0x88>
 800a302:	4a18      	ldr	r2, [pc, #96]	; (800a364 <round+0x90>)
 800a304:	4122      	asrs	r2, r4
 800a306:	4217      	tst	r7, r2
 800a308:	d100      	bne.n	800a30c <round+0x38>
 800a30a:	b19e      	cbz	r6, 800a334 <round+0x60>
 800a30c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a310:	4123      	asrs	r3, r4
 800a312:	442b      	add	r3, r5
 800a314:	ea23 0302 	bic.w	r3, r3, r2
 800a318:	e7f1      	b.n	800a2fe <round+0x2a>
 800a31a:	2c33      	cmp	r4, #51	; 0x33
 800a31c:	dd0d      	ble.n	800a33a <round+0x66>
 800a31e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800a322:	d107      	bne.n	800a334 <round+0x60>
 800a324:	4630      	mov	r0, r6
 800a326:	4639      	mov	r1, r7
 800a328:	ee10 2a10 	vmov	r2, s0
 800a32c:	f7f5 ffce 	bl	80002cc <__adddf3>
 800a330:	4606      	mov	r6, r0
 800a332:	460f      	mov	r7, r1
 800a334:	ec47 6b10 	vmov	d0, r6, r7
 800a338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a33a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800a33e:	f04f 30ff 	mov.w	r0, #4294967295
 800a342:	40d0      	lsrs	r0, r2
 800a344:	4206      	tst	r6, r0
 800a346:	d0f5      	beq.n	800a334 <round+0x60>
 800a348:	2201      	movs	r2, #1
 800a34a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800a34e:	fa02 f404 	lsl.w	r4, r2, r4
 800a352:	1931      	adds	r1, r6, r4
 800a354:	bf28      	it	cs
 800a356:	189b      	addcs	r3, r3, r2
 800a358:	ea21 0100 	bic.w	r1, r1, r0
 800a35c:	461f      	mov	r7, r3
 800a35e:	460e      	mov	r6, r1
 800a360:	e7e8      	b.n	800a334 <round+0x60>
 800a362:	bf00      	nop
 800a364:	000fffff 	.word	0x000fffff

0800a368 <cosf>:
 800a368:	ee10 3a10 	vmov	r3, s0
 800a36c:	b507      	push	{r0, r1, r2, lr}
 800a36e:	4a1c      	ldr	r2, [pc, #112]	; (800a3e0 <cosf+0x78>)
 800a370:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a374:	4293      	cmp	r3, r2
 800a376:	dc04      	bgt.n	800a382 <cosf+0x1a>
 800a378:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800a3e4 <cosf+0x7c>
 800a37c:	f000 fe22 	bl	800afc4 <__kernel_cosf>
 800a380:	e004      	b.n	800a38c <cosf+0x24>
 800a382:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a386:	db04      	blt.n	800a392 <cosf+0x2a>
 800a388:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a38c:	b003      	add	sp, #12
 800a38e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a392:	4668      	mov	r0, sp
 800a394:	f000 fce6 	bl	800ad64 <__ieee754_rem_pio2f>
 800a398:	f000 0003 	and.w	r0, r0, #3
 800a39c:	2801      	cmp	r0, #1
 800a39e:	d007      	beq.n	800a3b0 <cosf+0x48>
 800a3a0:	2802      	cmp	r0, #2
 800a3a2:	d00e      	beq.n	800a3c2 <cosf+0x5a>
 800a3a4:	b9a0      	cbnz	r0, 800a3d0 <cosf+0x68>
 800a3a6:	eddd 0a01 	vldr	s1, [sp, #4]
 800a3aa:	ed9d 0a00 	vldr	s0, [sp]
 800a3ae:	e7e5      	b.n	800a37c <cosf+0x14>
 800a3b0:	eddd 0a01 	vldr	s1, [sp, #4]
 800a3b4:	ed9d 0a00 	vldr	s0, [sp]
 800a3b8:	f001 f8e4 	bl	800b584 <__kernel_sinf>
 800a3bc:	eeb1 0a40 	vneg.f32	s0, s0
 800a3c0:	e7e4      	b.n	800a38c <cosf+0x24>
 800a3c2:	eddd 0a01 	vldr	s1, [sp, #4]
 800a3c6:	ed9d 0a00 	vldr	s0, [sp]
 800a3ca:	f000 fdfb 	bl	800afc4 <__kernel_cosf>
 800a3ce:	e7f5      	b.n	800a3bc <cosf+0x54>
 800a3d0:	2001      	movs	r0, #1
 800a3d2:	eddd 0a01 	vldr	s1, [sp, #4]
 800a3d6:	ed9d 0a00 	vldr	s0, [sp]
 800a3da:	f001 f8d3 	bl	800b584 <__kernel_sinf>
 800a3de:	e7d5      	b.n	800a38c <cosf+0x24>
 800a3e0:	3f490fd8 	.word	0x3f490fd8
 800a3e4:	00000000 	.word	0x00000000

0800a3e8 <fmaxf>:
 800a3e8:	b508      	push	{r3, lr}
 800a3ea:	ed2d 8b02 	vpush	{d8}
 800a3ee:	eeb0 8a40 	vmov.f32	s16, s0
 800a3f2:	eef0 8a60 	vmov.f32	s17, s1
 800a3f6:	f000 f82d 	bl	800a454 <__fpclassifyf>
 800a3fa:	b148      	cbz	r0, 800a410 <fmaxf+0x28>
 800a3fc:	eeb0 0a68 	vmov.f32	s0, s17
 800a400:	f000 f828 	bl	800a454 <__fpclassifyf>
 800a404:	b130      	cbz	r0, 800a414 <fmaxf+0x2c>
 800a406:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a40e:	dc01      	bgt.n	800a414 <fmaxf+0x2c>
 800a410:	eeb0 8a68 	vmov.f32	s16, s17
 800a414:	eeb0 0a48 	vmov.f32	s0, s16
 800a418:	ecbd 8b02 	vpop	{d8}
 800a41c:	bd08      	pop	{r3, pc}

0800a41e <fminf>:
 800a41e:	b508      	push	{r3, lr}
 800a420:	ed2d 8b02 	vpush	{d8}
 800a424:	eeb0 8a40 	vmov.f32	s16, s0
 800a428:	eef0 8a60 	vmov.f32	s17, s1
 800a42c:	f000 f812 	bl	800a454 <__fpclassifyf>
 800a430:	b148      	cbz	r0, 800a446 <fminf+0x28>
 800a432:	eeb0 0a68 	vmov.f32	s0, s17
 800a436:	f000 f80d 	bl	800a454 <__fpclassifyf>
 800a43a:	b130      	cbz	r0, 800a44a <fminf+0x2c>
 800a43c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a444:	d401      	bmi.n	800a44a <fminf+0x2c>
 800a446:	eeb0 8a68 	vmov.f32	s16, s17
 800a44a:	eeb0 0a48 	vmov.f32	s0, s16
 800a44e:	ecbd 8b02 	vpop	{d8}
 800a452:	bd08      	pop	{r3, pc}

0800a454 <__fpclassifyf>:
 800a454:	ee10 3a10 	vmov	r3, s0
 800a458:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800a45c:	d00d      	beq.n	800a47a <__fpclassifyf+0x26>
 800a45e:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800a462:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800a466:	d30a      	bcc.n	800a47e <__fpclassifyf+0x2a>
 800a468:	4b07      	ldr	r3, [pc, #28]	; (800a488 <__fpclassifyf+0x34>)
 800a46a:	1e42      	subs	r2, r0, #1
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d908      	bls.n	800a482 <__fpclassifyf+0x2e>
 800a470:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800a474:	4258      	negs	r0, r3
 800a476:	4158      	adcs	r0, r3
 800a478:	4770      	bx	lr
 800a47a:	2002      	movs	r0, #2
 800a47c:	4770      	bx	lr
 800a47e:	2004      	movs	r0, #4
 800a480:	4770      	bx	lr
 800a482:	2003      	movs	r0, #3
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop
 800a488:	007ffffe 	.word	0x007ffffe

0800a48c <sinf>:
 800a48c:	ee10 3a10 	vmov	r3, s0
 800a490:	b507      	push	{r0, r1, r2, lr}
 800a492:	4a1d      	ldr	r2, [pc, #116]	; (800a508 <sinf+0x7c>)
 800a494:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a498:	4293      	cmp	r3, r2
 800a49a:	dc05      	bgt.n	800a4a8 <sinf+0x1c>
 800a49c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800a50c <sinf+0x80>
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	f001 f86f 	bl	800b584 <__kernel_sinf>
 800a4a6:	e004      	b.n	800a4b2 <sinf+0x26>
 800a4a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a4ac:	db04      	blt.n	800a4b8 <sinf+0x2c>
 800a4ae:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a4b2:	b003      	add	sp, #12
 800a4b4:	f85d fb04 	ldr.w	pc, [sp], #4
 800a4b8:	4668      	mov	r0, sp
 800a4ba:	f000 fc53 	bl	800ad64 <__ieee754_rem_pio2f>
 800a4be:	f000 0003 	and.w	r0, r0, #3
 800a4c2:	2801      	cmp	r0, #1
 800a4c4:	d008      	beq.n	800a4d8 <sinf+0x4c>
 800a4c6:	2802      	cmp	r0, #2
 800a4c8:	d00d      	beq.n	800a4e6 <sinf+0x5a>
 800a4ca:	b9b0      	cbnz	r0, 800a4fa <sinf+0x6e>
 800a4cc:	2001      	movs	r0, #1
 800a4ce:	eddd 0a01 	vldr	s1, [sp, #4]
 800a4d2:	ed9d 0a00 	vldr	s0, [sp]
 800a4d6:	e7e4      	b.n	800a4a2 <sinf+0x16>
 800a4d8:	eddd 0a01 	vldr	s1, [sp, #4]
 800a4dc:	ed9d 0a00 	vldr	s0, [sp]
 800a4e0:	f000 fd70 	bl	800afc4 <__kernel_cosf>
 800a4e4:	e7e5      	b.n	800a4b2 <sinf+0x26>
 800a4e6:	2001      	movs	r0, #1
 800a4e8:	eddd 0a01 	vldr	s1, [sp, #4]
 800a4ec:	ed9d 0a00 	vldr	s0, [sp]
 800a4f0:	f001 f848 	bl	800b584 <__kernel_sinf>
 800a4f4:	eeb1 0a40 	vneg.f32	s0, s0
 800a4f8:	e7db      	b.n	800a4b2 <sinf+0x26>
 800a4fa:	eddd 0a01 	vldr	s1, [sp, #4]
 800a4fe:	ed9d 0a00 	vldr	s0, [sp]
 800a502:	f000 fd5f 	bl	800afc4 <__kernel_cosf>
 800a506:	e7f5      	b.n	800a4f4 <sinf+0x68>
 800a508:	3f490fd8 	.word	0x3f490fd8
 800a50c:	00000000 	.word	0x00000000

0800a510 <exp>:
 800a510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a512:	ed2d 8b02 	vpush	{d8}
 800a516:	4e38      	ldr	r6, [pc, #224]	; (800a5f8 <exp+0xe8>)
 800a518:	b08b      	sub	sp, #44	; 0x2c
 800a51a:	ec55 4b10 	vmov	r4, r5, d0
 800a51e:	f000 f97b 	bl	800a818 <__ieee754_exp>
 800a522:	f996 3000 	ldrsb.w	r3, [r6]
 800a526:	eeb0 8a40 	vmov.f32	s16, s0
 800a52a:	eef0 8a60 	vmov.f32	s17, s1
 800a52e:	3301      	adds	r3, #1
 800a530:	d02c      	beq.n	800a58c <exp+0x7c>
 800a532:	ec45 4b10 	vmov	d0, r4, r5
 800a536:	f001 f86d 	bl	800b614 <finite>
 800a53a:	b338      	cbz	r0, 800a58c <exp+0x7c>
 800a53c:	a32a      	add	r3, pc, #168	; (adr r3, 800a5e8 <exp+0xd8>)
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	4620      	mov	r0, r4
 800a544:	4629      	mov	r1, r5
 800a546:	f7f6 fb07 	bl	8000b58 <__aeabi_dcmpgt>
 800a54a:	4607      	mov	r7, r0
 800a54c:	2800      	cmp	r0, #0
 800a54e:	d030      	beq.n	800a5b2 <exp+0xa2>
 800a550:	2303      	movs	r3, #3
 800a552:	9300      	str	r3, [sp, #0]
 800a554:	4b29      	ldr	r3, [pc, #164]	; (800a5fc <exp+0xec>)
 800a556:	9301      	str	r3, [sp, #4]
 800a558:	2300      	movs	r3, #0
 800a55a:	9308      	str	r3, [sp, #32]
 800a55c:	f996 3000 	ldrsb.w	r3, [r6]
 800a560:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a564:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a568:	b9c3      	cbnz	r3, 800a59c <exp+0x8c>
 800a56a:	4b25      	ldr	r3, [pc, #148]	; (800a600 <exp+0xf0>)
 800a56c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a570:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a574:	4668      	mov	r0, sp
 800a576:	f001 f855 	bl	800b624 <matherr>
 800a57a:	b1a8      	cbz	r0, 800a5a8 <exp+0x98>
 800a57c:	9b08      	ldr	r3, [sp, #32]
 800a57e:	b11b      	cbz	r3, 800a588 <exp+0x78>
 800a580:	f001 f910 	bl	800b7a4 <__errno>
 800a584:	9b08      	ldr	r3, [sp, #32]
 800a586:	6003      	str	r3, [r0, #0]
 800a588:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a58c:	eeb0 0a48 	vmov.f32	s0, s16
 800a590:	eef0 0a68 	vmov.f32	s1, s17
 800a594:	b00b      	add	sp, #44	; 0x2c
 800a596:	ecbd 8b02 	vpop	{d8}
 800a59a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a59c:	4919      	ldr	r1, [pc, #100]	; (800a604 <exp+0xf4>)
 800a59e:	2000      	movs	r0, #0
 800a5a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d1e5      	bne.n	800a574 <exp+0x64>
 800a5a8:	f001 f8fc 	bl	800b7a4 <__errno>
 800a5ac:	2322      	movs	r3, #34	; 0x22
 800a5ae:	6003      	str	r3, [r0, #0]
 800a5b0:	e7e4      	b.n	800a57c <exp+0x6c>
 800a5b2:	a30f      	add	r3, pc, #60	; (adr r3, 800a5f0 <exp+0xe0>)
 800a5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	4629      	mov	r1, r5
 800a5bc:	f7f6 faae 	bl	8000b1c <__aeabi_dcmplt>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d0e3      	beq.n	800a58c <exp+0x7c>
 800a5c4:	2304      	movs	r3, #4
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	4b0c      	ldr	r3, [pc, #48]	; (800a5fc <exp+0xec>)
 800a5ca:	9301      	str	r3, [sp, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5d4:	9708      	str	r7, [sp, #32]
 800a5d6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a5da:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a5de:	f996 3000 	ldrsb.w	r3, [r6]
 800a5e2:	e7df      	b.n	800a5a4 <exp+0x94>
 800a5e4:	f3af 8000 	nop.w
 800a5e8:	fefa39ef 	.word	0xfefa39ef
 800a5ec:	40862e42 	.word	0x40862e42
 800a5f0:	d52d3051 	.word	0xd52d3051
 800a5f4:	c0874910 	.word	0xc0874910
 800a5f8:	20000049 	.word	0x20000049
 800a5fc:	0800fc74 	.word	0x0800fc74
 800a600:	47efffff 	.word	0x47efffff
 800a604:	7ff00000 	.word	0x7ff00000

0800a608 <sqrt>:
 800a608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a60c:	ed2d 8b02 	vpush	{d8}
 800a610:	b08b      	sub	sp, #44	; 0x2c
 800a612:	ec55 4b10 	vmov	r4, r5, d0
 800a616:	f000 fa6d 	bl	800aaf4 <__ieee754_sqrt>
 800a61a:	4b26      	ldr	r3, [pc, #152]	; (800a6b4 <sqrt+0xac>)
 800a61c:	eeb0 8a40 	vmov.f32	s16, s0
 800a620:	eef0 8a60 	vmov.f32	s17, s1
 800a624:	f993 6000 	ldrsb.w	r6, [r3]
 800a628:	1c73      	adds	r3, r6, #1
 800a62a:	d02a      	beq.n	800a682 <sqrt+0x7a>
 800a62c:	4622      	mov	r2, r4
 800a62e:	462b      	mov	r3, r5
 800a630:	4620      	mov	r0, r4
 800a632:	4629      	mov	r1, r5
 800a634:	f7f6 fa9a 	bl	8000b6c <__aeabi_dcmpun>
 800a638:	4607      	mov	r7, r0
 800a63a:	bb10      	cbnz	r0, 800a682 <sqrt+0x7a>
 800a63c:	f04f 0800 	mov.w	r8, #0
 800a640:	f04f 0900 	mov.w	r9, #0
 800a644:	4642      	mov	r2, r8
 800a646:	464b      	mov	r3, r9
 800a648:	4620      	mov	r0, r4
 800a64a:	4629      	mov	r1, r5
 800a64c:	f7f6 fa66 	bl	8000b1c <__aeabi_dcmplt>
 800a650:	b1b8      	cbz	r0, 800a682 <sqrt+0x7a>
 800a652:	2301      	movs	r3, #1
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	4b18      	ldr	r3, [pc, #96]	; (800a6b8 <sqrt+0xb0>)
 800a658:	9301      	str	r3, [sp, #4]
 800a65a:	9708      	str	r7, [sp, #32]
 800a65c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a660:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a664:	b9b6      	cbnz	r6, 800a694 <sqrt+0x8c>
 800a666:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a66a:	4668      	mov	r0, sp
 800a66c:	f000 ffda 	bl	800b624 <matherr>
 800a670:	b1d0      	cbz	r0, 800a6a8 <sqrt+0xa0>
 800a672:	9b08      	ldr	r3, [sp, #32]
 800a674:	b11b      	cbz	r3, 800a67e <sqrt+0x76>
 800a676:	f001 f895 	bl	800b7a4 <__errno>
 800a67a:	9b08      	ldr	r3, [sp, #32]
 800a67c:	6003      	str	r3, [r0, #0]
 800a67e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a682:	eeb0 0a48 	vmov.f32	s0, s16
 800a686:	eef0 0a68 	vmov.f32	s1, s17
 800a68a:	b00b      	add	sp, #44	; 0x2c
 800a68c:	ecbd 8b02 	vpop	{d8}
 800a690:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a694:	4642      	mov	r2, r8
 800a696:	464b      	mov	r3, r9
 800a698:	4640      	mov	r0, r8
 800a69a:	4649      	mov	r1, r9
 800a69c:	f7f6 f8f6 	bl	800088c <__aeabi_ddiv>
 800a6a0:	2e02      	cmp	r6, #2
 800a6a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a6a6:	d1e0      	bne.n	800a66a <sqrt+0x62>
 800a6a8:	f001 f87c 	bl	800b7a4 <__errno>
 800a6ac:	2321      	movs	r3, #33	; 0x21
 800a6ae:	6003      	str	r3, [r0, #0]
 800a6b0:	e7df      	b.n	800a672 <sqrt+0x6a>
 800a6b2:	bf00      	nop
 800a6b4:	20000049 	.word	0x20000049
 800a6b8:	0800fc78 	.word	0x0800fc78

0800a6bc <fmodf>:
 800a6bc:	b5d0      	push	{r4, r6, r7, lr}
 800a6be:	ed2d 8b02 	vpush	{d8}
 800a6c2:	b08a      	sub	sp, #40	; 0x28
 800a6c4:	eef0 8a40 	vmov.f32	s17, s0
 800a6c8:	eeb0 8a60 	vmov.f32	s16, s1
 800a6cc:	f000 fac2 	bl	800ac54 <__ieee754_fmodf>
 800a6d0:	4b26      	ldr	r3, [pc, #152]	; (800a76c <fmodf+0xb0>)
 800a6d2:	f993 4000 	ldrsb.w	r4, [r3]
 800a6d6:	1c63      	adds	r3, r4, #1
 800a6d8:	d035      	beq.n	800a746 <fmodf+0x8a>
 800a6da:	eeb4 8a48 	vcmp.f32	s16, s16
 800a6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e2:	d630      	bvs.n	800a746 <fmodf+0x8a>
 800a6e4:	eef4 8a68 	vcmp.f32	s17, s17
 800a6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6ec:	d62b      	bvs.n	800a746 <fmodf+0x8a>
 800a6ee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6f6:	d126      	bne.n	800a746 <fmodf+0x8a>
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	4b1c      	ldr	r3, [pc, #112]	; (800a770 <fmodf+0xb4>)
 800a6fe:	9301      	str	r3, [sp, #4]
 800a700:	ee18 0a90 	vmov	r0, s17
 800a704:	2300      	movs	r3, #0
 800a706:	9308      	str	r3, [sp, #32]
 800a708:	f7f5 ff3e 	bl	8000588 <__aeabi_f2d>
 800a70c:	4606      	mov	r6, r0
 800a70e:	460f      	mov	r7, r1
 800a710:	ee18 0a10 	vmov	r0, s16
 800a714:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a718:	f7f5 ff36 	bl	8000588 <__aeabi_f2d>
 800a71c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a720:	b9ac      	cbnz	r4, 800a74e <fmodf+0x92>
 800a722:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a726:	4668      	mov	r0, sp
 800a728:	f000 ff7c 	bl	800b624 <matherr>
 800a72c:	b1c8      	cbz	r0, 800a762 <fmodf+0xa6>
 800a72e:	9b08      	ldr	r3, [sp, #32]
 800a730:	b11b      	cbz	r3, 800a73a <fmodf+0x7e>
 800a732:	f001 f837 	bl	800b7a4 <__errno>
 800a736:	9b08      	ldr	r3, [sp, #32]
 800a738:	6003      	str	r3, [r0, #0]
 800a73a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a73e:	f7f6 fa73 	bl	8000c28 <__aeabi_d2f>
 800a742:	ee00 0a10 	vmov	s0, r0
 800a746:	b00a      	add	sp, #40	; 0x28
 800a748:	ecbd 8b02 	vpop	{d8}
 800a74c:	bdd0      	pop	{r4, r6, r7, pc}
 800a74e:	2200      	movs	r2, #0
 800a750:	2300      	movs	r3, #0
 800a752:	4610      	mov	r0, r2
 800a754:	4619      	mov	r1, r3
 800a756:	f7f6 f899 	bl	800088c <__aeabi_ddiv>
 800a75a:	2c02      	cmp	r4, #2
 800a75c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a760:	d1e1      	bne.n	800a726 <fmodf+0x6a>
 800a762:	f001 f81f 	bl	800b7a4 <__errno>
 800a766:	2321      	movs	r3, #33	; 0x21
 800a768:	6003      	str	r3, [r0, #0]
 800a76a:	e7e0      	b.n	800a72e <fmodf+0x72>
 800a76c:	20000049 	.word	0x20000049
 800a770:	0800fc7d 	.word	0x0800fc7d

0800a774 <sqrtf>:
 800a774:	b510      	push	{r4, lr}
 800a776:	ed2d 8b02 	vpush	{d8}
 800a77a:	b08a      	sub	sp, #40	; 0x28
 800a77c:	eeb0 8a40 	vmov.f32	s16, s0
 800a780:	f000 fc1c 	bl	800afbc <__ieee754_sqrtf>
 800a784:	4b21      	ldr	r3, [pc, #132]	; (800a80c <sqrtf+0x98>)
 800a786:	f993 4000 	ldrsb.w	r4, [r3]
 800a78a:	1c63      	adds	r3, r4, #1
 800a78c:	d02c      	beq.n	800a7e8 <sqrtf+0x74>
 800a78e:	eeb4 8a48 	vcmp.f32	s16, s16
 800a792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a796:	d627      	bvs.n	800a7e8 <sqrtf+0x74>
 800a798:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a0:	d522      	bpl.n	800a7e8 <sqrtf+0x74>
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	4b1a      	ldr	r3, [pc, #104]	; (800a810 <sqrtf+0x9c>)
 800a7a8:	9301      	str	r3, [sp, #4]
 800a7aa:	ee18 0a10 	vmov	r0, s16
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	9308      	str	r3, [sp, #32]
 800a7b2:	f7f5 fee9 	bl	8000588 <__aeabi_f2d>
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	b9ac      	cbnz	r4, 800a7f0 <sqrtf+0x7c>
 800a7c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a7c8:	4668      	mov	r0, sp
 800a7ca:	f000 ff2b 	bl	800b624 <matherr>
 800a7ce:	b1b8      	cbz	r0, 800a800 <sqrtf+0x8c>
 800a7d0:	9b08      	ldr	r3, [sp, #32]
 800a7d2:	b11b      	cbz	r3, 800a7dc <sqrtf+0x68>
 800a7d4:	f000 ffe6 	bl	800b7a4 <__errno>
 800a7d8:	9b08      	ldr	r3, [sp, #32]
 800a7da:	6003      	str	r3, [r0, #0]
 800a7dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7e0:	f7f6 fa22 	bl	8000c28 <__aeabi_d2f>
 800a7e4:	ee00 0a10 	vmov	s0, r0
 800a7e8:	b00a      	add	sp, #40	; 0x28
 800a7ea:	ecbd 8b02 	vpop	{d8}
 800a7ee:	bd10      	pop	{r4, pc}
 800a7f0:	4610      	mov	r0, r2
 800a7f2:	4619      	mov	r1, r3
 800a7f4:	f7f6 f84a 	bl	800088c <__aeabi_ddiv>
 800a7f8:	2c02      	cmp	r4, #2
 800a7fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a7fe:	d1e3      	bne.n	800a7c8 <sqrtf+0x54>
 800a800:	f000 ffd0 	bl	800b7a4 <__errno>
 800a804:	2321      	movs	r3, #33	; 0x21
 800a806:	6003      	str	r3, [r0, #0]
 800a808:	e7e2      	b.n	800a7d0 <sqrtf+0x5c>
 800a80a:	bf00      	nop
 800a80c:	20000049 	.word	0x20000049
 800a810:	0800fc83 	.word	0x0800fc83
 800a814:	00000000 	.word	0x00000000

0800a818 <__ieee754_exp>:
 800a818:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a81c:	ec55 4b10 	vmov	r4, r5, d0
 800a820:	4aab      	ldr	r2, [pc, #684]	; (800aad0 <__ieee754_exp+0x2b8>)
 800a822:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a826:	4296      	cmp	r6, r2
 800a828:	ea4f 77d5 	mov.w	r7, r5, lsr #31
 800a82c:	d932      	bls.n	800a894 <__ieee754_exp+0x7c>
 800a82e:	4aa9      	ldr	r2, [pc, #676]	; (800aad4 <__ieee754_exp+0x2bc>)
 800a830:	4296      	cmp	r6, r2
 800a832:	d913      	bls.n	800a85c <__ieee754_exp+0x44>
 800a834:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a838:	4323      	orrs	r3, r4
 800a83a:	ee10 2a10 	vmov	r2, s0
 800a83e:	d007      	beq.n	800a850 <__ieee754_exp+0x38>
 800a840:	462b      	mov	r3, r5
 800a842:	4620      	mov	r0, r4
 800a844:	4629      	mov	r1, r5
 800a846:	f7f5 fd41 	bl	80002cc <__adddf3>
 800a84a:	4604      	mov	r4, r0
 800a84c:	460d      	mov	r5, r1
 800a84e:	e000      	b.n	800a852 <__ieee754_exp+0x3a>
 800a850:	b9ef      	cbnz	r7, 800a88e <__ieee754_exp+0x76>
 800a852:	ec45 4b10 	vmov	d0, r4, r5
 800a856:	b004      	add	sp, #16
 800a858:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a85c:	a386      	add	r3, pc, #536	; (adr r3, 800aa78 <__ieee754_exp+0x260>)
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	ee10 0a10 	vmov	r0, s0
 800a866:	4629      	mov	r1, r5
 800a868:	f7f6 f976 	bl	8000b58 <__aeabi_dcmpgt>
 800a86c:	b138      	cbz	r0, 800a87e <__ieee754_exp+0x66>
 800a86e:	a384      	add	r3, pc, #528	; (adr r3, 800aa80 <__ieee754_exp+0x268>)
 800a870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a874:	4610      	mov	r0, r2
 800a876:	4619      	mov	r1, r3
 800a878:	f7f5 fede 	bl	8000638 <__aeabi_dmul>
 800a87c:	e7e5      	b.n	800a84a <__ieee754_exp+0x32>
 800a87e:	a382      	add	r3, pc, #520	; (adr r3, 800aa88 <__ieee754_exp+0x270>)
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	4620      	mov	r0, r4
 800a886:	4629      	mov	r1, r5
 800a888:	f7f6 f948 	bl	8000b1c <__aeabi_dcmplt>
 800a88c:	b130      	cbz	r0, 800a89c <__ieee754_exp+0x84>
 800a88e:	2400      	movs	r4, #0
 800a890:	2500      	movs	r5, #0
 800a892:	e7de      	b.n	800a852 <__ieee754_exp+0x3a>
 800a894:	4b90      	ldr	r3, [pc, #576]	; (800aad8 <__ieee754_exp+0x2c0>)
 800a896:	429e      	cmp	r6, r3
 800a898:	f240 80a6 	bls.w	800a9e8 <__ieee754_exp+0x1d0>
 800a89c:	4b8f      	ldr	r3, [pc, #572]	; (800aadc <__ieee754_exp+0x2c4>)
 800a89e:	429e      	cmp	r6, r3
 800a8a0:	ea4f 08c7 	mov.w	r8, r7, lsl #3
 800a8a4:	d875      	bhi.n	800a992 <__ieee754_exp+0x17a>
 800a8a6:	4b8e      	ldr	r3, [pc, #568]	; (800aae0 <__ieee754_exp+0x2c8>)
 800a8a8:	4e8e      	ldr	r6, [pc, #568]	; (800aae4 <__ieee754_exp+0x2cc>)
 800a8aa:	4443      	add	r3, r8
 800a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b0:	4620      	mov	r0, r4
 800a8b2:	4629      	mov	r1, r5
 800a8b4:	f7f5 fd08 	bl	80002c8 <__aeabi_dsub>
 800a8b8:	4446      	add	r6, r8
 800a8ba:	e9cd 0100 	strd	r0, r1, [sp]
 800a8be:	e9d6 8900 	ldrd	r8, r9, [r6]
 800a8c2:	f1c7 0a01 	rsb	sl, r7, #1
 800a8c6:	ebaa 0a07 	sub.w	sl, sl, r7
 800a8ca:	4642      	mov	r2, r8
 800a8cc:	464b      	mov	r3, r9
 800a8ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a8d2:	f7f5 fcf9 	bl	80002c8 <__aeabi_dsub>
 800a8d6:	4604      	mov	r4, r0
 800a8d8:	460d      	mov	r5, r1
 800a8da:	4622      	mov	r2, r4
 800a8dc:	462b      	mov	r3, r5
 800a8de:	4620      	mov	r0, r4
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	f7f5 fea9 	bl	8000638 <__aeabi_dmul>
 800a8e6:	a36a      	add	r3, pc, #424	; (adr r3, 800aa90 <__ieee754_exp+0x278>)
 800a8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	460f      	mov	r7, r1
 800a8f0:	f7f5 fea2 	bl	8000638 <__aeabi_dmul>
 800a8f4:	a368      	add	r3, pc, #416	; (adr r3, 800aa98 <__ieee754_exp+0x280>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7f5 fce5 	bl	80002c8 <__aeabi_dsub>
 800a8fe:	4632      	mov	r2, r6
 800a900:	463b      	mov	r3, r7
 800a902:	f7f5 fe99 	bl	8000638 <__aeabi_dmul>
 800a906:	a366      	add	r3, pc, #408	; (adr r3, 800aaa0 <__ieee754_exp+0x288>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	f7f5 fcde 	bl	80002cc <__adddf3>
 800a910:	4632      	mov	r2, r6
 800a912:	463b      	mov	r3, r7
 800a914:	f7f5 fe90 	bl	8000638 <__aeabi_dmul>
 800a918:	a363      	add	r3, pc, #396	; (adr r3, 800aaa8 <__ieee754_exp+0x290>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	f7f5 fcd3 	bl	80002c8 <__aeabi_dsub>
 800a922:	4632      	mov	r2, r6
 800a924:	463b      	mov	r3, r7
 800a926:	f7f5 fe87 	bl	8000638 <__aeabi_dmul>
 800a92a:	a361      	add	r3, pc, #388	; (adr r3, 800aab0 <__ieee754_exp+0x298>)
 800a92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a930:	f7f5 fccc 	bl	80002cc <__adddf3>
 800a934:	4632      	mov	r2, r6
 800a936:	463b      	mov	r3, r7
 800a938:	f7f5 fe7e 	bl	8000638 <__aeabi_dmul>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4620      	mov	r0, r4
 800a942:	4629      	mov	r1, r5
 800a944:	f7f5 fcc0 	bl	80002c8 <__aeabi_dsub>
 800a948:	4602      	mov	r2, r0
 800a94a:	460b      	mov	r3, r1
 800a94c:	4606      	mov	r6, r0
 800a94e:	460f      	mov	r7, r1
 800a950:	4620      	mov	r0, r4
 800a952:	4629      	mov	r1, r5
 800a954:	f7f5 fe70 	bl	8000638 <__aeabi_dmul>
 800a958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a95c:	f1ba 0f00 	cmp.w	sl, #0
 800a960:	d15c      	bne.n	800aa1c <__ieee754_exp+0x204>
 800a962:	2200      	movs	r2, #0
 800a964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a968:	4630      	mov	r0, r6
 800a96a:	4639      	mov	r1, r7
 800a96c:	f7f5 fcac 	bl	80002c8 <__aeabi_dsub>
 800a970:	4602      	mov	r2, r0
 800a972:	460b      	mov	r3, r1
 800a974:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a978:	f7f5 ff88 	bl	800088c <__aeabi_ddiv>
 800a97c:	4622      	mov	r2, r4
 800a97e:	462b      	mov	r3, r5
 800a980:	f7f5 fca2 	bl	80002c8 <__aeabi_dsub>
 800a984:	4602      	mov	r2, r0
 800a986:	460b      	mov	r3, r1
 800a988:	2000      	movs	r0, #0
 800a98a:	4957      	ldr	r1, [pc, #348]	; (800aae8 <__ieee754_exp+0x2d0>)
 800a98c:	f7f5 fc9c 	bl	80002c8 <__aeabi_dsub>
 800a990:	e75b      	b.n	800a84a <__ieee754_exp+0x32>
 800a992:	4e56      	ldr	r6, [pc, #344]	; (800aaec <__ieee754_exp+0x2d4>)
 800a994:	a348      	add	r3, pc, #288	; (adr r3, 800aab8 <__ieee754_exp+0x2a0>)
 800a996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a99a:	4446      	add	r6, r8
 800a99c:	4620      	mov	r0, r4
 800a99e:	4629      	mov	r1, r5
 800a9a0:	f7f5 fe4a 	bl	8000638 <__aeabi_dmul>
 800a9a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a9a8:	f7f5 fc90 	bl	80002cc <__adddf3>
 800a9ac:	f7f6 f8f4 	bl	8000b98 <__aeabi_d2iz>
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	f7f5 fdd7 	bl	8000564 <__aeabi_i2d>
 800a9b6:	a342      	add	r3, pc, #264	; (adr r3, 800aac0 <__ieee754_exp+0x2a8>)
 800a9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9bc:	4606      	mov	r6, r0
 800a9be:	460f      	mov	r7, r1
 800a9c0:	f7f5 fe3a 	bl	8000638 <__aeabi_dmul>
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	4629      	mov	r1, r5
 800a9cc:	f7f5 fc7c 	bl	80002c8 <__aeabi_dsub>
 800a9d0:	a33d      	add	r3, pc, #244	; (adr r3, 800aac8 <__ieee754_exp+0x2b0>)
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	e9cd 0100 	strd	r0, r1, [sp]
 800a9da:	4630      	mov	r0, r6
 800a9dc:	4639      	mov	r1, r7
 800a9de:	f7f5 fe2b 	bl	8000638 <__aeabi_dmul>
 800a9e2:	4680      	mov	r8, r0
 800a9e4:	4689      	mov	r9, r1
 800a9e6:	e770      	b.n	800a8ca <__ieee754_exp+0xb2>
 800a9e8:	4b41      	ldr	r3, [pc, #260]	; (800aaf0 <__ieee754_exp+0x2d8>)
 800a9ea:	429e      	cmp	r6, r3
 800a9ec:	d811      	bhi.n	800aa12 <__ieee754_exp+0x1fa>
 800a9ee:	a324      	add	r3, pc, #144	; (adr r3, 800aa80 <__ieee754_exp+0x268>)
 800a9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f4:	ee10 0a10 	vmov	r0, s0
 800a9f8:	4629      	mov	r1, r5
 800a9fa:	f7f5 fc67 	bl	80002cc <__adddf3>
 800a9fe:	2200      	movs	r2, #0
 800aa00:	4b39      	ldr	r3, [pc, #228]	; (800aae8 <__ieee754_exp+0x2d0>)
 800aa02:	f7f6 f8a9 	bl	8000b58 <__aeabi_dcmpgt>
 800aa06:	b138      	cbz	r0, 800aa18 <__ieee754_exp+0x200>
 800aa08:	2200      	movs	r2, #0
 800aa0a:	4b37      	ldr	r3, [pc, #220]	; (800aae8 <__ieee754_exp+0x2d0>)
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	4629      	mov	r1, r5
 800aa10:	e719      	b.n	800a846 <__ieee754_exp+0x2e>
 800aa12:	f04f 0a00 	mov.w	sl, #0
 800aa16:	e760      	b.n	800a8da <__ieee754_exp+0xc2>
 800aa18:	4682      	mov	sl, r0
 800aa1a:	e75e      	b.n	800a8da <__ieee754_exp+0xc2>
 800aa1c:	4632      	mov	r2, r6
 800aa1e:	463b      	mov	r3, r7
 800aa20:	2000      	movs	r0, #0
 800aa22:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800aa26:	f7f5 fc4f 	bl	80002c8 <__aeabi_dsub>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa32:	f7f5 ff2b 	bl	800088c <__aeabi_ddiv>
 800aa36:	4602      	mov	r2, r0
 800aa38:	460b      	mov	r3, r1
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	4649      	mov	r1, r9
 800aa3e:	f7f5 fc43 	bl	80002c8 <__aeabi_dsub>
 800aa42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa46:	f7f5 fc3f 	bl	80002c8 <__aeabi_dsub>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	2000      	movs	r0, #0
 800aa50:	4925      	ldr	r1, [pc, #148]	; (800aae8 <__ieee754_exp+0x2d0>)
 800aa52:	f7f5 fc39 	bl	80002c8 <__aeabi_dsub>
 800aa56:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800aa5a:	4592      	cmp	sl, r2
 800aa5c:	db02      	blt.n	800aa64 <__ieee754_exp+0x24c>
 800aa5e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800aa62:	e6f2      	b.n	800a84a <__ieee754_exp+0x32>
 800aa64:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800aa68:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800aa72:	e701      	b.n	800a878 <__ieee754_exp+0x60>
 800aa74:	f3af 8000 	nop.w
 800aa78:	fefa39ef 	.word	0xfefa39ef
 800aa7c:	40862e42 	.word	0x40862e42
 800aa80:	8800759c 	.word	0x8800759c
 800aa84:	7e37e43c 	.word	0x7e37e43c
 800aa88:	d52d3051 	.word	0xd52d3051
 800aa8c:	c0874910 	.word	0xc0874910
 800aa90:	72bea4d0 	.word	0x72bea4d0
 800aa94:	3e663769 	.word	0x3e663769
 800aa98:	c5d26bf1 	.word	0xc5d26bf1
 800aa9c:	3ebbbd41 	.word	0x3ebbbd41
 800aaa0:	af25de2c 	.word	0xaf25de2c
 800aaa4:	3f11566a 	.word	0x3f11566a
 800aaa8:	16bebd93 	.word	0x16bebd93
 800aaac:	3f66c16c 	.word	0x3f66c16c
 800aab0:	5555553e 	.word	0x5555553e
 800aab4:	3fc55555 	.word	0x3fc55555
 800aab8:	652b82fe 	.word	0x652b82fe
 800aabc:	3ff71547 	.word	0x3ff71547
 800aac0:	fee00000 	.word	0xfee00000
 800aac4:	3fe62e42 	.word	0x3fe62e42
 800aac8:	35793c76 	.word	0x35793c76
 800aacc:	3dea39ef 	.word	0x3dea39ef
 800aad0:	40862e41 	.word	0x40862e41
 800aad4:	7fefffff 	.word	0x7fefffff
 800aad8:	3fd62e42 	.word	0x3fd62e42
 800aadc:	3ff0a2b1 	.word	0x3ff0a2b1
 800aae0:	0800fca0 	.word	0x0800fca0
 800aae4:	0800fcb0 	.word	0x0800fcb0
 800aae8:	3ff00000 	.word	0x3ff00000
 800aaec:	0800fc90 	.word	0x0800fc90
 800aaf0:	3e2fffff 	.word	0x3e2fffff

0800aaf4 <__ieee754_sqrt>:
 800aaf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf8:	4955      	ldr	r1, [pc, #340]	; (800ac50 <__ieee754_sqrt+0x15c>)
 800aafa:	ec55 4b10 	vmov	r4, r5, d0
 800aafe:	43a9      	bics	r1, r5
 800ab00:	462b      	mov	r3, r5
 800ab02:	462a      	mov	r2, r5
 800ab04:	d112      	bne.n	800ab2c <__ieee754_sqrt+0x38>
 800ab06:	ee10 2a10 	vmov	r2, s0
 800ab0a:	ee10 0a10 	vmov	r0, s0
 800ab0e:	4629      	mov	r1, r5
 800ab10:	f7f5 fd92 	bl	8000638 <__aeabi_dmul>
 800ab14:	4602      	mov	r2, r0
 800ab16:	460b      	mov	r3, r1
 800ab18:	4620      	mov	r0, r4
 800ab1a:	4629      	mov	r1, r5
 800ab1c:	f7f5 fbd6 	bl	80002cc <__adddf3>
 800ab20:	4604      	mov	r4, r0
 800ab22:	460d      	mov	r5, r1
 800ab24:	ec45 4b10 	vmov	d0, r4, r5
 800ab28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab2c:	2d00      	cmp	r5, #0
 800ab2e:	ee10 0a10 	vmov	r0, s0
 800ab32:	4621      	mov	r1, r4
 800ab34:	dc0f      	bgt.n	800ab56 <__ieee754_sqrt+0x62>
 800ab36:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ab3a:	4330      	orrs	r0, r6
 800ab3c:	d0f2      	beq.n	800ab24 <__ieee754_sqrt+0x30>
 800ab3e:	b155      	cbz	r5, 800ab56 <__ieee754_sqrt+0x62>
 800ab40:	ee10 2a10 	vmov	r2, s0
 800ab44:	4620      	mov	r0, r4
 800ab46:	4629      	mov	r1, r5
 800ab48:	f7f5 fbbe 	bl	80002c8 <__aeabi_dsub>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	460b      	mov	r3, r1
 800ab50:	f7f5 fe9c 	bl	800088c <__aeabi_ddiv>
 800ab54:	e7e4      	b.n	800ab20 <__ieee754_sqrt+0x2c>
 800ab56:	151b      	asrs	r3, r3, #20
 800ab58:	d073      	beq.n	800ac42 <__ieee754_sqrt+0x14e>
 800ab5a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ab5e:	07dd      	lsls	r5, r3, #31
 800ab60:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ab64:	bf48      	it	mi
 800ab66:	0fc8      	lsrmi	r0, r1, #31
 800ab68:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ab6c:	bf44      	itt	mi
 800ab6e:	0049      	lslmi	r1, r1, #1
 800ab70:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800ab74:	2500      	movs	r5, #0
 800ab76:	1058      	asrs	r0, r3, #1
 800ab78:	0fcb      	lsrs	r3, r1, #31
 800ab7a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ab7e:	0049      	lsls	r1, r1, #1
 800ab80:	2316      	movs	r3, #22
 800ab82:	462c      	mov	r4, r5
 800ab84:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ab88:	19a7      	adds	r7, r4, r6
 800ab8a:	4297      	cmp	r7, r2
 800ab8c:	bfde      	ittt	le
 800ab8e:	19bc      	addle	r4, r7, r6
 800ab90:	1bd2      	suble	r2, r2, r7
 800ab92:	19ad      	addle	r5, r5, r6
 800ab94:	0fcf      	lsrs	r7, r1, #31
 800ab96:	3b01      	subs	r3, #1
 800ab98:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800ab9c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800aba0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800aba4:	d1f0      	bne.n	800ab88 <__ieee754_sqrt+0x94>
 800aba6:	f04f 0c20 	mov.w	ip, #32
 800abaa:	469e      	mov	lr, r3
 800abac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800abb0:	42a2      	cmp	r2, r4
 800abb2:	eb06 070e 	add.w	r7, r6, lr
 800abb6:	dc02      	bgt.n	800abbe <__ieee754_sqrt+0xca>
 800abb8:	d112      	bne.n	800abe0 <__ieee754_sqrt+0xec>
 800abba:	428f      	cmp	r7, r1
 800abbc:	d810      	bhi.n	800abe0 <__ieee754_sqrt+0xec>
 800abbe:	2f00      	cmp	r7, #0
 800abc0:	eb07 0e06 	add.w	lr, r7, r6
 800abc4:	da42      	bge.n	800ac4c <__ieee754_sqrt+0x158>
 800abc6:	f1be 0f00 	cmp.w	lr, #0
 800abca:	db3f      	blt.n	800ac4c <__ieee754_sqrt+0x158>
 800abcc:	f104 0801 	add.w	r8, r4, #1
 800abd0:	1b12      	subs	r2, r2, r4
 800abd2:	428f      	cmp	r7, r1
 800abd4:	bf88      	it	hi
 800abd6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800abda:	1bc9      	subs	r1, r1, r7
 800abdc:	4433      	add	r3, r6
 800abde:	4644      	mov	r4, r8
 800abe0:	0052      	lsls	r2, r2, #1
 800abe2:	f1bc 0c01 	subs.w	ip, ip, #1
 800abe6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800abea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800abee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800abf2:	d1dd      	bne.n	800abb0 <__ieee754_sqrt+0xbc>
 800abf4:	430a      	orrs	r2, r1
 800abf6:	d006      	beq.n	800ac06 <__ieee754_sqrt+0x112>
 800abf8:	1c5c      	adds	r4, r3, #1
 800abfa:	bf13      	iteet	ne
 800abfc:	3301      	addne	r3, #1
 800abfe:	3501      	addeq	r5, #1
 800ac00:	4663      	moveq	r3, ip
 800ac02:	f023 0301 	bicne.w	r3, r3, #1
 800ac06:	106a      	asrs	r2, r5, #1
 800ac08:	085b      	lsrs	r3, r3, #1
 800ac0a:	07e9      	lsls	r1, r5, #31
 800ac0c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ac10:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ac14:	bf48      	it	mi
 800ac16:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ac1a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800ac1e:	461c      	mov	r4, r3
 800ac20:	e780      	b.n	800ab24 <__ieee754_sqrt+0x30>
 800ac22:	0aca      	lsrs	r2, r1, #11
 800ac24:	3815      	subs	r0, #21
 800ac26:	0549      	lsls	r1, r1, #21
 800ac28:	2a00      	cmp	r2, #0
 800ac2a:	d0fa      	beq.n	800ac22 <__ieee754_sqrt+0x12e>
 800ac2c:	02d6      	lsls	r6, r2, #11
 800ac2e:	d50a      	bpl.n	800ac46 <__ieee754_sqrt+0x152>
 800ac30:	f1c3 0420 	rsb	r4, r3, #32
 800ac34:	fa21 f404 	lsr.w	r4, r1, r4
 800ac38:	1e5d      	subs	r5, r3, #1
 800ac3a:	4099      	lsls	r1, r3
 800ac3c:	4322      	orrs	r2, r4
 800ac3e:	1b43      	subs	r3, r0, r5
 800ac40:	e78b      	b.n	800ab5a <__ieee754_sqrt+0x66>
 800ac42:	4618      	mov	r0, r3
 800ac44:	e7f0      	b.n	800ac28 <__ieee754_sqrt+0x134>
 800ac46:	0052      	lsls	r2, r2, #1
 800ac48:	3301      	adds	r3, #1
 800ac4a:	e7ef      	b.n	800ac2c <__ieee754_sqrt+0x138>
 800ac4c:	46a0      	mov	r8, r4
 800ac4e:	e7bf      	b.n	800abd0 <__ieee754_sqrt+0xdc>
 800ac50:	7ff00000 	.word	0x7ff00000

0800ac54 <__ieee754_fmodf>:
 800ac54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac56:	ee10 6a90 	vmov	r6, s1
 800ac5a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800ac5e:	ee10 3a10 	vmov	r3, s0
 800ac62:	d009      	beq.n	800ac78 <__ieee754_fmodf+0x24>
 800ac64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ac68:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800ac6c:	ee10 7a10 	vmov	r7, s0
 800ac70:	da02      	bge.n	800ac78 <__ieee754_fmodf+0x24>
 800ac72:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ac76:	dd0a      	ble.n	800ac8e <__ieee754_fmodf+0x3a>
 800ac78:	ee07 3a90 	vmov	s15, r3
 800ac7c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800ac80:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 800ac84:	ee17 3a90 	vmov	r3, s15
 800ac88:	ee00 3a10 	vmov	s0, r3
 800ac8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac8e:	42a9      	cmp	r1, r5
 800ac90:	dbfa      	blt.n	800ac88 <__ieee754_fmodf+0x34>
 800ac92:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 800ac96:	d105      	bne.n	800aca4 <__ieee754_fmodf+0x50>
 800ac98:	4a30      	ldr	r2, [pc, #192]	; (800ad5c <__ieee754_fmodf+0x108>)
 800ac9a:	0fe3      	lsrs	r3, r4, #31
 800ac9c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	e7f1      	b.n	800ac88 <__ieee754_fmodf+0x34>
 800aca4:	4b2e      	ldr	r3, [pc, #184]	; (800ad60 <__ieee754_fmodf+0x10c>)
 800aca6:	4299      	cmp	r1, r3
 800aca8:	dc3e      	bgt.n	800ad28 <__ieee754_fmodf+0xd4>
 800acaa:	020a      	lsls	r2, r1, #8
 800acac:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800acb0:	2a00      	cmp	r2, #0
 800acb2:	dc36      	bgt.n	800ad22 <__ieee754_fmodf+0xce>
 800acb4:	429d      	cmp	r5, r3
 800acb6:	dc3a      	bgt.n	800ad2e <__ieee754_fmodf+0xda>
 800acb8:	022b      	lsls	r3, r5, #8
 800acba:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800acbe:	005b      	lsls	r3, r3, #1
 800acc0:	f102 32ff 	add.w	r2, r2, #4294967295
 800acc4:	d5fb      	bpl.n	800acbe <__ieee754_fmodf+0x6a>
 800acc6:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800acca:	bfbb      	ittet	lt
 800accc:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800acd0:	1a1b      	sublt	r3, r3, r0
 800acd2:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 800acd6:	4099      	lsllt	r1, r3
 800acd8:	bfa8      	it	ge
 800acda:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 800acde:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800ace2:	bfb5      	itete	lt
 800ace4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800ace8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800acec:	1a9b      	sublt	r3, r3, r2
 800acee:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800acf2:	bfb8      	it	lt
 800acf4:	409d      	lsllt	r5, r3
 800acf6:	1a80      	subs	r0, r0, r2
 800acf8:	1b4b      	subs	r3, r1, r5
 800acfa:	b9d8      	cbnz	r0, 800ad34 <__ieee754_fmodf+0xe0>
 800acfc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800ad00:	bf28      	it	cs
 800ad02:	460b      	movcs	r3, r1
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d0c7      	beq.n	800ac98 <__ieee754_fmodf+0x44>
 800ad08:	4915      	ldr	r1, [pc, #84]	; (800ad60 <__ieee754_fmodf+0x10c>)
 800ad0a:	428b      	cmp	r3, r1
 800ad0c:	dd1a      	ble.n	800ad44 <__ieee754_fmodf+0xf0>
 800ad0e:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800ad12:	db1a      	blt.n	800ad4a <__ieee754_fmodf+0xf6>
 800ad14:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800ad18:	4323      	orrs	r3, r4
 800ad1a:	327f      	adds	r2, #127	; 0x7f
 800ad1c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800ad20:	e7b2      	b.n	800ac88 <__ieee754_fmodf+0x34>
 800ad22:	3801      	subs	r0, #1
 800ad24:	0052      	lsls	r2, r2, #1
 800ad26:	e7c3      	b.n	800acb0 <__ieee754_fmodf+0x5c>
 800ad28:	15c8      	asrs	r0, r1, #23
 800ad2a:	387f      	subs	r0, #127	; 0x7f
 800ad2c:	e7c2      	b.n	800acb4 <__ieee754_fmodf+0x60>
 800ad2e:	15ea      	asrs	r2, r5, #23
 800ad30:	3a7f      	subs	r2, #127	; 0x7f
 800ad32:	e7c8      	b.n	800acc6 <__ieee754_fmodf+0x72>
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	da02      	bge.n	800ad3e <__ieee754_fmodf+0xea>
 800ad38:	0049      	lsls	r1, r1, #1
 800ad3a:	3801      	subs	r0, #1
 800ad3c:	e7dc      	b.n	800acf8 <__ieee754_fmodf+0xa4>
 800ad3e:	d0ab      	beq.n	800ac98 <__ieee754_fmodf+0x44>
 800ad40:	0059      	lsls	r1, r3, #1
 800ad42:	e7fa      	b.n	800ad3a <__ieee754_fmodf+0xe6>
 800ad44:	005b      	lsls	r3, r3, #1
 800ad46:	3a01      	subs	r2, #1
 800ad48:	e7df      	b.n	800ad0a <__ieee754_fmodf+0xb6>
 800ad4a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ad4e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ad52:	3282      	adds	r2, #130	; 0x82
 800ad54:	4113      	asrs	r3, r2
 800ad56:	4323      	orrs	r3, r4
 800ad58:	e796      	b.n	800ac88 <__ieee754_fmodf+0x34>
 800ad5a:	bf00      	nop
 800ad5c:	0800fcc0 	.word	0x0800fcc0
 800ad60:	007fffff 	.word	0x007fffff

0800ad64 <__ieee754_rem_pio2f>:
 800ad64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad66:	ee10 6a10 	vmov	r6, s0
 800ad6a:	4b86      	ldr	r3, [pc, #536]	; (800af84 <__ieee754_rem_pio2f+0x220>)
 800ad6c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800ad70:	429c      	cmp	r4, r3
 800ad72:	b087      	sub	sp, #28
 800ad74:	4605      	mov	r5, r0
 800ad76:	dc05      	bgt.n	800ad84 <__ieee754_rem_pio2f+0x20>
 800ad78:	2300      	movs	r3, #0
 800ad7a:	ed85 0a00 	vstr	s0, [r5]
 800ad7e:	6043      	str	r3, [r0, #4]
 800ad80:	2000      	movs	r0, #0
 800ad82:	e020      	b.n	800adc6 <__ieee754_rem_pio2f+0x62>
 800ad84:	4b80      	ldr	r3, [pc, #512]	; (800af88 <__ieee754_rem_pio2f+0x224>)
 800ad86:	429c      	cmp	r4, r3
 800ad88:	dc38      	bgt.n	800adfc <__ieee754_rem_pio2f+0x98>
 800ad8a:	2e00      	cmp	r6, #0
 800ad8c:	f024 040f 	bic.w	r4, r4, #15
 800ad90:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800af8c <__ieee754_rem_pio2f+0x228>
 800ad94:	4b7e      	ldr	r3, [pc, #504]	; (800af90 <__ieee754_rem_pio2f+0x22c>)
 800ad96:	dd18      	ble.n	800adca <__ieee754_rem_pio2f+0x66>
 800ad98:	429c      	cmp	r4, r3
 800ad9a:	ee70 7a47 	vsub.f32	s15, s0, s14
 800ad9e:	bf09      	itett	eq
 800ada0:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800af94 <__ieee754_rem_pio2f+0x230>
 800ada4:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800af98 <__ieee754_rem_pio2f+0x234>
 800ada8:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800adac:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800af9c <__ieee754_rem_pio2f+0x238>
 800adb0:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800adb4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800adb8:	edc0 6a00 	vstr	s13, [r0]
 800adbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800adc0:	edc0 7a01 	vstr	s15, [r0, #4]
 800adc4:	2001      	movs	r0, #1
 800adc6:	b007      	add	sp, #28
 800adc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adca:	429c      	cmp	r4, r3
 800adcc:	ee70 7a07 	vadd.f32	s15, s0, s14
 800add0:	bf09      	itett	eq
 800add2:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800af94 <__ieee754_rem_pio2f+0x230>
 800add6:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800af98 <__ieee754_rem_pio2f+0x234>
 800adda:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800adde:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800af9c <__ieee754_rem_pio2f+0x238>
 800ade2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ade6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800adea:	edc0 6a00 	vstr	s13, [r0]
 800adee:	ee77 7a87 	vadd.f32	s15, s15, s14
 800adf2:	edc0 7a01 	vstr	s15, [r0, #4]
 800adf6:	f04f 30ff 	mov.w	r0, #4294967295
 800adfa:	e7e4      	b.n	800adc6 <__ieee754_rem_pio2f+0x62>
 800adfc:	4b68      	ldr	r3, [pc, #416]	; (800afa0 <__ieee754_rem_pio2f+0x23c>)
 800adfe:	429c      	cmp	r4, r3
 800ae00:	dc71      	bgt.n	800aee6 <__ieee754_rem_pio2f+0x182>
 800ae02:	f000 fc11 	bl	800b628 <fabsf>
 800ae06:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800afa4 <__ieee754_rem_pio2f+0x240>
 800ae0a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ae0e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ae12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae16:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800ae1a:	ee17 0a90 	vmov	r0, s15
 800ae1e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800af8c <__ieee754_rem_pio2f+0x228>
 800ae22:	eeb1 7a46 	vneg.f32	s14, s12
 800ae26:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ae2a:	281f      	cmp	r0, #31
 800ae2c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800af98 <__ieee754_rem_pio2f+0x234>
 800ae30:	ee66 7a27 	vmul.f32	s15, s12, s15
 800ae34:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ae38:	ee16 3a90 	vmov	r3, s13
 800ae3c:	dc1c      	bgt.n	800ae78 <__ieee754_rem_pio2f+0x114>
 800ae3e:	1e47      	subs	r7, r0, #1
 800ae40:	4959      	ldr	r1, [pc, #356]	; (800afa8 <__ieee754_rem_pio2f+0x244>)
 800ae42:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800ae46:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800ae4a:	428a      	cmp	r2, r1
 800ae4c:	d014      	beq.n	800ae78 <__ieee754_rem_pio2f+0x114>
 800ae4e:	602b      	str	r3, [r5, #0]
 800ae50:	ed95 7a00 	vldr	s14, [r5]
 800ae54:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ae58:	2e00      	cmp	r6, #0
 800ae5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ae5e:	ed85 0a01 	vstr	s0, [r5, #4]
 800ae62:	dab0      	bge.n	800adc6 <__ieee754_rem_pio2f+0x62>
 800ae64:	eeb1 7a47 	vneg.f32	s14, s14
 800ae68:	eeb1 0a40 	vneg.f32	s0, s0
 800ae6c:	ed85 7a00 	vstr	s14, [r5]
 800ae70:	ed85 0a01 	vstr	s0, [r5, #4]
 800ae74:	4240      	negs	r0, r0
 800ae76:	e7a6      	b.n	800adc6 <__ieee754_rem_pio2f+0x62>
 800ae78:	15e4      	asrs	r4, r4, #23
 800ae7a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ae7e:	1aa2      	subs	r2, r4, r2
 800ae80:	2a08      	cmp	r2, #8
 800ae82:	dde4      	ble.n	800ae4e <__ieee754_rem_pio2f+0xea>
 800ae84:	eddf 7a43 	vldr	s15, [pc, #268]	; 800af94 <__ieee754_rem_pio2f+0x230>
 800ae88:	eef0 6a40 	vmov.f32	s13, s0
 800ae8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 800ae90:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ae94:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ae98:	eddf 7a40 	vldr	s15, [pc, #256]	; 800af9c <__ieee754_rem_pio2f+0x238>
 800ae9c:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800aea0:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800aea4:	eef0 7a40 	vmov.f32	s15, s0
 800aea8:	ee15 3a90 	vmov	r3, s11
 800aeac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800aeb0:	1aa4      	subs	r4, r4, r2
 800aeb2:	2c19      	cmp	r4, #25
 800aeb4:	dc04      	bgt.n	800aec0 <__ieee754_rem_pio2f+0x15c>
 800aeb6:	edc5 5a00 	vstr	s11, [r5]
 800aeba:	eeb0 0a66 	vmov.f32	s0, s13
 800aebe:	e7c7      	b.n	800ae50 <__ieee754_rem_pio2f+0xec>
 800aec0:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800afac <__ieee754_rem_pio2f+0x248>
 800aec4:	eeb0 0a66 	vmov.f32	s0, s13
 800aec8:	eea7 0a25 	vfma.f32	s0, s14, s11
 800aecc:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800aed0:	eee7 7a25 	vfma.f32	s15, s14, s11
 800aed4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800afb0 <__ieee754_rem_pio2f+0x24c>
 800aed8:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800aedc:	ee30 7a67 	vsub.f32	s14, s0, s15
 800aee0:	ed85 7a00 	vstr	s14, [r5]
 800aee4:	e7b4      	b.n	800ae50 <__ieee754_rem_pio2f+0xec>
 800aee6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800aeea:	db06      	blt.n	800aefa <__ieee754_rem_pio2f+0x196>
 800aeec:	ee70 7a40 	vsub.f32	s15, s0, s0
 800aef0:	edc0 7a01 	vstr	s15, [r0, #4]
 800aef4:	edc0 7a00 	vstr	s15, [r0]
 800aef8:	e742      	b.n	800ad80 <__ieee754_rem_pio2f+0x1c>
 800aefa:	15e2      	asrs	r2, r4, #23
 800aefc:	3a86      	subs	r2, #134	; 0x86
 800aefe:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800af02:	ee07 3a90 	vmov	s15, r3
 800af06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800af0a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800afb4 <__ieee754_rem_pio2f+0x250>
 800af0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800af12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af16:	ed8d 7a03 	vstr	s14, [sp, #12]
 800af1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800af1e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800af22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800af26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800af2a:	ed8d 7a04 	vstr	s14, [sp, #16]
 800af2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800af32:	eef5 7a40 	vcmp.f32	s15, #0.0
 800af36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af3a:	edcd 7a05 	vstr	s15, [sp, #20]
 800af3e:	d11e      	bne.n	800af7e <__ieee754_rem_pio2f+0x21a>
 800af40:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800af44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af48:	bf0c      	ite	eq
 800af4a:	2301      	moveq	r3, #1
 800af4c:	2302      	movne	r3, #2
 800af4e:	491a      	ldr	r1, [pc, #104]	; (800afb8 <__ieee754_rem_pio2f+0x254>)
 800af50:	9101      	str	r1, [sp, #4]
 800af52:	2102      	movs	r1, #2
 800af54:	9100      	str	r1, [sp, #0]
 800af56:	a803      	add	r0, sp, #12
 800af58:	4629      	mov	r1, r5
 800af5a:	f000 f891 	bl	800b080 <__kernel_rem_pio2f>
 800af5e:	2e00      	cmp	r6, #0
 800af60:	f6bf af31 	bge.w	800adc6 <__ieee754_rem_pio2f+0x62>
 800af64:	edd5 7a00 	vldr	s15, [r5]
 800af68:	eef1 7a67 	vneg.f32	s15, s15
 800af6c:	edc5 7a00 	vstr	s15, [r5]
 800af70:	edd5 7a01 	vldr	s15, [r5, #4]
 800af74:	eef1 7a67 	vneg.f32	s15, s15
 800af78:	edc5 7a01 	vstr	s15, [r5, #4]
 800af7c:	e77a      	b.n	800ae74 <__ieee754_rem_pio2f+0x110>
 800af7e:	2303      	movs	r3, #3
 800af80:	e7e5      	b.n	800af4e <__ieee754_rem_pio2f+0x1ea>
 800af82:	bf00      	nop
 800af84:	3f490fd8 	.word	0x3f490fd8
 800af88:	4016cbe3 	.word	0x4016cbe3
 800af8c:	3fc90f80 	.word	0x3fc90f80
 800af90:	3fc90fd0 	.word	0x3fc90fd0
 800af94:	37354400 	.word	0x37354400
 800af98:	37354443 	.word	0x37354443
 800af9c:	2e85a308 	.word	0x2e85a308
 800afa0:	43490f80 	.word	0x43490f80
 800afa4:	3f22f984 	.word	0x3f22f984
 800afa8:	0800fcc8 	.word	0x0800fcc8
 800afac:	2e85a300 	.word	0x2e85a300
 800afb0:	248d3132 	.word	0x248d3132
 800afb4:	43800000 	.word	0x43800000
 800afb8:	0800fd48 	.word	0x0800fd48

0800afbc <__ieee754_sqrtf>:
 800afbc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800afc0:	4770      	bx	lr
	...

0800afc4 <__kernel_cosf>:
 800afc4:	ee10 3a10 	vmov	r3, s0
 800afc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afcc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800afd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afd4:	da05      	bge.n	800afe2 <__kernel_cosf+0x1e>
 800afd6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800afda:	ee17 2a90 	vmov	r2, s15
 800afde:	2a00      	cmp	r2, #0
 800afe0:	d03b      	beq.n	800b05a <__kernel_cosf+0x96>
 800afe2:	ee20 6a00 	vmul.f32	s12, s0, s0
 800afe6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800afea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800b060 <__kernel_cosf+0x9c>
 800afee:	4a1d      	ldr	r2, [pc, #116]	; (800b064 <__kernel_cosf+0xa0>)
 800aff0:	ee66 7a07 	vmul.f32	s15, s12, s14
 800aff4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800b068 <__kernel_cosf+0xa4>
 800aff8:	eea6 7a25 	vfma.f32	s14, s12, s11
 800affc:	4293      	cmp	r3, r2
 800affe:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800b06c <__kernel_cosf+0xa8>
 800b002:	eee7 5a06 	vfma.f32	s11, s14, s12
 800b006:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800b070 <__kernel_cosf+0xac>
 800b00a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b00e:	eddf 5a19 	vldr	s11, [pc, #100]	; 800b074 <__kernel_cosf+0xb0>
 800b012:	eee7 5a06 	vfma.f32	s11, s14, s12
 800b016:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800b078 <__kernel_cosf+0xb4>
 800b01a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b01e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800b022:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b026:	eee6 0a07 	vfma.f32	s1, s12, s14
 800b02a:	dc04      	bgt.n	800b036 <__kernel_cosf+0x72>
 800b02c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800b030:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800b034:	4770      	bx	lr
 800b036:	4a11      	ldr	r2, [pc, #68]	; (800b07c <__kernel_cosf+0xb8>)
 800b038:	4293      	cmp	r3, r2
 800b03a:	bfda      	itte	le
 800b03c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b040:	ee07 3a10 	vmovle	s14, r3
 800b044:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800b048:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b04c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800b050:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b054:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b058:	4770      	bx	lr
 800b05a:	eeb0 0a66 	vmov.f32	s0, s13
 800b05e:	4770      	bx	lr
 800b060:	ad47d74e 	.word	0xad47d74e
 800b064:	3e999999 	.word	0x3e999999
 800b068:	310f74f6 	.word	0x310f74f6
 800b06c:	b493f27c 	.word	0xb493f27c
 800b070:	37d00d01 	.word	0x37d00d01
 800b074:	bab60b61 	.word	0xbab60b61
 800b078:	3d2aaaab 	.word	0x3d2aaaab
 800b07c:	3f480000 	.word	0x3f480000

0800b080 <__kernel_rem_pio2f>:
 800b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b084:	ed2d 8b04 	vpush	{d8-d9}
 800b088:	b0d7      	sub	sp, #348	; 0x15c
 800b08a:	469b      	mov	fp, r3
 800b08c:	460e      	mov	r6, r1
 800b08e:	4bbe      	ldr	r3, [pc, #760]	; (800b388 <__kernel_rem_pio2f+0x308>)
 800b090:	9964      	ldr	r1, [sp, #400]	; 0x190
 800b092:	9002      	str	r0, [sp, #8]
 800b094:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800b098:	9865      	ldr	r0, [sp, #404]	; 0x194
 800b09a:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800b398 <__kernel_rem_pio2f+0x318>
 800b09e:	1ed1      	subs	r1, r2, #3
 800b0a0:	2308      	movs	r3, #8
 800b0a2:	fb91 f1f3 	sdiv	r1, r1, r3
 800b0a6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800b0aa:	f10b 3aff 	add.w	sl, fp, #4294967295
 800b0ae:	1c4c      	adds	r4, r1, #1
 800b0b0:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800b0b4:	eba1 050a 	sub.w	r5, r1, sl
 800b0b8:	aa1a      	add	r2, sp, #104	; 0x68
 800b0ba:	eb09 070a 	add.w	r7, r9, sl
 800b0be:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800b0c2:	4696      	mov	lr, r2
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	42bb      	cmp	r3, r7
 800b0c8:	dd0f      	ble.n	800b0ea <__kernel_rem_pio2f+0x6a>
 800b0ca:	af42      	add	r7, sp, #264	; 0x108
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	454a      	cmp	r2, r9
 800b0d0:	dc27      	bgt.n	800b122 <__kernel_rem_pio2f+0xa2>
 800b0d2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800b0d6:	eb0b 0302 	add.w	r3, fp, r2
 800b0da:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800b0de:	9d02      	ldr	r5, [sp, #8]
 800b0e0:	eddf 7aad 	vldr	s15, [pc, #692]	; 800b398 <__kernel_rem_pio2f+0x318>
 800b0e4:	f04f 0c00 	mov.w	ip, #0
 800b0e8:	e015      	b.n	800b116 <__kernel_rem_pio2f+0x96>
 800b0ea:	42dd      	cmn	r5, r3
 800b0ec:	bf5d      	ittte	pl
 800b0ee:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800b0f2:	ee07 2a90 	vmovpl	s15, r2
 800b0f6:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b0fa:	eef0 7a47 	vmovmi.f32	s15, s14
 800b0fe:	ecee 7a01 	vstmia	lr!, {s15}
 800b102:	3301      	adds	r3, #1
 800b104:	e7df      	b.n	800b0c6 <__kernel_rem_pio2f+0x46>
 800b106:	ecf5 6a01 	vldmia	r5!, {s13}
 800b10a:	ed33 7a01 	vldmdb	r3!, {s14}
 800b10e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b112:	f10c 0c01 	add.w	ip, ip, #1
 800b116:	45d4      	cmp	ip, sl
 800b118:	ddf5      	ble.n	800b106 <__kernel_rem_pio2f+0x86>
 800b11a:	ece7 7a01 	vstmia	r7!, {s15}
 800b11e:	3201      	adds	r2, #1
 800b120:	e7d5      	b.n	800b0ce <__kernel_rem_pio2f+0x4e>
 800b122:	ab06      	add	r3, sp, #24
 800b124:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b128:	9304      	str	r3, [sp, #16]
 800b12a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800b394 <__kernel_rem_pio2f+0x314>
 800b12e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800b390 <__kernel_rem_pio2f+0x310>
 800b132:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800b136:	9303      	str	r3, [sp, #12]
 800b138:	464d      	mov	r5, r9
 800b13a:	ab56      	add	r3, sp, #344	; 0x158
 800b13c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800b140:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800b144:	3f01      	subs	r7, #1
 800b146:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800b14a:	00bf      	lsls	r7, r7, #2
 800b14c:	ab56      	add	r3, sp, #344	; 0x158
 800b14e:	19da      	adds	r2, r3, r7
 800b150:	3a4c      	subs	r2, #76	; 0x4c
 800b152:	2300      	movs	r3, #0
 800b154:	1ae9      	subs	r1, r5, r3
 800b156:	2900      	cmp	r1, #0
 800b158:	dc4c      	bgt.n	800b1f4 <__kernel_rem_pio2f+0x174>
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 faae 	bl	800b6bc <scalbnf>
 800b160:	eeb0 8a40 	vmov.f32	s16, s0
 800b164:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b168:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b16c:	f000 fa64 	bl	800b638 <floorf>
 800b170:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b174:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b178:	2c00      	cmp	r4, #0
 800b17a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b17e:	edcd 7a01 	vstr	s15, [sp, #4]
 800b182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b186:	ee38 8a67 	vsub.f32	s16, s16, s15
 800b18a:	dd48      	ble.n	800b21e <__kernel_rem_pio2f+0x19e>
 800b18c:	1e69      	subs	r1, r5, #1
 800b18e:	ab06      	add	r3, sp, #24
 800b190:	f1c4 0008 	rsb	r0, r4, #8
 800b194:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800b198:	9a01      	ldr	r2, [sp, #4]
 800b19a:	fa4c f300 	asr.w	r3, ip, r0
 800b19e:	441a      	add	r2, r3
 800b1a0:	4083      	lsls	r3, r0
 800b1a2:	9201      	str	r2, [sp, #4]
 800b1a4:	ebac 0203 	sub.w	r2, ip, r3
 800b1a8:	ab06      	add	r3, sp, #24
 800b1aa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800b1ae:	f1c4 0307 	rsb	r3, r4, #7
 800b1b2:	fa42 f803 	asr.w	r8, r2, r3
 800b1b6:	f1b8 0f00 	cmp.w	r8, #0
 800b1ba:	dd41      	ble.n	800b240 <__kernel_rem_pio2f+0x1c0>
 800b1bc:	9b01      	ldr	r3, [sp, #4]
 800b1be:	2000      	movs	r0, #0
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	9301      	str	r3, [sp, #4]
 800b1c4:	4601      	mov	r1, r0
 800b1c6:	4285      	cmp	r5, r0
 800b1c8:	dc6d      	bgt.n	800b2a6 <__kernel_rem_pio2f+0x226>
 800b1ca:	2c00      	cmp	r4, #0
 800b1cc:	dd04      	ble.n	800b1d8 <__kernel_rem_pio2f+0x158>
 800b1ce:	2c01      	cmp	r4, #1
 800b1d0:	d07e      	beq.n	800b2d0 <__kernel_rem_pio2f+0x250>
 800b1d2:	2c02      	cmp	r4, #2
 800b1d4:	f000 8086 	beq.w	800b2e4 <__kernel_rem_pio2f+0x264>
 800b1d8:	f1b8 0f02 	cmp.w	r8, #2
 800b1dc:	d130      	bne.n	800b240 <__kernel_rem_pio2f+0x1c0>
 800b1de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b1e2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b1e6:	b359      	cbz	r1, 800b240 <__kernel_rem_pio2f+0x1c0>
 800b1e8:	4620      	mov	r0, r4
 800b1ea:	f000 fa67 	bl	800b6bc <scalbnf>
 800b1ee:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b1f2:	e025      	b.n	800b240 <__kernel_rem_pio2f+0x1c0>
 800b1f4:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b1f8:	a806      	add	r0, sp, #24
 800b1fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b1fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b202:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b206:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b20a:	ee10 1a10 	vmov	r1, s0
 800b20e:	ed32 0a01 	vldmdb	r2!, {s0}
 800b212:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800b216:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b21a:	3301      	adds	r3, #1
 800b21c:	e79a      	b.n	800b154 <__kernel_rem_pio2f+0xd4>
 800b21e:	d106      	bne.n	800b22e <__kernel_rem_pio2f+0x1ae>
 800b220:	1e6b      	subs	r3, r5, #1
 800b222:	aa06      	add	r2, sp, #24
 800b224:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b228:	ea4f 2822 	mov.w	r8, r2, asr #8
 800b22c:	e7c3      	b.n	800b1b6 <__kernel_rem_pio2f+0x136>
 800b22e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b232:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23a:	da31      	bge.n	800b2a0 <__kernel_rem_pio2f+0x220>
 800b23c:	f04f 0800 	mov.w	r8, #0
 800b240:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b248:	f040 80a8 	bne.w	800b39c <__kernel_rem_pio2f+0x31c>
 800b24c:	1e6b      	subs	r3, r5, #1
 800b24e:	4618      	mov	r0, r3
 800b250:	2200      	movs	r2, #0
 800b252:	4548      	cmp	r0, r9
 800b254:	da4d      	bge.n	800b2f2 <__kernel_rem_pio2f+0x272>
 800b256:	2a00      	cmp	r2, #0
 800b258:	f000 8087 	beq.w	800b36a <__kernel_rem_pio2f+0x2ea>
 800b25c:	aa06      	add	r2, sp, #24
 800b25e:	3c08      	subs	r4, #8
 800b260:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b264:	2900      	cmp	r1, #0
 800b266:	f000 808d 	beq.w	800b384 <__kernel_rem_pio2f+0x304>
 800b26a:	4620      	mov	r0, r4
 800b26c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b270:	9302      	str	r3, [sp, #8]
 800b272:	f000 fa23 	bl	800b6bc <scalbnf>
 800b276:	9b02      	ldr	r3, [sp, #8]
 800b278:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800b394 <__kernel_rem_pio2f+0x314>
 800b27c:	0099      	lsls	r1, r3, #2
 800b27e:	aa42      	add	r2, sp, #264	; 0x108
 800b280:	1850      	adds	r0, r2, r1
 800b282:	1d05      	adds	r5, r0, #4
 800b284:	461c      	mov	r4, r3
 800b286:	2c00      	cmp	r4, #0
 800b288:	f280 80b8 	bge.w	800b3fc <__kernel_rem_pio2f+0x37c>
 800b28c:	2500      	movs	r5, #0
 800b28e:	1b5c      	subs	r4, r3, r5
 800b290:	2c00      	cmp	r4, #0
 800b292:	f2c0 80d8 	blt.w	800b446 <__kernel_rem_pio2f+0x3c6>
 800b296:	4f3d      	ldr	r7, [pc, #244]	; (800b38c <__kernel_rem_pio2f+0x30c>)
 800b298:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800b398 <__kernel_rem_pio2f+0x318>
 800b29c:	2400      	movs	r4, #0
 800b29e:	e0c6      	b.n	800b42e <__kernel_rem_pio2f+0x3ae>
 800b2a0:	f04f 0802 	mov.w	r8, #2
 800b2a4:	e78a      	b.n	800b1bc <__kernel_rem_pio2f+0x13c>
 800b2a6:	ab06      	add	r3, sp, #24
 800b2a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b2ac:	b949      	cbnz	r1, 800b2c2 <__kernel_rem_pio2f+0x242>
 800b2ae:	b12b      	cbz	r3, 800b2bc <__kernel_rem_pio2f+0x23c>
 800b2b0:	aa06      	add	r2, sp, #24
 800b2b2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b2b6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	3001      	adds	r0, #1
 800b2be:	4619      	mov	r1, r3
 800b2c0:	e781      	b.n	800b1c6 <__kernel_rem_pio2f+0x146>
 800b2c2:	aa06      	add	r2, sp, #24
 800b2c4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800b2c8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	e7f5      	b.n	800b2bc <__kernel_rem_pio2f+0x23c>
 800b2d0:	1e68      	subs	r0, r5, #1
 800b2d2:	ab06      	add	r3, sp, #24
 800b2d4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b2d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b2dc:	aa06      	add	r2, sp, #24
 800b2de:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b2e2:	e779      	b.n	800b1d8 <__kernel_rem_pio2f+0x158>
 800b2e4:	1e68      	subs	r0, r5, #1
 800b2e6:	ab06      	add	r3, sp, #24
 800b2e8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b2ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b2f0:	e7f4      	b.n	800b2dc <__kernel_rem_pio2f+0x25c>
 800b2f2:	a906      	add	r1, sp, #24
 800b2f4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b2f8:	3801      	subs	r0, #1
 800b2fa:	430a      	orrs	r2, r1
 800b2fc:	e7a9      	b.n	800b252 <__kernel_rem_pio2f+0x1d2>
 800b2fe:	f10c 0c01 	add.w	ip, ip, #1
 800b302:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b306:	2a00      	cmp	r2, #0
 800b308:	d0f9      	beq.n	800b2fe <__kernel_rem_pio2f+0x27e>
 800b30a:	eb0b 0305 	add.w	r3, fp, r5
 800b30e:	aa1a      	add	r2, sp, #104	; 0x68
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	1898      	adds	r0, r3, r2
 800b314:	3004      	adds	r0, #4
 800b316:	1c69      	adds	r1, r5, #1
 800b318:	3704      	adds	r7, #4
 800b31a:	2200      	movs	r2, #0
 800b31c:	4465      	add	r5, ip
 800b31e:	9005      	str	r0, [sp, #20]
 800b320:	428d      	cmp	r5, r1
 800b322:	f6ff af0a 	blt.w	800b13a <__kernel_rem_pio2f+0xba>
 800b326:	a81a      	add	r0, sp, #104	; 0x68
 800b328:	eb02 0c03 	add.w	ip, r2, r3
 800b32c:	4484      	add	ip, r0
 800b32e:	9803      	ldr	r0, [sp, #12]
 800b330:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b334:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800b338:	9001      	str	r0, [sp, #4]
 800b33a:	ee07 0a90 	vmov	s15, r0
 800b33e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b342:	9805      	ldr	r0, [sp, #20]
 800b344:	edcc 7a00 	vstr	s15, [ip]
 800b348:	eddf 7a13 	vldr	s15, [pc, #76]	; 800b398 <__kernel_rem_pio2f+0x318>
 800b34c:	eb00 0802 	add.w	r8, r0, r2
 800b350:	f04f 0c00 	mov.w	ip, #0
 800b354:	45d4      	cmp	ip, sl
 800b356:	dd0c      	ble.n	800b372 <__kernel_rem_pio2f+0x2f2>
 800b358:	eb02 0c07 	add.w	ip, r2, r7
 800b35c:	a842      	add	r0, sp, #264	; 0x108
 800b35e:	4484      	add	ip, r0
 800b360:	edcc 7a01 	vstr	s15, [ip, #4]
 800b364:	3101      	adds	r1, #1
 800b366:	3204      	adds	r2, #4
 800b368:	e7da      	b.n	800b320 <__kernel_rem_pio2f+0x2a0>
 800b36a:	9b04      	ldr	r3, [sp, #16]
 800b36c:	f04f 0c01 	mov.w	ip, #1
 800b370:	e7c7      	b.n	800b302 <__kernel_rem_pio2f+0x282>
 800b372:	ecfe 6a01 	vldmia	lr!, {s13}
 800b376:	ed38 7a01 	vldmdb	r8!, {s14}
 800b37a:	f10c 0c01 	add.w	ip, ip, #1
 800b37e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b382:	e7e7      	b.n	800b354 <__kernel_rem_pio2f+0x2d4>
 800b384:	3b01      	subs	r3, #1
 800b386:	e769      	b.n	800b25c <__kernel_rem_pio2f+0x1dc>
 800b388:	0801008c 	.word	0x0801008c
 800b38c:	08010060 	.word	0x08010060
 800b390:	43800000 	.word	0x43800000
 800b394:	3b800000 	.word	0x3b800000
 800b398:	00000000 	.word	0x00000000
 800b39c:	4260      	negs	r0, r4
 800b39e:	eeb0 0a48 	vmov.f32	s0, s16
 800b3a2:	f000 f98b 	bl	800b6bc <scalbnf>
 800b3a6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800b390 <__kernel_rem_pio2f+0x310>
 800b3aa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b3ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3b2:	db1a      	blt.n	800b3ea <__kernel_rem_pio2f+0x36a>
 800b3b4:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b394 <__kernel_rem_pio2f+0x314>
 800b3b8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b3bc:	aa06      	add	r2, sp, #24
 800b3be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3c2:	a906      	add	r1, sp, #24
 800b3c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b3c8:	3408      	adds	r4, #8
 800b3ca:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b3ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b3d2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b3d6:	ee10 3a10 	vmov	r3, s0
 800b3da:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b3de:	1c6b      	adds	r3, r5, #1
 800b3e0:	ee17 2a90 	vmov	r2, s15
 800b3e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b3e8:	e73f      	b.n	800b26a <__kernel_rem_pio2f+0x1ea>
 800b3ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b3ee:	aa06      	add	r2, sp, #24
 800b3f0:	ee10 3a10 	vmov	r3, s0
 800b3f4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b3f8:	462b      	mov	r3, r5
 800b3fa:	e736      	b.n	800b26a <__kernel_rem_pio2f+0x1ea>
 800b3fc:	aa06      	add	r2, sp, #24
 800b3fe:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800b402:	9202      	str	r2, [sp, #8]
 800b404:	ee07 2a90 	vmov	s15, r2
 800b408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b40c:	3c01      	subs	r4, #1
 800b40e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b412:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b416:	ed65 7a01 	vstmdb	r5!, {s15}
 800b41a:	e734      	b.n	800b286 <__kernel_rem_pio2f+0x206>
 800b41c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800b420:	ecf7 6a01 	vldmia	r7!, {s13}
 800b424:	ed9c 7a00 	vldr	s14, [ip]
 800b428:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b42c:	3401      	adds	r4, #1
 800b42e:	454c      	cmp	r4, r9
 800b430:	dc01      	bgt.n	800b436 <__kernel_rem_pio2f+0x3b6>
 800b432:	42a5      	cmp	r5, r4
 800b434:	daf2      	bge.n	800b41c <__kernel_rem_pio2f+0x39c>
 800b436:	aa56      	add	r2, sp, #344	; 0x158
 800b438:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800b43c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800b440:	3501      	adds	r5, #1
 800b442:	3804      	subs	r0, #4
 800b444:	e723      	b.n	800b28e <__kernel_rem_pio2f+0x20e>
 800b446:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800b448:	2a03      	cmp	r2, #3
 800b44a:	d84d      	bhi.n	800b4e8 <__kernel_rem_pio2f+0x468>
 800b44c:	e8df f002 	tbb	[pc, r2]
 800b450:	021f1f3e 	.word	0x021f1f3e
 800b454:	aa56      	add	r2, sp, #344	; 0x158
 800b456:	4411      	add	r1, r2
 800b458:	399c      	subs	r1, #156	; 0x9c
 800b45a:	4608      	mov	r0, r1
 800b45c:	461c      	mov	r4, r3
 800b45e:	2c00      	cmp	r4, #0
 800b460:	dc5f      	bgt.n	800b522 <__kernel_rem_pio2f+0x4a2>
 800b462:	4608      	mov	r0, r1
 800b464:	461c      	mov	r4, r3
 800b466:	2c01      	cmp	r4, #1
 800b468:	dc6b      	bgt.n	800b542 <__kernel_rem_pio2f+0x4c2>
 800b46a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800b398 <__kernel_rem_pio2f+0x318>
 800b46e:	2b01      	cmp	r3, #1
 800b470:	dc77      	bgt.n	800b562 <__kernel_rem_pio2f+0x4e2>
 800b472:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800b476:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800b47a:	f1b8 0f00 	cmp.w	r8, #0
 800b47e:	d176      	bne.n	800b56e <__kernel_rem_pio2f+0x4ee>
 800b480:	edc6 6a00 	vstr	s13, [r6]
 800b484:	ed86 7a01 	vstr	s14, [r6, #4]
 800b488:	edc6 7a02 	vstr	s15, [r6, #8]
 800b48c:	e02c      	b.n	800b4e8 <__kernel_rem_pio2f+0x468>
 800b48e:	aa56      	add	r2, sp, #344	; 0x158
 800b490:	4411      	add	r1, r2
 800b492:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800b398 <__kernel_rem_pio2f+0x318>
 800b496:	399c      	subs	r1, #156	; 0x9c
 800b498:	4618      	mov	r0, r3
 800b49a:	2800      	cmp	r0, #0
 800b49c:	da32      	bge.n	800b504 <__kernel_rem_pio2f+0x484>
 800b49e:	f1b8 0f00 	cmp.w	r8, #0
 800b4a2:	d035      	beq.n	800b510 <__kernel_rem_pio2f+0x490>
 800b4a4:	eef1 7a47 	vneg.f32	s15, s14
 800b4a8:	edc6 7a00 	vstr	s15, [r6]
 800b4ac:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800b4b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b4b4:	a82f      	add	r0, sp, #188	; 0xbc
 800b4b6:	2101      	movs	r1, #1
 800b4b8:	428b      	cmp	r3, r1
 800b4ba:	da2c      	bge.n	800b516 <__kernel_rem_pio2f+0x496>
 800b4bc:	f1b8 0f00 	cmp.w	r8, #0
 800b4c0:	d001      	beq.n	800b4c6 <__kernel_rem_pio2f+0x446>
 800b4c2:	eef1 7a67 	vneg.f32	s15, s15
 800b4c6:	edc6 7a01 	vstr	s15, [r6, #4]
 800b4ca:	e00d      	b.n	800b4e8 <__kernel_rem_pio2f+0x468>
 800b4cc:	aa56      	add	r2, sp, #344	; 0x158
 800b4ce:	4411      	add	r1, r2
 800b4d0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800b398 <__kernel_rem_pio2f+0x318>
 800b4d4:	399c      	subs	r1, #156	; 0x9c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	da0e      	bge.n	800b4f8 <__kernel_rem_pio2f+0x478>
 800b4da:	f1b8 0f00 	cmp.w	r8, #0
 800b4de:	d001      	beq.n	800b4e4 <__kernel_rem_pio2f+0x464>
 800b4e0:	eef1 7a67 	vneg.f32	s15, s15
 800b4e4:	edc6 7a00 	vstr	s15, [r6]
 800b4e8:	9b01      	ldr	r3, [sp, #4]
 800b4ea:	f003 0007 	and.w	r0, r3, #7
 800b4ee:	b057      	add	sp, #348	; 0x15c
 800b4f0:	ecbd 8b04 	vpop	{d8-d9}
 800b4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4f8:	ed31 7a01 	vldmdb	r1!, {s14}
 800b4fc:	3b01      	subs	r3, #1
 800b4fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b502:	e7e8      	b.n	800b4d6 <__kernel_rem_pio2f+0x456>
 800b504:	ed71 7a01 	vldmdb	r1!, {s15}
 800b508:	3801      	subs	r0, #1
 800b50a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b50e:	e7c4      	b.n	800b49a <__kernel_rem_pio2f+0x41a>
 800b510:	eef0 7a47 	vmov.f32	s15, s14
 800b514:	e7c8      	b.n	800b4a8 <__kernel_rem_pio2f+0x428>
 800b516:	ecb0 7a01 	vldmia	r0!, {s14}
 800b51a:	3101      	adds	r1, #1
 800b51c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b520:	e7ca      	b.n	800b4b8 <__kernel_rem_pio2f+0x438>
 800b522:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b526:	ed70 6a01 	vldmdb	r0!, {s13}
 800b52a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b52e:	3c01      	subs	r4, #1
 800b530:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b534:	ed00 7a01 	vstr	s14, [r0, #-4]
 800b538:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b53c:	edc0 7a00 	vstr	s15, [r0]
 800b540:	e78d      	b.n	800b45e <__kernel_rem_pio2f+0x3de>
 800b542:	ed50 7a02 	vldr	s15, [r0, #-8]
 800b546:	ed70 6a01 	vldmdb	r0!, {s13}
 800b54a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b54e:	3c01      	subs	r4, #1
 800b550:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b554:	ed00 7a01 	vstr	s14, [r0, #-4]
 800b558:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b55c:	edc0 7a00 	vstr	s15, [r0]
 800b560:	e781      	b.n	800b466 <__kernel_rem_pio2f+0x3e6>
 800b562:	ed31 7a01 	vldmdb	r1!, {s14}
 800b566:	3b01      	subs	r3, #1
 800b568:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b56c:	e77f      	b.n	800b46e <__kernel_rem_pio2f+0x3ee>
 800b56e:	eef1 6a66 	vneg.f32	s13, s13
 800b572:	eeb1 7a47 	vneg.f32	s14, s14
 800b576:	edc6 6a00 	vstr	s13, [r6]
 800b57a:	ed86 7a01 	vstr	s14, [r6, #4]
 800b57e:	eef1 7a67 	vneg.f32	s15, s15
 800b582:	e781      	b.n	800b488 <__kernel_rem_pio2f+0x408>

0800b584 <__kernel_sinf>:
 800b584:	ee10 3a10 	vmov	r3, s0
 800b588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b58c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b590:	da04      	bge.n	800b59c <__kernel_sinf+0x18>
 800b592:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b596:	ee17 3a90 	vmov	r3, s15
 800b59a:	b35b      	cbz	r3, 800b5f4 <__kernel_sinf+0x70>
 800b59c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b5a0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b5f8 <__kernel_sinf+0x74>
 800b5a4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b5fc <__kernel_sinf+0x78>
 800b5a8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b5ac:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b600 <__kernel_sinf+0x7c>
 800b5b0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b5b4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b604 <__kernel_sinf+0x80>
 800b5b8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b5bc:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b608 <__kernel_sinf+0x84>
 800b5c0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b5c4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b5c8:	b930      	cbnz	r0, 800b5d8 <__kernel_sinf+0x54>
 800b5ca:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b60c <__kernel_sinf+0x88>
 800b5ce:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b5d2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b5d6:	4770      	bx	lr
 800b5d8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b5dc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b5e0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b5e4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b5e8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b610 <__kernel_sinf+0x8c>
 800b5ec:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b5f0:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	2f2ec9d3 	.word	0x2f2ec9d3
 800b5fc:	b2d72f34 	.word	0xb2d72f34
 800b600:	3638ef1b 	.word	0x3638ef1b
 800b604:	b9500d01 	.word	0xb9500d01
 800b608:	3c088889 	.word	0x3c088889
 800b60c:	be2aaaab 	.word	0xbe2aaaab
 800b610:	3e2aaaab 	.word	0x3e2aaaab

0800b614 <finite>:
 800b614:	ee10 3a90 	vmov	r3, s1
 800b618:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800b61c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b620:	0fc0      	lsrs	r0, r0, #31
 800b622:	4770      	bx	lr

0800b624 <matherr>:
 800b624:	2000      	movs	r0, #0
 800b626:	4770      	bx	lr

0800b628 <fabsf>:
 800b628:	ee10 3a10 	vmov	r3, s0
 800b62c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b630:	ee00 3a10 	vmov	s0, r3
 800b634:	4770      	bx	lr
	...

0800b638 <floorf>:
 800b638:	ee10 3a10 	vmov	r3, s0
 800b63c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b640:	0dca      	lsrs	r2, r1, #23
 800b642:	3a7f      	subs	r2, #127	; 0x7f
 800b644:	2a16      	cmp	r2, #22
 800b646:	dc2a      	bgt.n	800b69e <floorf+0x66>
 800b648:	2a00      	cmp	r2, #0
 800b64a:	da11      	bge.n	800b670 <floorf+0x38>
 800b64c:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b6b0 <floorf+0x78>
 800b650:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b654:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b65c:	dd05      	ble.n	800b66a <floorf+0x32>
 800b65e:	2b00      	cmp	r3, #0
 800b660:	da23      	bge.n	800b6aa <floorf+0x72>
 800b662:	4a14      	ldr	r2, [pc, #80]	; (800b6b4 <floorf+0x7c>)
 800b664:	2900      	cmp	r1, #0
 800b666:	bf18      	it	ne
 800b668:	4613      	movne	r3, r2
 800b66a:	ee00 3a10 	vmov	s0, r3
 800b66e:	4770      	bx	lr
 800b670:	4911      	ldr	r1, [pc, #68]	; (800b6b8 <floorf+0x80>)
 800b672:	4111      	asrs	r1, r2
 800b674:	420b      	tst	r3, r1
 800b676:	d0fa      	beq.n	800b66e <floorf+0x36>
 800b678:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b6b0 <floorf+0x78>
 800b67c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b680:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b688:	ddef      	ble.n	800b66a <floorf+0x32>
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	bfbe      	ittt	lt
 800b68e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b692:	fa40 f202 	asrlt.w	r2, r0, r2
 800b696:	189b      	addlt	r3, r3, r2
 800b698:	ea23 0301 	bic.w	r3, r3, r1
 800b69c:	e7e5      	b.n	800b66a <floorf+0x32>
 800b69e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b6a2:	d3e4      	bcc.n	800b66e <floorf+0x36>
 800b6a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b6a8:	4770      	bx	lr
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e7dd      	b.n	800b66a <floorf+0x32>
 800b6ae:	bf00      	nop
 800b6b0:	7149f2ca 	.word	0x7149f2ca
 800b6b4:	bf800000 	.word	0xbf800000
 800b6b8:	007fffff 	.word	0x007fffff

0800b6bc <scalbnf>:
 800b6bc:	b508      	push	{r3, lr}
 800b6be:	ee10 2a10 	vmov	r2, s0
 800b6c2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800b6c6:	ed2d 8b02 	vpush	{d8}
 800b6ca:	eef0 0a40 	vmov.f32	s1, s0
 800b6ce:	d004      	beq.n	800b6da <scalbnf+0x1e>
 800b6d0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b6d4:	d306      	bcc.n	800b6e4 <scalbnf+0x28>
 800b6d6:	ee70 0a00 	vadd.f32	s1, s0, s0
 800b6da:	ecbd 8b02 	vpop	{d8}
 800b6de:	eeb0 0a60 	vmov.f32	s0, s1
 800b6e2:	bd08      	pop	{r3, pc}
 800b6e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b6e8:	d21c      	bcs.n	800b724 <scalbnf+0x68>
 800b6ea:	4b1f      	ldr	r3, [pc, #124]	; (800b768 <scalbnf+0xac>)
 800b6ec:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b76c <scalbnf+0xb0>
 800b6f0:	4298      	cmp	r0, r3
 800b6f2:	ee60 0a27 	vmul.f32	s1, s0, s15
 800b6f6:	db10      	blt.n	800b71a <scalbnf+0x5e>
 800b6f8:	ee10 2a90 	vmov	r2, s1
 800b6fc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800b700:	3b19      	subs	r3, #25
 800b702:	4403      	add	r3, r0
 800b704:	2bfe      	cmp	r3, #254	; 0xfe
 800b706:	dd0f      	ble.n	800b728 <scalbnf+0x6c>
 800b708:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800b770 <scalbnf+0xb4>
 800b70c:	eeb0 0a48 	vmov.f32	s0, s16
 800b710:	f000 f834 	bl	800b77c <copysignf>
 800b714:	ee60 0a08 	vmul.f32	s1, s0, s16
 800b718:	e7df      	b.n	800b6da <scalbnf+0x1e>
 800b71a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800b774 <scalbnf+0xb8>
 800b71e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b722:	e7da      	b.n	800b6da <scalbnf+0x1e>
 800b724:	0ddb      	lsrs	r3, r3, #23
 800b726:	e7ec      	b.n	800b702 <scalbnf+0x46>
 800b728:	2b00      	cmp	r3, #0
 800b72a:	dd06      	ble.n	800b73a <scalbnf+0x7e>
 800b72c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b730:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b734:	ee00 3a90 	vmov	s1, r3
 800b738:	e7cf      	b.n	800b6da <scalbnf+0x1e>
 800b73a:	f113 0f16 	cmn.w	r3, #22
 800b73e:	da06      	bge.n	800b74e <scalbnf+0x92>
 800b740:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b744:	4298      	cmp	r0, r3
 800b746:	dcdf      	bgt.n	800b708 <scalbnf+0x4c>
 800b748:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800b774 <scalbnf+0xb8>
 800b74c:	e7de      	b.n	800b70c <scalbnf+0x50>
 800b74e:	3319      	adds	r3, #25
 800b750:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b754:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b758:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b778 <scalbnf+0xbc>
 800b75c:	ee07 3a10 	vmov	s14, r3
 800b760:	ee67 0a27 	vmul.f32	s1, s14, s15
 800b764:	e7b9      	b.n	800b6da <scalbnf+0x1e>
 800b766:	bf00      	nop
 800b768:	ffff3cb0 	.word	0xffff3cb0
 800b76c:	4c000000 	.word	0x4c000000
 800b770:	7149f2ca 	.word	0x7149f2ca
 800b774:	0da24260 	.word	0x0da24260
 800b778:	33000000 	.word	0x33000000

0800b77c <copysignf>:
 800b77c:	ee10 3a10 	vmov	r3, s0
 800b780:	ee10 2a90 	vmov	r2, s1
 800b784:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b788:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b78c:	4313      	orrs	r3, r2
 800b78e:	ee00 3a10 	vmov	s0, r3
 800b792:	4770      	bx	lr

0800b794 <atof>:
 800b794:	2100      	movs	r1, #0
 800b796:	f001 bb2b 	b.w	800cdf0 <strtod>

0800b79a <atoi>:
 800b79a:	220a      	movs	r2, #10
 800b79c:	2100      	movs	r1, #0
 800b79e:	f001 bbb7 	b.w	800cf10 <strtol>
	...

0800b7a4 <__errno>:
 800b7a4:	4b01      	ldr	r3, [pc, #4]	; (800b7ac <__errno+0x8>)
 800b7a6:	6818      	ldr	r0, [r3, #0]
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	2000004c 	.word	0x2000004c

0800b7b0 <__libc_init_array>:
 800b7b0:	b570      	push	{r4, r5, r6, lr}
 800b7b2:	4e0d      	ldr	r6, [pc, #52]	; (800b7e8 <__libc_init_array+0x38>)
 800b7b4:	4c0d      	ldr	r4, [pc, #52]	; (800b7ec <__libc_init_array+0x3c>)
 800b7b6:	1ba4      	subs	r4, r4, r6
 800b7b8:	10a4      	asrs	r4, r4, #2
 800b7ba:	2500      	movs	r5, #0
 800b7bc:	42a5      	cmp	r5, r4
 800b7be:	d109      	bne.n	800b7d4 <__libc_init_array+0x24>
 800b7c0:	4e0b      	ldr	r6, [pc, #44]	; (800b7f0 <__libc_init_array+0x40>)
 800b7c2:	4c0c      	ldr	r4, [pc, #48]	; (800b7f4 <__libc_init_array+0x44>)
 800b7c4:	f003 fec4 	bl	800f550 <_init>
 800b7c8:	1ba4      	subs	r4, r4, r6
 800b7ca:	10a4      	asrs	r4, r4, #2
 800b7cc:	2500      	movs	r5, #0
 800b7ce:	42a5      	cmp	r5, r4
 800b7d0:	d105      	bne.n	800b7de <__libc_init_array+0x2e>
 800b7d2:	bd70      	pop	{r4, r5, r6, pc}
 800b7d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7d8:	4798      	blx	r3
 800b7da:	3501      	adds	r5, #1
 800b7dc:	e7ee      	b.n	800b7bc <__libc_init_array+0xc>
 800b7de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b7e2:	4798      	blx	r3
 800b7e4:	3501      	adds	r5, #1
 800b7e6:	e7f2      	b.n	800b7ce <__libc_init_array+0x1e>
 800b7e8:	080103b8 	.word	0x080103b8
 800b7ec:	080103b8 	.word	0x080103b8
 800b7f0:	080103b8 	.word	0x080103b8
 800b7f4:	080103bc 	.word	0x080103bc

0800b7f8 <memcpy>:
 800b7f8:	b510      	push	{r4, lr}
 800b7fa:	1e43      	subs	r3, r0, #1
 800b7fc:	440a      	add	r2, r1
 800b7fe:	4291      	cmp	r1, r2
 800b800:	d100      	bne.n	800b804 <memcpy+0xc>
 800b802:	bd10      	pop	{r4, pc}
 800b804:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b80c:	e7f7      	b.n	800b7fe <memcpy+0x6>

0800b80e <memset>:
 800b80e:	4402      	add	r2, r0
 800b810:	4603      	mov	r3, r0
 800b812:	4293      	cmp	r3, r2
 800b814:	d100      	bne.n	800b818 <memset+0xa>
 800b816:	4770      	bx	lr
 800b818:	f803 1b01 	strb.w	r1, [r3], #1
 800b81c:	e7f9      	b.n	800b812 <memset+0x4>

0800b81e <__cvt>:
 800b81e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b822:	ec55 4b10 	vmov	r4, r5, d0
 800b826:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b828:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b82c:	2d00      	cmp	r5, #0
 800b82e:	460e      	mov	r6, r1
 800b830:	4691      	mov	r9, r2
 800b832:	4619      	mov	r1, r3
 800b834:	bfb8      	it	lt
 800b836:	4622      	movlt	r2, r4
 800b838:	462b      	mov	r3, r5
 800b83a:	f027 0720 	bic.w	r7, r7, #32
 800b83e:	bfbb      	ittet	lt
 800b840:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b844:	461d      	movlt	r5, r3
 800b846:	2300      	movge	r3, #0
 800b848:	232d      	movlt	r3, #45	; 0x2d
 800b84a:	bfb8      	it	lt
 800b84c:	4614      	movlt	r4, r2
 800b84e:	2f46      	cmp	r7, #70	; 0x46
 800b850:	700b      	strb	r3, [r1, #0]
 800b852:	d004      	beq.n	800b85e <__cvt+0x40>
 800b854:	2f45      	cmp	r7, #69	; 0x45
 800b856:	d100      	bne.n	800b85a <__cvt+0x3c>
 800b858:	3601      	adds	r6, #1
 800b85a:	2102      	movs	r1, #2
 800b85c:	e000      	b.n	800b860 <__cvt+0x42>
 800b85e:	2103      	movs	r1, #3
 800b860:	ab03      	add	r3, sp, #12
 800b862:	9301      	str	r3, [sp, #4]
 800b864:	ab02      	add	r3, sp, #8
 800b866:	9300      	str	r3, [sp, #0]
 800b868:	4632      	mov	r2, r6
 800b86a:	4653      	mov	r3, sl
 800b86c:	ec45 4b10 	vmov	d0, r4, r5
 800b870:	f001 fcb2 	bl	800d1d8 <_dtoa_r>
 800b874:	2f47      	cmp	r7, #71	; 0x47
 800b876:	4680      	mov	r8, r0
 800b878:	d102      	bne.n	800b880 <__cvt+0x62>
 800b87a:	f019 0f01 	tst.w	r9, #1
 800b87e:	d026      	beq.n	800b8ce <__cvt+0xb0>
 800b880:	2f46      	cmp	r7, #70	; 0x46
 800b882:	eb08 0906 	add.w	r9, r8, r6
 800b886:	d111      	bne.n	800b8ac <__cvt+0x8e>
 800b888:	f898 3000 	ldrb.w	r3, [r8]
 800b88c:	2b30      	cmp	r3, #48	; 0x30
 800b88e:	d10a      	bne.n	800b8a6 <__cvt+0x88>
 800b890:	2200      	movs	r2, #0
 800b892:	2300      	movs	r3, #0
 800b894:	4620      	mov	r0, r4
 800b896:	4629      	mov	r1, r5
 800b898:	f7f5 f936 	bl	8000b08 <__aeabi_dcmpeq>
 800b89c:	b918      	cbnz	r0, 800b8a6 <__cvt+0x88>
 800b89e:	f1c6 0601 	rsb	r6, r6, #1
 800b8a2:	f8ca 6000 	str.w	r6, [sl]
 800b8a6:	f8da 3000 	ldr.w	r3, [sl]
 800b8aa:	4499      	add	r9, r3
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	4629      	mov	r1, r5
 800b8b4:	f7f5 f928 	bl	8000b08 <__aeabi_dcmpeq>
 800b8b8:	b938      	cbnz	r0, 800b8ca <__cvt+0xac>
 800b8ba:	2230      	movs	r2, #48	; 0x30
 800b8bc:	9b03      	ldr	r3, [sp, #12]
 800b8be:	454b      	cmp	r3, r9
 800b8c0:	d205      	bcs.n	800b8ce <__cvt+0xb0>
 800b8c2:	1c59      	adds	r1, r3, #1
 800b8c4:	9103      	str	r1, [sp, #12]
 800b8c6:	701a      	strb	r2, [r3, #0]
 800b8c8:	e7f8      	b.n	800b8bc <__cvt+0x9e>
 800b8ca:	f8cd 900c 	str.w	r9, [sp, #12]
 800b8ce:	9b03      	ldr	r3, [sp, #12]
 800b8d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8d2:	eba3 0308 	sub.w	r3, r3, r8
 800b8d6:	4640      	mov	r0, r8
 800b8d8:	6013      	str	r3, [r2, #0]
 800b8da:	b004      	add	sp, #16
 800b8dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800b8e0 <__exponent>:
 800b8e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8e2:	2900      	cmp	r1, #0
 800b8e4:	4604      	mov	r4, r0
 800b8e6:	bfba      	itte	lt
 800b8e8:	4249      	neglt	r1, r1
 800b8ea:	232d      	movlt	r3, #45	; 0x2d
 800b8ec:	232b      	movge	r3, #43	; 0x2b
 800b8ee:	2909      	cmp	r1, #9
 800b8f0:	f804 2b02 	strb.w	r2, [r4], #2
 800b8f4:	7043      	strb	r3, [r0, #1]
 800b8f6:	dd20      	ble.n	800b93a <__exponent+0x5a>
 800b8f8:	f10d 0307 	add.w	r3, sp, #7
 800b8fc:	461f      	mov	r7, r3
 800b8fe:	260a      	movs	r6, #10
 800b900:	fb91 f5f6 	sdiv	r5, r1, r6
 800b904:	fb06 1115 	mls	r1, r6, r5, r1
 800b908:	3130      	adds	r1, #48	; 0x30
 800b90a:	2d09      	cmp	r5, #9
 800b90c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b910:	f103 32ff 	add.w	r2, r3, #4294967295
 800b914:	4629      	mov	r1, r5
 800b916:	dc09      	bgt.n	800b92c <__exponent+0x4c>
 800b918:	3130      	adds	r1, #48	; 0x30
 800b91a:	3b02      	subs	r3, #2
 800b91c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b920:	42bb      	cmp	r3, r7
 800b922:	4622      	mov	r2, r4
 800b924:	d304      	bcc.n	800b930 <__exponent+0x50>
 800b926:	1a10      	subs	r0, r2, r0
 800b928:	b003      	add	sp, #12
 800b92a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b92c:	4613      	mov	r3, r2
 800b92e:	e7e7      	b.n	800b900 <__exponent+0x20>
 800b930:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b934:	f804 2b01 	strb.w	r2, [r4], #1
 800b938:	e7f2      	b.n	800b920 <__exponent+0x40>
 800b93a:	2330      	movs	r3, #48	; 0x30
 800b93c:	4419      	add	r1, r3
 800b93e:	7083      	strb	r3, [r0, #2]
 800b940:	1d02      	adds	r2, r0, #4
 800b942:	70c1      	strb	r1, [r0, #3]
 800b944:	e7ef      	b.n	800b926 <__exponent+0x46>
	...

0800b948 <_printf_float>:
 800b948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b94c:	b08d      	sub	sp, #52	; 0x34
 800b94e:	460c      	mov	r4, r1
 800b950:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b954:	4616      	mov	r6, r2
 800b956:	461f      	mov	r7, r3
 800b958:	4605      	mov	r5, r0
 800b95a:	f002 fe9b 	bl	800e694 <_localeconv_r>
 800b95e:	6803      	ldr	r3, [r0, #0]
 800b960:	9304      	str	r3, [sp, #16]
 800b962:	4618      	mov	r0, r3
 800b964:	f7f4 fc54 	bl	8000210 <strlen>
 800b968:	2300      	movs	r3, #0
 800b96a:	930a      	str	r3, [sp, #40]	; 0x28
 800b96c:	f8d8 3000 	ldr.w	r3, [r8]
 800b970:	9005      	str	r0, [sp, #20]
 800b972:	3307      	adds	r3, #7
 800b974:	f023 0307 	bic.w	r3, r3, #7
 800b978:	f103 0208 	add.w	r2, r3, #8
 800b97c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b980:	f8d4 b000 	ldr.w	fp, [r4]
 800b984:	f8c8 2000 	str.w	r2, [r8]
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b990:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b994:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b998:	9307      	str	r3, [sp, #28]
 800b99a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b99e:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a2:	4ba7      	ldr	r3, [pc, #668]	; (800bc40 <_printf_float+0x2f8>)
 800b9a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9a8:	f7f5 f8e0 	bl	8000b6c <__aeabi_dcmpun>
 800b9ac:	bb70      	cbnz	r0, 800ba0c <_printf_float+0xc4>
 800b9ae:	f04f 32ff 	mov.w	r2, #4294967295
 800b9b2:	4ba3      	ldr	r3, [pc, #652]	; (800bc40 <_printf_float+0x2f8>)
 800b9b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9b8:	f7f5 f8ba 	bl	8000b30 <__aeabi_dcmple>
 800b9bc:	bb30      	cbnz	r0, 800ba0c <_printf_float+0xc4>
 800b9be:	2200      	movs	r2, #0
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	f7f5 f8a9 	bl	8000b1c <__aeabi_dcmplt>
 800b9ca:	b110      	cbz	r0, 800b9d2 <_printf_float+0x8a>
 800b9cc:	232d      	movs	r3, #45	; 0x2d
 800b9ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9d2:	4a9c      	ldr	r2, [pc, #624]	; (800bc44 <_printf_float+0x2fc>)
 800b9d4:	4b9c      	ldr	r3, [pc, #624]	; (800bc48 <_printf_float+0x300>)
 800b9d6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b9da:	bf8c      	ite	hi
 800b9dc:	4690      	movhi	r8, r2
 800b9de:	4698      	movls	r8, r3
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	f02b 0204 	bic.w	r2, fp, #4
 800b9e6:	6123      	str	r3, [r4, #16]
 800b9e8:	6022      	str	r2, [r4, #0]
 800b9ea:	f04f 0900 	mov.w	r9, #0
 800b9ee:	9700      	str	r7, [sp, #0]
 800b9f0:	4633      	mov	r3, r6
 800b9f2:	aa0b      	add	r2, sp, #44	; 0x2c
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	4628      	mov	r0, r5
 800b9f8:	f000 f9e6 	bl	800bdc8 <_printf_common>
 800b9fc:	3001      	adds	r0, #1
 800b9fe:	f040 808d 	bne.w	800bb1c <_printf_float+0x1d4>
 800ba02:	f04f 30ff 	mov.w	r0, #4294967295
 800ba06:	b00d      	add	sp, #52	; 0x34
 800ba08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba0c:	4642      	mov	r2, r8
 800ba0e:	464b      	mov	r3, r9
 800ba10:	4640      	mov	r0, r8
 800ba12:	4649      	mov	r1, r9
 800ba14:	f7f5 f8aa 	bl	8000b6c <__aeabi_dcmpun>
 800ba18:	b110      	cbz	r0, 800ba20 <_printf_float+0xd8>
 800ba1a:	4a8c      	ldr	r2, [pc, #560]	; (800bc4c <_printf_float+0x304>)
 800ba1c:	4b8c      	ldr	r3, [pc, #560]	; (800bc50 <_printf_float+0x308>)
 800ba1e:	e7da      	b.n	800b9d6 <_printf_float+0x8e>
 800ba20:	6861      	ldr	r1, [r4, #4]
 800ba22:	1c4b      	adds	r3, r1, #1
 800ba24:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800ba28:	a80a      	add	r0, sp, #40	; 0x28
 800ba2a:	d13e      	bne.n	800baaa <_printf_float+0x162>
 800ba2c:	2306      	movs	r3, #6
 800ba2e:	6063      	str	r3, [r4, #4]
 800ba30:	2300      	movs	r3, #0
 800ba32:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800ba36:	ab09      	add	r3, sp, #36	; 0x24
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	ec49 8b10 	vmov	d0, r8, r9
 800ba3e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ba42:	6022      	str	r2, [r4, #0]
 800ba44:	f8cd a004 	str.w	sl, [sp, #4]
 800ba48:	6861      	ldr	r1, [r4, #4]
 800ba4a:	4628      	mov	r0, r5
 800ba4c:	f7ff fee7 	bl	800b81e <__cvt>
 800ba50:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800ba54:	2b47      	cmp	r3, #71	; 0x47
 800ba56:	4680      	mov	r8, r0
 800ba58:	d109      	bne.n	800ba6e <_printf_float+0x126>
 800ba5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba5c:	1cd8      	adds	r0, r3, #3
 800ba5e:	db02      	blt.n	800ba66 <_printf_float+0x11e>
 800ba60:	6862      	ldr	r2, [r4, #4]
 800ba62:	4293      	cmp	r3, r2
 800ba64:	dd47      	ble.n	800baf6 <_printf_float+0x1ae>
 800ba66:	f1aa 0a02 	sub.w	sl, sl, #2
 800ba6a:	fa5f fa8a 	uxtb.w	sl, sl
 800ba6e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ba72:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba74:	d824      	bhi.n	800bac0 <_printf_float+0x178>
 800ba76:	3901      	subs	r1, #1
 800ba78:	4652      	mov	r2, sl
 800ba7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ba7e:	9109      	str	r1, [sp, #36]	; 0x24
 800ba80:	f7ff ff2e 	bl	800b8e0 <__exponent>
 800ba84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ba86:	1813      	adds	r3, r2, r0
 800ba88:	2a01      	cmp	r2, #1
 800ba8a:	4681      	mov	r9, r0
 800ba8c:	6123      	str	r3, [r4, #16]
 800ba8e:	dc02      	bgt.n	800ba96 <_printf_float+0x14e>
 800ba90:	6822      	ldr	r2, [r4, #0]
 800ba92:	07d1      	lsls	r1, r2, #31
 800ba94:	d501      	bpl.n	800ba9a <_printf_float+0x152>
 800ba96:	3301      	adds	r3, #1
 800ba98:	6123      	str	r3, [r4, #16]
 800ba9a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d0a5      	beq.n	800b9ee <_printf_float+0xa6>
 800baa2:	232d      	movs	r3, #45	; 0x2d
 800baa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baa8:	e7a1      	b.n	800b9ee <_printf_float+0xa6>
 800baaa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800baae:	f000 8177 	beq.w	800bda0 <_printf_float+0x458>
 800bab2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bab6:	d1bb      	bne.n	800ba30 <_printf_float+0xe8>
 800bab8:	2900      	cmp	r1, #0
 800baba:	d1b9      	bne.n	800ba30 <_printf_float+0xe8>
 800babc:	2301      	movs	r3, #1
 800babe:	e7b6      	b.n	800ba2e <_printf_float+0xe6>
 800bac0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800bac4:	d119      	bne.n	800bafa <_printf_float+0x1b2>
 800bac6:	2900      	cmp	r1, #0
 800bac8:	6863      	ldr	r3, [r4, #4]
 800baca:	dd0c      	ble.n	800bae6 <_printf_float+0x19e>
 800bacc:	6121      	str	r1, [r4, #16]
 800bace:	b913      	cbnz	r3, 800bad6 <_printf_float+0x18e>
 800bad0:	6822      	ldr	r2, [r4, #0]
 800bad2:	07d2      	lsls	r2, r2, #31
 800bad4:	d502      	bpl.n	800badc <_printf_float+0x194>
 800bad6:	3301      	adds	r3, #1
 800bad8:	440b      	add	r3, r1
 800bada:	6123      	str	r3, [r4, #16]
 800badc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bade:	65a3      	str	r3, [r4, #88]	; 0x58
 800bae0:	f04f 0900 	mov.w	r9, #0
 800bae4:	e7d9      	b.n	800ba9a <_printf_float+0x152>
 800bae6:	b913      	cbnz	r3, 800baee <_printf_float+0x1a6>
 800bae8:	6822      	ldr	r2, [r4, #0]
 800baea:	07d0      	lsls	r0, r2, #31
 800baec:	d501      	bpl.n	800baf2 <_printf_float+0x1aa>
 800baee:	3302      	adds	r3, #2
 800baf0:	e7f3      	b.n	800bada <_printf_float+0x192>
 800baf2:	2301      	movs	r3, #1
 800baf4:	e7f1      	b.n	800bada <_printf_float+0x192>
 800baf6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800bafa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bafe:	4293      	cmp	r3, r2
 800bb00:	db05      	blt.n	800bb0e <_printf_float+0x1c6>
 800bb02:	6822      	ldr	r2, [r4, #0]
 800bb04:	6123      	str	r3, [r4, #16]
 800bb06:	07d1      	lsls	r1, r2, #31
 800bb08:	d5e8      	bpl.n	800badc <_printf_float+0x194>
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	e7e5      	b.n	800bada <_printf_float+0x192>
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	bfd4      	ite	le
 800bb12:	f1c3 0302 	rsble	r3, r3, #2
 800bb16:	2301      	movgt	r3, #1
 800bb18:	4413      	add	r3, r2
 800bb1a:	e7de      	b.n	800bada <_printf_float+0x192>
 800bb1c:	6823      	ldr	r3, [r4, #0]
 800bb1e:	055a      	lsls	r2, r3, #21
 800bb20:	d407      	bmi.n	800bb32 <_printf_float+0x1ea>
 800bb22:	6923      	ldr	r3, [r4, #16]
 800bb24:	4642      	mov	r2, r8
 800bb26:	4631      	mov	r1, r6
 800bb28:	4628      	mov	r0, r5
 800bb2a:	47b8      	blx	r7
 800bb2c:	3001      	adds	r0, #1
 800bb2e:	d12b      	bne.n	800bb88 <_printf_float+0x240>
 800bb30:	e767      	b.n	800ba02 <_printf_float+0xba>
 800bb32:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bb36:	f240 80dc 	bls.w	800bcf2 <_printf_float+0x3aa>
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bb42:	f7f4 ffe1 	bl	8000b08 <__aeabi_dcmpeq>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d033      	beq.n	800bbb2 <_printf_float+0x26a>
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	4a41      	ldr	r2, [pc, #260]	; (800bc54 <_printf_float+0x30c>)
 800bb4e:	4631      	mov	r1, r6
 800bb50:	4628      	mov	r0, r5
 800bb52:	47b8      	blx	r7
 800bb54:	3001      	adds	r0, #1
 800bb56:	f43f af54 	beq.w	800ba02 <_printf_float+0xba>
 800bb5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	db02      	blt.n	800bb68 <_printf_float+0x220>
 800bb62:	6823      	ldr	r3, [r4, #0]
 800bb64:	07d8      	lsls	r0, r3, #31
 800bb66:	d50f      	bpl.n	800bb88 <_printf_float+0x240>
 800bb68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb6c:	4631      	mov	r1, r6
 800bb6e:	4628      	mov	r0, r5
 800bb70:	47b8      	blx	r7
 800bb72:	3001      	adds	r0, #1
 800bb74:	f43f af45 	beq.w	800ba02 <_printf_float+0xba>
 800bb78:	f04f 0800 	mov.w	r8, #0
 800bb7c:	f104 091a 	add.w	r9, r4, #26
 800bb80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb82:	3b01      	subs	r3, #1
 800bb84:	4543      	cmp	r3, r8
 800bb86:	dc09      	bgt.n	800bb9c <_printf_float+0x254>
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	079b      	lsls	r3, r3, #30
 800bb8c:	f100 8103 	bmi.w	800bd96 <_printf_float+0x44e>
 800bb90:	68e0      	ldr	r0, [r4, #12]
 800bb92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb94:	4298      	cmp	r0, r3
 800bb96:	bfb8      	it	lt
 800bb98:	4618      	movlt	r0, r3
 800bb9a:	e734      	b.n	800ba06 <_printf_float+0xbe>
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	464a      	mov	r2, r9
 800bba0:	4631      	mov	r1, r6
 800bba2:	4628      	mov	r0, r5
 800bba4:	47b8      	blx	r7
 800bba6:	3001      	adds	r0, #1
 800bba8:	f43f af2b 	beq.w	800ba02 <_printf_float+0xba>
 800bbac:	f108 0801 	add.w	r8, r8, #1
 800bbb0:	e7e6      	b.n	800bb80 <_printf_float+0x238>
 800bbb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	dc2b      	bgt.n	800bc10 <_printf_float+0x2c8>
 800bbb8:	2301      	movs	r3, #1
 800bbba:	4a26      	ldr	r2, [pc, #152]	; (800bc54 <_printf_float+0x30c>)
 800bbbc:	4631      	mov	r1, r6
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	47b8      	blx	r7
 800bbc2:	3001      	adds	r0, #1
 800bbc4:	f43f af1d 	beq.w	800ba02 <_printf_float+0xba>
 800bbc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbca:	b923      	cbnz	r3, 800bbd6 <_printf_float+0x28e>
 800bbcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbce:	b913      	cbnz	r3, 800bbd6 <_printf_float+0x28e>
 800bbd0:	6823      	ldr	r3, [r4, #0]
 800bbd2:	07d9      	lsls	r1, r3, #31
 800bbd4:	d5d8      	bpl.n	800bb88 <_printf_float+0x240>
 800bbd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbda:	4631      	mov	r1, r6
 800bbdc:	4628      	mov	r0, r5
 800bbde:	47b8      	blx	r7
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	f43f af0e 	beq.w	800ba02 <_printf_float+0xba>
 800bbe6:	f04f 0900 	mov.w	r9, #0
 800bbea:	f104 0a1a 	add.w	sl, r4, #26
 800bbee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf0:	425b      	negs	r3, r3
 800bbf2:	454b      	cmp	r3, r9
 800bbf4:	dc01      	bgt.n	800bbfa <_printf_float+0x2b2>
 800bbf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbf8:	e794      	b.n	800bb24 <_printf_float+0x1dc>
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	4652      	mov	r2, sl
 800bbfe:	4631      	mov	r1, r6
 800bc00:	4628      	mov	r0, r5
 800bc02:	47b8      	blx	r7
 800bc04:	3001      	adds	r0, #1
 800bc06:	f43f aefc 	beq.w	800ba02 <_printf_float+0xba>
 800bc0a:	f109 0901 	add.w	r9, r9, #1
 800bc0e:	e7ee      	b.n	800bbee <_printf_float+0x2a6>
 800bc10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc14:	429a      	cmp	r2, r3
 800bc16:	bfa8      	it	ge
 800bc18:	461a      	movge	r2, r3
 800bc1a:	2a00      	cmp	r2, #0
 800bc1c:	4691      	mov	r9, r2
 800bc1e:	dd07      	ble.n	800bc30 <_printf_float+0x2e8>
 800bc20:	4613      	mov	r3, r2
 800bc22:	4631      	mov	r1, r6
 800bc24:	4642      	mov	r2, r8
 800bc26:	4628      	mov	r0, r5
 800bc28:	47b8      	blx	r7
 800bc2a:	3001      	adds	r0, #1
 800bc2c:	f43f aee9 	beq.w	800ba02 <_printf_float+0xba>
 800bc30:	f104 031a 	add.w	r3, r4, #26
 800bc34:	f04f 0b00 	mov.w	fp, #0
 800bc38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bc3c:	9306      	str	r3, [sp, #24]
 800bc3e:	e015      	b.n	800bc6c <_printf_float+0x324>
 800bc40:	7fefffff 	.word	0x7fefffff
 800bc44:	080100a0 	.word	0x080100a0
 800bc48:	0801009c 	.word	0x0801009c
 800bc4c:	080100a8 	.word	0x080100a8
 800bc50:	080100a4 	.word	0x080100a4
 800bc54:	080100ac 	.word	0x080100ac
 800bc58:	2301      	movs	r3, #1
 800bc5a:	9a06      	ldr	r2, [sp, #24]
 800bc5c:	4631      	mov	r1, r6
 800bc5e:	4628      	mov	r0, r5
 800bc60:	47b8      	blx	r7
 800bc62:	3001      	adds	r0, #1
 800bc64:	f43f aecd 	beq.w	800ba02 <_printf_float+0xba>
 800bc68:	f10b 0b01 	add.w	fp, fp, #1
 800bc6c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bc70:	ebaa 0309 	sub.w	r3, sl, r9
 800bc74:	455b      	cmp	r3, fp
 800bc76:	dcef      	bgt.n	800bc58 <_printf_float+0x310>
 800bc78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc7c:	429a      	cmp	r2, r3
 800bc7e:	44d0      	add	r8, sl
 800bc80:	db15      	blt.n	800bcae <_printf_float+0x366>
 800bc82:	6823      	ldr	r3, [r4, #0]
 800bc84:	07da      	lsls	r2, r3, #31
 800bc86:	d412      	bmi.n	800bcae <_printf_float+0x366>
 800bc88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc8c:	eba3 020a 	sub.w	r2, r3, sl
 800bc90:	eba3 0a01 	sub.w	sl, r3, r1
 800bc94:	4592      	cmp	sl, r2
 800bc96:	bfa8      	it	ge
 800bc98:	4692      	movge	sl, r2
 800bc9a:	f1ba 0f00 	cmp.w	sl, #0
 800bc9e:	dc0e      	bgt.n	800bcbe <_printf_float+0x376>
 800bca0:	f04f 0800 	mov.w	r8, #0
 800bca4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bca8:	f104 091a 	add.w	r9, r4, #26
 800bcac:	e019      	b.n	800bce2 <_printf_float+0x39a>
 800bcae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcb2:	4631      	mov	r1, r6
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	47b8      	blx	r7
 800bcb8:	3001      	adds	r0, #1
 800bcba:	d1e5      	bne.n	800bc88 <_printf_float+0x340>
 800bcbc:	e6a1      	b.n	800ba02 <_printf_float+0xba>
 800bcbe:	4653      	mov	r3, sl
 800bcc0:	4642      	mov	r2, r8
 800bcc2:	4631      	mov	r1, r6
 800bcc4:	4628      	mov	r0, r5
 800bcc6:	47b8      	blx	r7
 800bcc8:	3001      	adds	r0, #1
 800bcca:	d1e9      	bne.n	800bca0 <_printf_float+0x358>
 800bccc:	e699      	b.n	800ba02 <_printf_float+0xba>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	464a      	mov	r2, r9
 800bcd2:	4631      	mov	r1, r6
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	47b8      	blx	r7
 800bcd8:	3001      	adds	r0, #1
 800bcda:	f43f ae92 	beq.w	800ba02 <_printf_float+0xba>
 800bcde:	f108 0801 	add.w	r8, r8, #1
 800bce2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bce6:	1a9b      	subs	r3, r3, r2
 800bce8:	eba3 030a 	sub.w	r3, r3, sl
 800bcec:	4543      	cmp	r3, r8
 800bcee:	dcee      	bgt.n	800bcce <_printf_float+0x386>
 800bcf0:	e74a      	b.n	800bb88 <_printf_float+0x240>
 800bcf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcf4:	2a01      	cmp	r2, #1
 800bcf6:	dc01      	bgt.n	800bcfc <_printf_float+0x3b4>
 800bcf8:	07db      	lsls	r3, r3, #31
 800bcfa:	d53a      	bpl.n	800bd72 <_printf_float+0x42a>
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	4642      	mov	r2, r8
 800bd00:	4631      	mov	r1, r6
 800bd02:	4628      	mov	r0, r5
 800bd04:	47b8      	blx	r7
 800bd06:	3001      	adds	r0, #1
 800bd08:	f43f ae7b 	beq.w	800ba02 <_printf_float+0xba>
 800bd0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd10:	4631      	mov	r1, r6
 800bd12:	4628      	mov	r0, r5
 800bd14:	47b8      	blx	r7
 800bd16:	3001      	adds	r0, #1
 800bd18:	f108 0801 	add.w	r8, r8, #1
 800bd1c:	f43f ae71 	beq.w	800ba02 <_printf_float+0xba>
 800bd20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd22:	2200      	movs	r2, #0
 800bd24:	f103 3aff 	add.w	sl, r3, #4294967295
 800bd28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	f7f4 feeb 	bl	8000b08 <__aeabi_dcmpeq>
 800bd32:	b9c8      	cbnz	r0, 800bd68 <_printf_float+0x420>
 800bd34:	4653      	mov	r3, sl
 800bd36:	4642      	mov	r2, r8
 800bd38:	4631      	mov	r1, r6
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	47b8      	blx	r7
 800bd3e:	3001      	adds	r0, #1
 800bd40:	d10e      	bne.n	800bd60 <_printf_float+0x418>
 800bd42:	e65e      	b.n	800ba02 <_printf_float+0xba>
 800bd44:	2301      	movs	r3, #1
 800bd46:	4652      	mov	r2, sl
 800bd48:	4631      	mov	r1, r6
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	47b8      	blx	r7
 800bd4e:	3001      	adds	r0, #1
 800bd50:	f43f ae57 	beq.w	800ba02 <_printf_float+0xba>
 800bd54:	f108 0801 	add.w	r8, r8, #1
 800bd58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	4543      	cmp	r3, r8
 800bd5e:	dcf1      	bgt.n	800bd44 <_printf_float+0x3fc>
 800bd60:	464b      	mov	r3, r9
 800bd62:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bd66:	e6de      	b.n	800bb26 <_printf_float+0x1de>
 800bd68:	f04f 0800 	mov.w	r8, #0
 800bd6c:	f104 0a1a 	add.w	sl, r4, #26
 800bd70:	e7f2      	b.n	800bd58 <_printf_float+0x410>
 800bd72:	2301      	movs	r3, #1
 800bd74:	e7df      	b.n	800bd36 <_printf_float+0x3ee>
 800bd76:	2301      	movs	r3, #1
 800bd78:	464a      	mov	r2, r9
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	47b8      	blx	r7
 800bd80:	3001      	adds	r0, #1
 800bd82:	f43f ae3e 	beq.w	800ba02 <_printf_float+0xba>
 800bd86:	f108 0801 	add.w	r8, r8, #1
 800bd8a:	68e3      	ldr	r3, [r4, #12]
 800bd8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bd8e:	1a9b      	subs	r3, r3, r2
 800bd90:	4543      	cmp	r3, r8
 800bd92:	dcf0      	bgt.n	800bd76 <_printf_float+0x42e>
 800bd94:	e6fc      	b.n	800bb90 <_printf_float+0x248>
 800bd96:	f04f 0800 	mov.w	r8, #0
 800bd9a:	f104 0919 	add.w	r9, r4, #25
 800bd9e:	e7f4      	b.n	800bd8a <_printf_float+0x442>
 800bda0:	2900      	cmp	r1, #0
 800bda2:	f43f ae8b 	beq.w	800babc <_printf_float+0x174>
 800bda6:	2300      	movs	r3, #0
 800bda8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bdac:	ab09      	add	r3, sp, #36	; 0x24
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	ec49 8b10 	vmov	d0, r8, r9
 800bdb4:	6022      	str	r2, [r4, #0]
 800bdb6:	f8cd a004 	str.w	sl, [sp, #4]
 800bdba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bdbe:	4628      	mov	r0, r5
 800bdc0:	f7ff fd2d 	bl	800b81e <__cvt>
 800bdc4:	4680      	mov	r8, r0
 800bdc6:	e648      	b.n	800ba5a <_printf_float+0x112>

0800bdc8 <_printf_common>:
 800bdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdcc:	4691      	mov	r9, r2
 800bdce:	461f      	mov	r7, r3
 800bdd0:	688a      	ldr	r2, [r1, #8]
 800bdd2:	690b      	ldr	r3, [r1, #16]
 800bdd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	bfb8      	it	lt
 800bddc:	4613      	movlt	r3, r2
 800bdde:	f8c9 3000 	str.w	r3, [r9]
 800bde2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bde6:	4606      	mov	r6, r0
 800bde8:	460c      	mov	r4, r1
 800bdea:	b112      	cbz	r2, 800bdf2 <_printf_common+0x2a>
 800bdec:	3301      	adds	r3, #1
 800bdee:	f8c9 3000 	str.w	r3, [r9]
 800bdf2:	6823      	ldr	r3, [r4, #0]
 800bdf4:	0699      	lsls	r1, r3, #26
 800bdf6:	bf42      	ittt	mi
 800bdf8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bdfc:	3302      	addmi	r3, #2
 800bdfe:	f8c9 3000 	strmi.w	r3, [r9]
 800be02:	6825      	ldr	r5, [r4, #0]
 800be04:	f015 0506 	ands.w	r5, r5, #6
 800be08:	d107      	bne.n	800be1a <_printf_common+0x52>
 800be0a:	f104 0a19 	add.w	sl, r4, #25
 800be0e:	68e3      	ldr	r3, [r4, #12]
 800be10:	f8d9 2000 	ldr.w	r2, [r9]
 800be14:	1a9b      	subs	r3, r3, r2
 800be16:	42ab      	cmp	r3, r5
 800be18:	dc28      	bgt.n	800be6c <_printf_common+0xa4>
 800be1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800be1e:	6822      	ldr	r2, [r4, #0]
 800be20:	3300      	adds	r3, #0
 800be22:	bf18      	it	ne
 800be24:	2301      	movne	r3, #1
 800be26:	0692      	lsls	r2, r2, #26
 800be28:	d42d      	bmi.n	800be86 <_printf_common+0xbe>
 800be2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be2e:	4639      	mov	r1, r7
 800be30:	4630      	mov	r0, r6
 800be32:	47c0      	blx	r8
 800be34:	3001      	adds	r0, #1
 800be36:	d020      	beq.n	800be7a <_printf_common+0xb2>
 800be38:	6823      	ldr	r3, [r4, #0]
 800be3a:	68e5      	ldr	r5, [r4, #12]
 800be3c:	f8d9 2000 	ldr.w	r2, [r9]
 800be40:	f003 0306 	and.w	r3, r3, #6
 800be44:	2b04      	cmp	r3, #4
 800be46:	bf08      	it	eq
 800be48:	1aad      	subeq	r5, r5, r2
 800be4a:	68a3      	ldr	r3, [r4, #8]
 800be4c:	6922      	ldr	r2, [r4, #16]
 800be4e:	bf0c      	ite	eq
 800be50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be54:	2500      	movne	r5, #0
 800be56:	4293      	cmp	r3, r2
 800be58:	bfc4      	itt	gt
 800be5a:	1a9b      	subgt	r3, r3, r2
 800be5c:	18ed      	addgt	r5, r5, r3
 800be5e:	f04f 0900 	mov.w	r9, #0
 800be62:	341a      	adds	r4, #26
 800be64:	454d      	cmp	r5, r9
 800be66:	d11a      	bne.n	800be9e <_printf_common+0xd6>
 800be68:	2000      	movs	r0, #0
 800be6a:	e008      	b.n	800be7e <_printf_common+0xb6>
 800be6c:	2301      	movs	r3, #1
 800be6e:	4652      	mov	r2, sl
 800be70:	4639      	mov	r1, r7
 800be72:	4630      	mov	r0, r6
 800be74:	47c0      	blx	r8
 800be76:	3001      	adds	r0, #1
 800be78:	d103      	bne.n	800be82 <_printf_common+0xba>
 800be7a:	f04f 30ff 	mov.w	r0, #4294967295
 800be7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be82:	3501      	adds	r5, #1
 800be84:	e7c3      	b.n	800be0e <_printf_common+0x46>
 800be86:	18e1      	adds	r1, r4, r3
 800be88:	1c5a      	adds	r2, r3, #1
 800be8a:	2030      	movs	r0, #48	; 0x30
 800be8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be90:	4422      	add	r2, r4
 800be92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be9a:	3302      	adds	r3, #2
 800be9c:	e7c5      	b.n	800be2a <_printf_common+0x62>
 800be9e:	2301      	movs	r3, #1
 800bea0:	4622      	mov	r2, r4
 800bea2:	4639      	mov	r1, r7
 800bea4:	4630      	mov	r0, r6
 800bea6:	47c0      	blx	r8
 800bea8:	3001      	adds	r0, #1
 800beaa:	d0e6      	beq.n	800be7a <_printf_common+0xb2>
 800beac:	f109 0901 	add.w	r9, r9, #1
 800beb0:	e7d8      	b.n	800be64 <_printf_common+0x9c>
	...

0800beb4 <_printf_i>:
 800beb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800beb8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bebc:	460c      	mov	r4, r1
 800bebe:	7e09      	ldrb	r1, [r1, #24]
 800bec0:	b085      	sub	sp, #20
 800bec2:	296e      	cmp	r1, #110	; 0x6e
 800bec4:	4617      	mov	r7, r2
 800bec6:	4606      	mov	r6, r0
 800bec8:	4698      	mov	r8, r3
 800beca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800becc:	f000 80b3 	beq.w	800c036 <_printf_i+0x182>
 800bed0:	d822      	bhi.n	800bf18 <_printf_i+0x64>
 800bed2:	2963      	cmp	r1, #99	; 0x63
 800bed4:	d036      	beq.n	800bf44 <_printf_i+0x90>
 800bed6:	d80a      	bhi.n	800beee <_printf_i+0x3a>
 800bed8:	2900      	cmp	r1, #0
 800beda:	f000 80b9 	beq.w	800c050 <_printf_i+0x19c>
 800bede:	2958      	cmp	r1, #88	; 0x58
 800bee0:	f000 8083 	beq.w	800bfea <_printf_i+0x136>
 800bee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bee8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800beec:	e032      	b.n	800bf54 <_printf_i+0xa0>
 800beee:	2964      	cmp	r1, #100	; 0x64
 800bef0:	d001      	beq.n	800bef6 <_printf_i+0x42>
 800bef2:	2969      	cmp	r1, #105	; 0x69
 800bef4:	d1f6      	bne.n	800bee4 <_printf_i+0x30>
 800bef6:	6820      	ldr	r0, [r4, #0]
 800bef8:	6813      	ldr	r3, [r2, #0]
 800befa:	0605      	lsls	r5, r0, #24
 800befc:	f103 0104 	add.w	r1, r3, #4
 800bf00:	d52a      	bpl.n	800bf58 <_printf_i+0xa4>
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	6011      	str	r1, [r2, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	da03      	bge.n	800bf12 <_printf_i+0x5e>
 800bf0a:	222d      	movs	r2, #45	; 0x2d
 800bf0c:	425b      	negs	r3, r3
 800bf0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800bf12:	486f      	ldr	r0, [pc, #444]	; (800c0d0 <_printf_i+0x21c>)
 800bf14:	220a      	movs	r2, #10
 800bf16:	e039      	b.n	800bf8c <_printf_i+0xd8>
 800bf18:	2973      	cmp	r1, #115	; 0x73
 800bf1a:	f000 809d 	beq.w	800c058 <_printf_i+0x1a4>
 800bf1e:	d808      	bhi.n	800bf32 <_printf_i+0x7e>
 800bf20:	296f      	cmp	r1, #111	; 0x6f
 800bf22:	d020      	beq.n	800bf66 <_printf_i+0xb2>
 800bf24:	2970      	cmp	r1, #112	; 0x70
 800bf26:	d1dd      	bne.n	800bee4 <_printf_i+0x30>
 800bf28:	6823      	ldr	r3, [r4, #0]
 800bf2a:	f043 0320 	orr.w	r3, r3, #32
 800bf2e:	6023      	str	r3, [r4, #0]
 800bf30:	e003      	b.n	800bf3a <_printf_i+0x86>
 800bf32:	2975      	cmp	r1, #117	; 0x75
 800bf34:	d017      	beq.n	800bf66 <_printf_i+0xb2>
 800bf36:	2978      	cmp	r1, #120	; 0x78
 800bf38:	d1d4      	bne.n	800bee4 <_printf_i+0x30>
 800bf3a:	2378      	movs	r3, #120	; 0x78
 800bf3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf40:	4864      	ldr	r0, [pc, #400]	; (800c0d4 <_printf_i+0x220>)
 800bf42:	e055      	b.n	800bff0 <_printf_i+0x13c>
 800bf44:	6813      	ldr	r3, [r2, #0]
 800bf46:	1d19      	adds	r1, r3, #4
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6011      	str	r1, [r2, #0]
 800bf4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf54:	2301      	movs	r3, #1
 800bf56:	e08c      	b.n	800c072 <_printf_i+0x1be>
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	6011      	str	r1, [r2, #0]
 800bf5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf60:	bf18      	it	ne
 800bf62:	b21b      	sxthne	r3, r3
 800bf64:	e7cf      	b.n	800bf06 <_printf_i+0x52>
 800bf66:	6813      	ldr	r3, [r2, #0]
 800bf68:	6825      	ldr	r5, [r4, #0]
 800bf6a:	1d18      	adds	r0, r3, #4
 800bf6c:	6010      	str	r0, [r2, #0]
 800bf6e:	0628      	lsls	r0, r5, #24
 800bf70:	d501      	bpl.n	800bf76 <_printf_i+0xc2>
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	e002      	b.n	800bf7c <_printf_i+0xc8>
 800bf76:	0668      	lsls	r0, r5, #25
 800bf78:	d5fb      	bpl.n	800bf72 <_printf_i+0xbe>
 800bf7a:	881b      	ldrh	r3, [r3, #0]
 800bf7c:	4854      	ldr	r0, [pc, #336]	; (800c0d0 <_printf_i+0x21c>)
 800bf7e:	296f      	cmp	r1, #111	; 0x6f
 800bf80:	bf14      	ite	ne
 800bf82:	220a      	movne	r2, #10
 800bf84:	2208      	moveq	r2, #8
 800bf86:	2100      	movs	r1, #0
 800bf88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf8c:	6865      	ldr	r5, [r4, #4]
 800bf8e:	60a5      	str	r5, [r4, #8]
 800bf90:	2d00      	cmp	r5, #0
 800bf92:	f2c0 8095 	blt.w	800c0c0 <_printf_i+0x20c>
 800bf96:	6821      	ldr	r1, [r4, #0]
 800bf98:	f021 0104 	bic.w	r1, r1, #4
 800bf9c:	6021      	str	r1, [r4, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d13d      	bne.n	800c01e <_printf_i+0x16a>
 800bfa2:	2d00      	cmp	r5, #0
 800bfa4:	f040 808e 	bne.w	800c0c4 <_printf_i+0x210>
 800bfa8:	4665      	mov	r5, ip
 800bfaa:	2a08      	cmp	r2, #8
 800bfac:	d10b      	bne.n	800bfc6 <_printf_i+0x112>
 800bfae:	6823      	ldr	r3, [r4, #0]
 800bfb0:	07db      	lsls	r3, r3, #31
 800bfb2:	d508      	bpl.n	800bfc6 <_printf_i+0x112>
 800bfb4:	6923      	ldr	r3, [r4, #16]
 800bfb6:	6862      	ldr	r2, [r4, #4]
 800bfb8:	429a      	cmp	r2, r3
 800bfba:	bfde      	ittt	le
 800bfbc:	2330      	movle	r3, #48	; 0x30
 800bfbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bfc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bfc6:	ebac 0305 	sub.w	r3, ip, r5
 800bfca:	6123      	str	r3, [r4, #16]
 800bfcc:	f8cd 8000 	str.w	r8, [sp]
 800bfd0:	463b      	mov	r3, r7
 800bfd2:	aa03      	add	r2, sp, #12
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	f7ff fef6 	bl	800bdc8 <_printf_common>
 800bfdc:	3001      	adds	r0, #1
 800bfde:	d14d      	bne.n	800c07c <_printf_i+0x1c8>
 800bfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800bfe4:	b005      	add	sp, #20
 800bfe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfea:	4839      	ldr	r0, [pc, #228]	; (800c0d0 <_printf_i+0x21c>)
 800bfec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bff0:	6813      	ldr	r3, [r2, #0]
 800bff2:	6821      	ldr	r1, [r4, #0]
 800bff4:	1d1d      	adds	r5, r3, #4
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	6015      	str	r5, [r2, #0]
 800bffa:	060a      	lsls	r2, r1, #24
 800bffc:	d50b      	bpl.n	800c016 <_printf_i+0x162>
 800bffe:	07ca      	lsls	r2, r1, #31
 800c000:	bf44      	itt	mi
 800c002:	f041 0120 	orrmi.w	r1, r1, #32
 800c006:	6021      	strmi	r1, [r4, #0]
 800c008:	b91b      	cbnz	r3, 800c012 <_printf_i+0x15e>
 800c00a:	6822      	ldr	r2, [r4, #0]
 800c00c:	f022 0220 	bic.w	r2, r2, #32
 800c010:	6022      	str	r2, [r4, #0]
 800c012:	2210      	movs	r2, #16
 800c014:	e7b7      	b.n	800bf86 <_printf_i+0xd2>
 800c016:	064d      	lsls	r5, r1, #25
 800c018:	bf48      	it	mi
 800c01a:	b29b      	uxthmi	r3, r3
 800c01c:	e7ef      	b.n	800bffe <_printf_i+0x14a>
 800c01e:	4665      	mov	r5, ip
 800c020:	fbb3 f1f2 	udiv	r1, r3, r2
 800c024:	fb02 3311 	mls	r3, r2, r1, r3
 800c028:	5cc3      	ldrb	r3, [r0, r3]
 800c02a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c02e:	460b      	mov	r3, r1
 800c030:	2900      	cmp	r1, #0
 800c032:	d1f5      	bne.n	800c020 <_printf_i+0x16c>
 800c034:	e7b9      	b.n	800bfaa <_printf_i+0xf6>
 800c036:	6813      	ldr	r3, [r2, #0]
 800c038:	6825      	ldr	r5, [r4, #0]
 800c03a:	6961      	ldr	r1, [r4, #20]
 800c03c:	1d18      	adds	r0, r3, #4
 800c03e:	6010      	str	r0, [r2, #0]
 800c040:	0628      	lsls	r0, r5, #24
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	d501      	bpl.n	800c04a <_printf_i+0x196>
 800c046:	6019      	str	r1, [r3, #0]
 800c048:	e002      	b.n	800c050 <_printf_i+0x19c>
 800c04a:	066a      	lsls	r2, r5, #25
 800c04c:	d5fb      	bpl.n	800c046 <_printf_i+0x192>
 800c04e:	8019      	strh	r1, [r3, #0]
 800c050:	2300      	movs	r3, #0
 800c052:	6123      	str	r3, [r4, #16]
 800c054:	4665      	mov	r5, ip
 800c056:	e7b9      	b.n	800bfcc <_printf_i+0x118>
 800c058:	6813      	ldr	r3, [r2, #0]
 800c05a:	1d19      	adds	r1, r3, #4
 800c05c:	6011      	str	r1, [r2, #0]
 800c05e:	681d      	ldr	r5, [r3, #0]
 800c060:	6862      	ldr	r2, [r4, #4]
 800c062:	2100      	movs	r1, #0
 800c064:	4628      	mov	r0, r5
 800c066:	f7f4 f8db 	bl	8000220 <memchr>
 800c06a:	b108      	cbz	r0, 800c070 <_printf_i+0x1bc>
 800c06c:	1b40      	subs	r0, r0, r5
 800c06e:	6060      	str	r0, [r4, #4]
 800c070:	6863      	ldr	r3, [r4, #4]
 800c072:	6123      	str	r3, [r4, #16]
 800c074:	2300      	movs	r3, #0
 800c076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c07a:	e7a7      	b.n	800bfcc <_printf_i+0x118>
 800c07c:	6923      	ldr	r3, [r4, #16]
 800c07e:	462a      	mov	r2, r5
 800c080:	4639      	mov	r1, r7
 800c082:	4630      	mov	r0, r6
 800c084:	47c0      	blx	r8
 800c086:	3001      	adds	r0, #1
 800c088:	d0aa      	beq.n	800bfe0 <_printf_i+0x12c>
 800c08a:	6823      	ldr	r3, [r4, #0]
 800c08c:	079b      	lsls	r3, r3, #30
 800c08e:	d413      	bmi.n	800c0b8 <_printf_i+0x204>
 800c090:	68e0      	ldr	r0, [r4, #12]
 800c092:	9b03      	ldr	r3, [sp, #12]
 800c094:	4298      	cmp	r0, r3
 800c096:	bfb8      	it	lt
 800c098:	4618      	movlt	r0, r3
 800c09a:	e7a3      	b.n	800bfe4 <_printf_i+0x130>
 800c09c:	2301      	movs	r3, #1
 800c09e:	464a      	mov	r2, r9
 800c0a0:	4639      	mov	r1, r7
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	47c0      	blx	r8
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	d09a      	beq.n	800bfe0 <_printf_i+0x12c>
 800c0aa:	3501      	adds	r5, #1
 800c0ac:	68e3      	ldr	r3, [r4, #12]
 800c0ae:	9a03      	ldr	r2, [sp, #12]
 800c0b0:	1a9b      	subs	r3, r3, r2
 800c0b2:	42ab      	cmp	r3, r5
 800c0b4:	dcf2      	bgt.n	800c09c <_printf_i+0x1e8>
 800c0b6:	e7eb      	b.n	800c090 <_printf_i+0x1dc>
 800c0b8:	2500      	movs	r5, #0
 800c0ba:	f104 0919 	add.w	r9, r4, #25
 800c0be:	e7f5      	b.n	800c0ac <_printf_i+0x1f8>
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d1ac      	bne.n	800c01e <_printf_i+0x16a>
 800c0c4:	7803      	ldrb	r3, [r0, #0]
 800c0c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c0ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0ce:	e76c      	b.n	800bfaa <_printf_i+0xf6>
 800c0d0:	080100ae 	.word	0x080100ae
 800c0d4:	080100bf 	.word	0x080100bf

0800c0d8 <iprintf>:
 800c0d8:	b40f      	push	{r0, r1, r2, r3}
 800c0da:	4b0a      	ldr	r3, [pc, #40]	; (800c104 <iprintf+0x2c>)
 800c0dc:	b513      	push	{r0, r1, r4, lr}
 800c0de:	681c      	ldr	r4, [r3, #0]
 800c0e0:	b124      	cbz	r4, 800c0ec <iprintf+0x14>
 800c0e2:	69a3      	ldr	r3, [r4, #24]
 800c0e4:	b913      	cbnz	r3, 800c0ec <iprintf+0x14>
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f001 ff1e 	bl	800df28 <__sinit>
 800c0ec:	ab05      	add	r3, sp, #20
 800c0ee:	9a04      	ldr	r2, [sp, #16]
 800c0f0:	68a1      	ldr	r1, [r4, #8]
 800c0f2:	9301      	str	r3, [sp, #4]
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	f003 f839 	bl	800f16c <_vfiprintf_r>
 800c0fa:	b002      	add	sp, #8
 800c0fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c100:	b004      	add	sp, #16
 800c102:	4770      	bx	lr
 800c104:	2000004c 	.word	0x2000004c

0800c108 <_puts_r>:
 800c108:	b570      	push	{r4, r5, r6, lr}
 800c10a:	460e      	mov	r6, r1
 800c10c:	4605      	mov	r5, r0
 800c10e:	b118      	cbz	r0, 800c118 <_puts_r+0x10>
 800c110:	6983      	ldr	r3, [r0, #24]
 800c112:	b90b      	cbnz	r3, 800c118 <_puts_r+0x10>
 800c114:	f001 ff08 	bl	800df28 <__sinit>
 800c118:	69ab      	ldr	r3, [r5, #24]
 800c11a:	68ac      	ldr	r4, [r5, #8]
 800c11c:	b913      	cbnz	r3, 800c124 <_puts_r+0x1c>
 800c11e:	4628      	mov	r0, r5
 800c120:	f001 ff02 	bl	800df28 <__sinit>
 800c124:	4b23      	ldr	r3, [pc, #140]	; (800c1b4 <_puts_r+0xac>)
 800c126:	429c      	cmp	r4, r3
 800c128:	d117      	bne.n	800c15a <_puts_r+0x52>
 800c12a:	686c      	ldr	r4, [r5, #4]
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	071b      	lsls	r3, r3, #28
 800c130:	d51d      	bpl.n	800c16e <_puts_r+0x66>
 800c132:	6923      	ldr	r3, [r4, #16]
 800c134:	b1db      	cbz	r3, 800c16e <_puts_r+0x66>
 800c136:	3e01      	subs	r6, #1
 800c138:	68a3      	ldr	r3, [r4, #8]
 800c13a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c13e:	3b01      	subs	r3, #1
 800c140:	60a3      	str	r3, [r4, #8]
 800c142:	b9e9      	cbnz	r1, 800c180 <_puts_r+0x78>
 800c144:	2b00      	cmp	r3, #0
 800c146:	da2e      	bge.n	800c1a6 <_puts_r+0x9e>
 800c148:	4622      	mov	r2, r4
 800c14a:	210a      	movs	r1, #10
 800c14c:	4628      	mov	r0, r5
 800c14e:	f000 fef5 	bl	800cf3c <__swbuf_r>
 800c152:	3001      	adds	r0, #1
 800c154:	d011      	beq.n	800c17a <_puts_r+0x72>
 800c156:	200a      	movs	r0, #10
 800c158:	e011      	b.n	800c17e <_puts_r+0x76>
 800c15a:	4b17      	ldr	r3, [pc, #92]	; (800c1b8 <_puts_r+0xb0>)
 800c15c:	429c      	cmp	r4, r3
 800c15e:	d101      	bne.n	800c164 <_puts_r+0x5c>
 800c160:	68ac      	ldr	r4, [r5, #8]
 800c162:	e7e3      	b.n	800c12c <_puts_r+0x24>
 800c164:	4b15      	ldr	r3, [pc, #84]	; (800c1bc <_puts_r+0xb4>)
 800c166:	429c      	cmp	r4, r3
 800c168:	bf08      	it	eq
 800c16a:	68ec      	ldreq	r4, [r5, #12]
 800c16c:	e7de      	b.n	800c12c <_puts_r+0x24>
 800c16e:	4621      	mov	r1, r4
 800c170:	4628      	mov	r0, r5
 800c172:	f000 ff35 	bl	800cfe0 <__swsetup_r>
 800c176:	2800      	cmp	r0, #0
 800c178:	d0dd      	beq.n	800c136 <_puts_r+0x2e>
 800c17a:	f04f 30ff 	mov.w	r0, #4294967295
 800c17e:	bd70      	pop	{r4, r5, r6, pc}
 800c180:	2b00      	cmp	r3, #0
 800c182:	da04      	bge.n	800c18e <_puts_r+0x86>
 800c184:	69a2      	ldr	r2, [r4, #24]
 800c186:	429a      	cmp	r2, r3
 800c188:	dc06      	bgt.n	800c198 <_puts_r+0x90>
 800c18a:	290a      	cmp	r1, #10
 800c18c:	d004      	beq.n	800c198 <_puts_r+0x90>
 800c18e:	6823      	ldr	r3, [r4, #0]
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	6022      	str	r2, [r4, #0]
 800c194:	7019      	strb	r1, [r3, #0]
 800c196:	e7cf      	b.n	800c138 <_puts_r+0x30>
 800c198:	4622      	mov	r2, r4
 800c19a:	4628      	mov	r0, r5
 800c19c:	f000 fece 	bl	800cf3c <__swbuf_r>
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	d1c9      	bne.n	800c138 <_puts_r+0x30>
 800c1a4:	e7e9      	b.n	800c17a <_puts_r+0x72>
 800c1a6:	6823      	ldr	r3, [r4, #0]
 800c1a8:	200a      	movs	r0, #10
 800c1aa:	1c5a      	adds	r2, r3, #1
 800c1ac:	6022      	str	r2, [r4, #0]
 800c1ae:	7018      	strb	r0, [r3, #0]
 800c1b0:	e7e5      	b.n	800c17e <_puts_r+0x76>
 800c1b2:	bf00      	nop
 800c1b4:	08010150 	.word	0x08010150
 800c1b8:	08010170 	.word	0x08010170
 800c1bc:	08010130 	.word	0x08010130

0800c1c0 <puts>:
 800c1c0:	4b02      	ldr	r3, [pc, #8]	; (800c1cc <puts+0xc>)
 800c1c2:	4601      	mov	r1, r0
 800c1c4:	6818      	ldr	r0, [r3, #0]
 800c1c6:	f7ff bf9f 	b.w	800c108 <_puts_r>
 800c1ca:	bf00      	nop
 800c1cc:	2000004c 	.word	0x2000004c

0800c1d0 <sulp>:
 800c1d0:	b570      	push	{r4, r5, r6, lr}
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	460d      	mov	r5, r1
 800c1d6:	ec45 4b10 	vmov	d0, r4, r5
 800c1da:	4616      	mov	r6, r2
 800c1dc:	f002 fdb2 	bl	800ed44 <__ulp>
 800c1e0:	ec51 0b10 	vmov	r0, r1, d0
 800c1e4:	b17e      	cbz	r6, 800c206 <sulp+0x36>
 800c1e6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c1ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	dd09      	ble.n	800c206 <sulp+0x36>
 800c1f2:	051b      	lsls	r3, r3, #20
 800c1f4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c1f8:	2400      	movs	r4, #0
 800c1fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c1fe:	4622      	mov	r2, r4
 800c200:	462b      	mov	r3, r5
 800c202:	f7f4 fa19 	bl	8000638 <__aeabi_dmul>
 800c206:	bd70      	pop	{r4, r5, r6, pc}

0800c208 <_strtod_l>:
 800c208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20c:	461f      	mov	r7, r3
 800c20e:	b0a1      	sub	sp, #132	; 0x84
 800c210:	2300      	movs	r3, #0
 800c212:	4681      	mov	r9, r0
 800c214:	4638      	mov	r0, r7
 800c216:	460e      	mov	r6, r1
 800c218:	9217      	str	r2, [sp, #92]	; 0x5c
 800c21a:	931c      	str	r3, [sp, #112]	; 0x70
 800c21c:	f002 fa37 	bl	800e68e <__localeconv_l>
 800c220:	4680      	mov	r8, r0
 800c222:	6800      	ldr	r0, [r0, #0]
 800c224:	f7f3 fff4 	bl	8000210 <strlen>
 800c228:	f04f 0a00 	mov.w	sl, #0
 800c22c:	4604      	mov	r4, r0
 800c22e:	f04f 0b00 	mov.w	fp, #0
 800c232:	961b      	str	r6, [sp, #108]	; 0x6c
 800c234:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c236:	781a      	ldrb	r2, [r3, #0]
 800c238:	2a0d      	cmp	r2, #13
 800c23a:	d832      	bhi.n	800c2a2 <_strtod_l+0x9a>
 800c23c:	2a09      	cmp	r2, #9
 800c23e:	d236      	bcs.n	800c2ae <_strtod_l+0xa6>
 800c240:	2a00      	cmp	r2, #0
 800c242:	d03e      	beq.n	800c2c2 <_strtod_l+0xba>
 800c244:	2300      	movs	r3, #0
 800c246:	930d      	str	r3, [sp, #52]	; 0x34
 800c248:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c24a:	782b      	ldrb	r3, [r5, #0]
 800c24c:	2b30      	cmp	r3, #48	; 0x30
 800c24e:	f040 80ac 	bne.w	800c3aa <_strtod_l+0x1a2>
 800c252:	786b      	ldrb	r3, [r5, #1]
 800c254:	2b58      	cmp	r3, #88	; 0x58
 800c256:	d001      	beq.n	800c25c <_strtod_l+0x54>
 800c258:	2b78      	cmp	r3, #120	; 0x78
 800c25a:	d167      	bne.n	800c32c <_strtod_l+0x124>
 800c25c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c25e:	9301      	str	r3, [sp, #4]
 800c260:	ab1c      	add	r3, sp, #112	; 0x70
 800c262:	9300      	str	r3, [sp, #0]
 800c264:	9702      	str	r7, [sp, #8]
 800c266:	ab1d      	add	r3, sp, #116	; 0x74
 800c268:	4a88      	ldr	r2, [pc, #544]	; (800c48c <_strtod_l+0x284>)
 800c26a:	a91b      	add	r1, sp, #108	; 0x6c
 800c26c:	4648      	mov	r0, r9
 800c26e:	f001 ff34 	bl	800e0da <__gethex>
 800c272:	f010 0407 	ands.w	r4, r0, #7
 800c276:	4606      	mov	r6, r0
 800c278:	d005      	beq.n	800c286 <_strtod_l+0x7e>
 800c27a:	2c06      	cmp	r4, #6
 800c27c:	d12b      	bne.n	800c2d6 <_strtod_l+0xce>
 800c27e:	3501      	adds	r5, #1
 800c280:	2300      	movs	r3, #0
 800c282:	951b      	str	r5, [sp, #108]	; 0x6c
 800c284:	930d      	str	r3, [sp, #52]	; 0x34
 800c286:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f040 859a 	bne.w	800cdc2 <_strtod_l+0xbba>
 800c28e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c290:	b1e3      	cbz	r3, 800c2cc <_strtod_l+0xc4>
 800c292:	4652      	mov	r2, sl
 800c294:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c298:	ec43 2b10 	vmov	d0, r2, r3
 800c29c:	b021      	add	sp, #132	; 0x84
 800c29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2a2:	2a2b      	cmp	r2, #43	; 0x2b
 800c2a4:	d015      	beq.n	800c2d2 <_strtod_l+0xca>
 800c2a6:	2a2d      	cmp	r2, #45	; 0x2d
 800c2a8:	d004      	beq.n	800c2b4 <_strtod_l+0xac>
 800c2aa:	2a20      	cmp	r2, #32
 800c2ac:	d1ca      	bne.n	800c244 <_strtod_l+0x3c>
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800c2b2:	e7bf      	b.n	800c234 <_strtod_l+0x2c>
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	920d      	str	r2, [sp, #52]	; 0x34
 800c2b8:	1c5a      	adds	r2, r3, #1
 800c2ba:	921b      	str	r2, [sp, #108]	; 0x6c
 800c2bc:	785b      	ldrb	r3, [r3, #1]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d1c2      	bne.n	800c248 <_strtod_l+0x40>
 800c2c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c2c4:	961b      	str	r6, [sp, #108]	; 0x6c
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	f040 8579 	bne.w	800cdbe <_strtod_l+0xbb6>
 800c2cc:	4652      	mov	r2, sl
 800c2ce:	465b      	mov	r3, fp
 800c2d0:	e7e2      	b.n	800c298 <_strtod_l+0x90>
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	e7ef      	b.n	800c2b6 <_strtod_l+0xae>
 800c2d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c2d8:	b13a      	cbz	r2, 800c2ea <_strtod_l+0xe2>
 800c2da:	2135      	movs	r1, #53	; 0x35
 800c2dc:	a81e      	add	r0, sp, #120	; 0x78
 800c2de:	f002 fe29 	bl	800ef34 <__copybits>
 800c2e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c2e4:	4648      	mov	r0, r9
 800c2e6:	f002 fa95 	bl	800e814 <_Bfree>
 800c2ea:	3c01      	subs	r4, #1
 800c2ec:	2c04      	cmp	r4, #4
 800c2ee:	d806      	bhi.n	800c2fe <_strtod_l+0xf6>
 800c2f0:	e8df f004 	tbb	[pc, r4]
 800c2f4:	1714030a 	.word	0x1714030a
 800c2f8:	0a          	.byte	0x0a
 800c2f9:	00          	.byte	0x00
 800c2fa:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800c2fe:	0730      	lsls	r0, r6, #28
 800c300:	d5c1      	bpl.n	800c286 <_strtod_l+0x7e>
 800c302:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c306:	e7be      	b.n	800c286 <_strtod_l+0x7e>
 800c308:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800c30c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c30e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c312:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c316:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c31a:	e7f0      	b.n	800c2fe <_strtod_l+0xf6>
 800c31c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800c490 <_strtod_l+0x288>
 800c320:	e7ed      	b.n	800c2fe <_strtod_l+0xf6>
 800c322:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c326:	f04f 3aff 	mov.w	sl, #4294967295
 800c32a:	e7e8      	b.n	800c2fe <_strtod_l+0xf6>
 800c32c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c32e:	1c5a      	adds	r2, r3, #1
 800c330:	921b      	str	r2, [sp, #108]	; 0x6c
 800c332:	785b      	ldrb	r3, [r3, #1]
 800c334:	2b30      	cmp	r3, #48	; 0x30
 800c336:	d0f9      	beq.n	800c32c <_strtod_l+0x124>
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d0a4      	beq.n	800c286 <_strtod_l+0x7e>
 800c33c:	2301      	movs	r3, #1
 800c33e:	2500      	movs	r5, #0
 800c340:	9306      	str	r3, [sp, #24]
 800c342:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c344:	9308      	str	r3, [sp, #32]
 800c346:	9507      	str	r5, [sp, #28]
 800c348:	9505      	str	r5, [sp, #20]
 800c34a:	220a      	movs	r2, #10
 800c34c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c34e:	7807      	ldrb	r7, [r0, #0]
 800c350:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800c354:	b2d9      	uxtb	r1, r3
 800c356:	2909      	cmp	r1, #9
 800c358:	d929      	bls.n	800c3ae <_strtod_l+0x1a6>
 800c35a:	4622      	mov	r2, r4
 800c35c:	f8d8 1000 	ldr.w	r1, [r8]
 800c360:	f003 f86d 	bl	800f43e <strncmp>
 800c364:	2800      	cmp	r0, #0
 800c366:	d031      	beq.n	800c3cc <_strtod_l+0x1c4>
 800c368:	2000      	movs	r0, #0
 800c36a:	9c05      	ldr	r4, [sp, #20]
 800c36c:	9004      	str	r0, [sp, #16]
 800c36e:	463b      	mov	r3, r7
 800c370:	4602      	mov	r2, r0
 800c372:	2b65      	cmp	r3, #101	; 0x65
 800c374:	d001      	beq.n	800c37a <_strtod_l+0x172>
 800c376:	2b45      	cmp	r3, #69	; 0x45
 800c378:	d114      	bne.n	800c3a4 <_strtod_l+0x19c>
 800c37a:	b924      	cbnz	r4, 800c386 <_strtod_l+0x17e>
 800c37c:	b910      	cbnz	r0, 800c384 <_strtod_l+0x17c>
 800c37e:	9b06      	ldr	r3, [sp, #24]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d09e      	beq.n	800c2c2 <_strtod_l+0xba>
 800c384:	2400      	movs	r4, #0
 800c386:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800c388:	1c73      	adds	r3, r6, #1
 800c38a:	931b      	str	r3, [sp, #108]	; 0x6c
 800c38c:	7873      	ldrb	r3, [r6, #1]
 800c38e:	2b2b      	cmp	r3, #43	; 0x2b
 800c390:	d078      	beq.n	800c484 <_strtod_l+0x27c>
 800c392:	2b2d      	cmp	r3, #45	; 0x2d
 800c394:	d070      	beq.n	800c478 <_strtod_l+0x270>
 800c396:	f04f 0c00 	mov.w	ip, #0
 800c39a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800c39e:	2f09      	cmp	r7, #9
 800c3a0:	d97c      	bls.n	800c49c <_strtod_l+0x294>
 800c3a2:	961b      	str	r6, [sp, #108]	; 0x6c
 800c3a4:	f04f 0e00 	mov.w	lr, #0
 800c3a8:	e09a      	b.n	800c4e0 <_strtod_l+0x2d8>
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	e7c7      	b.n	800c33e <_strtod_l+0x136>
 800c3ae:	9905      	ldr	r1, [sp, #20]
 800c3b0:	2908      	cmp	r1, #8
 800c3b2:	bfdd      	ittte	le
 800c3b4:	9907      	ldrle	r1, [sp, #28]
 800c3b6:	fb02 3301 	mlale	r3, r2, r1, r3
 800c3ba:	9307      	strle	r3, [sp, #28]
 800c3bc:	fb02 3505 	mlagt	r5, r2, r5, r3
 800c3c0:	9b05      	ldr	r3, [sp, #20]
 800c3c2:	3001      	adds	r0, #1
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	9305      	str	r3, [sp, #20]
 800c3c8:	901b      	str	r0, [sp, #108]	; 0x6c
 800c3ca:	e7bf      	b.n	800c34c <_strtod_l+0x144>
 800c3cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3ce:	191a      	adds	r2, r3, r4
 800c3d0:	921b      	str	r2, [sp, #108]	; 0x6c
 800c3d2:	9a05      	ldr	r2, [sp, #20]
 800c3d4:	5d1b      	ldrb	r3, [r3, r4]
 800c3d6:	2a00      	cmp	r2, #0
 800c3d8:	d037      	beq.n	800c44a <_strtod_l+0x242>
 800c3da:	9c05      	ldr	r4, [sp, #20]
 800c3dc:	4602      	mov	r2, r0
 800c3de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c3e2:	2909      	cmp	r1, #9
 800c3e4:	d913      	bls.n	800c40e <_strtod_l+0x206>
 800c3e6:	2101      	movs	r1, #1
 800c3e8:	9104      	str	r1, [sp, #16]
 800c3ea:	e7c2      	b.n	800c372 <_strtod_l+0x16a>
 800c3ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c3ee:	1c5a      	adds	r2, r3, #1
 800c3f0:	921b      	str	r2, [sp, #108]	; 0x6c
 800c3f2:	785b      	ldrb	r3, [r3, #1]
 800c3f4:	3001      	adds	r0, #1
 800c3f6:	2b30      	cmp	r3, #48	; 0x30
 800c3f8:	d0f8      	beq.n	800c3ec <_strtod_l+0x1e4>
 800c3fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c3fe:	2a08      	cmp	r2, #8
 800c400:	f200 84e4 	bhi.w	800cdcc <_strtod_l+0xbc4>
 800c404:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c406:	9208      	str	r2, [sp, #32]
 800c408:	4602      	mov	r2, r0
 800c40a:	2000      	movs	r0, #0
 800c40c:	4604      	mov	r4, r0
 800c40e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800c412:	f100 0101 	add.w	r1, r0, #1
 800c416:	d012      	beq.n	800c43e <_strtod_l+0x236>
 800c418:	440a      	add	r2, r1
 800c41a:	eb00 0c04 	add.w	ip, r0, r4
 800c41e:	4621      	mov	r1, r4
 800c420:	270a      	movs	r7, #10
 800c422:	458c      	cmp	ip, r1
 800c424:	d113      	bne.n	800c44e <_strtod_l+0x246>
 800c426:	1821      	adds	r1, r4, r0
 800c428:	2908      	cmp	r1, #8
 800c42a:	f104 0401 	add.w	r4, r4, #1
 800c42e:	4404      	add	r4, r0
 800c430:	dc19      	bgt.n	800c466 <_strtod_l+0x25e>
 800c432:	9b07      	ldr	r3, [sp, #28]
 800c434:	210a      	movs	r1, #10
 800c436:	fb01 e303 	mla	r3, r1, r3, lr
 800c43a:	9307      	str	r3, [sp, #28]
 800c43c:	2100      	movs	r1, #0
 800c43e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c440:	1c58      	adds	r0, r3, #1
 800c442:	901b      	str	r0, [sp, #108]	; 0x6c
 800c444:	785b      	ldrb	r3, [r3, #1]
 800c446:	4608      	mov	r0, r1
 800c448:	e7c9      	b.n	800c3de <_strtod_l+0x1d6>
 800c44a:	9805      	ldr	r0, [sp, #20]
 800c44c:	e7d3      	b.n	800c3f6 <_strtod_l+0x1ee>
 800c44e:	2908      	cmp	r1, #8
 800c450:	f101 0101 	add.w	r1, r1, #1
 800c454:	dc03      	bgt.n	800c45e <_strtod_l+0x256>
 800c456:	9b07      	ldr	r3, [sp, #28]
 800c458:	437b      	muls	r3, r7
 800c45a:	9307      	str	r3, [sp, #28]
 800c45c:	e7e1      	b.n	800c422 <_strtod_l+0x21a>
 800c45e:	2910      	cmp	r1, #16
 800c460:	bfd8      	it	le
 800c462:	437d      	mulle	r5, r7
 800c464:	e7dd      	b.n	800c422 <_strtod_l+0x21a>
 800c466:	2c10      	cmp	r4, #16
 800c468:	bfdc      	itt	le
 800c46a:	210a      	movle	r1, #10
 800c46c:	fb01 e505 	mlale	r5, r1, r5, lr
 800c470:	e7e4      	b.n	800c43c <_strtod_l+0x234>
 800c472:	2301      	movs	r3, #1
 800c474:	9304      	str	r3, [sp, #16]
 800c476:	e781      	b.n	800c37c <_strtod_l+0x174>
 800c478:	f04f 0c01 	mov.w	ip, #1
 800c47c:	1cb3      	adds	r3, r6, #2
 800c47e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c480:	78b3      	ldrb	r3, [r6, #2]
 800c482:	e78a      	b.n	800c39a <_strtod_l+0x192>
 800c484:	f04f 0c00 	mov.w	ip, #0
 800c488:	e7f8      	b.n	800c47c <_strtod_l+0x274>
 800c48a:	bf00      	nop
 800c48c:	080100d0 	.word	0x080100d0
 800c490:	7ff00000 	.word	0x7ff00000
 800c494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c496:	1c5f      	adds	r7, r3, #1
 800c498:	971b      	str	r7, [sp, #108]	; 0x6c
 800c49a:	785b      	ldrb	r3, [r3, #1]
 800c49c:	2b30      	cmp	r3, #48	; 0x30
 800c49e:	d0f9      	beq.n	800c494 <_strtod_l+0x28c>
 800c4a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800c4a4:	2f08      	cmp	r7, #8
 800c4a6:	f63f af7d 	bhi.w	800c3a4 <_strtod_l+0x19c>
 800c4aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800c4ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4b0:	930a      	str	r3, [sp, #40]	; 0x28
 800c4b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c4b4:	1c5f      	adds	r7, r3, #1
 800c4b6:	971b      	str	r7, [sp, #108]	; 0x6c
 800c4b8:	785b      	ldrb	r3, [r3, #1]
 800c4ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800c4be:	f1b8 0f09 	cmp.w	r8, #9
 800c4c2:	d937      	bls.n	800c534 <_strtod_l+0x32c>
 800c4c4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c4c6:	1a7f      	subs	r7, r7, r1
 800c4c8:	2f08      	cmp	r7, #8
 800c4ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800c4ce:	dc37      	bgt.n	800c540 <_strtod_l+0x338>
 800c4d0:	45be      	cmp	lr, r7
 800c4d2:	bfa8      	it	ge
 800c4d4:	46be      	movge	lr, r7
 800c4d6:	f1bc 0f00 	cmp.w	ip, #0
 800c4da:	d001      	beq.n	800c4e0 <_strtod_l+0x2d8>
 800c4dc:	f1ce 0e00 	rsb	lr, lr, #0
 800c4e0:	2c00      	cmp	r4, #0
 800c4e2:	d151      	bne.n	800c588 <_strtod_l+0x380>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	f47f aece 	bne.w	800c286 <_strtod_l+0x7e>
 800c4ea:	9a06      	ldr	r2, [sp, #24]
 800c4ec:	2a00      	cmp	r2, #0
 800c4ee:	f47f aeca 	bne.w	800c286 <_strtod_l+0x7e>
 800c4f2:	9a04      	ldr	r2, [sp, #16]
 800c4f4:	2a00      	cmp	r2, #0
 800c4f6:	f47f aee4 	bne.w	800c2c2 <_strtod_l+0xba>
 800c4fa:	2b4e      	cmp	r3, #78	; 0x4e
 800c4fc:	d027      	beq.n	800c54e <_strtod_l+0x346>
 800c4fe:	dc21      	bgt.n	800c544 <_strtod_l+0x33c>
 800c500:	2b49      	cmp	r3, #73	; 0x49
 800c502:	f47f aede 	bne.w	800c2c2 <_strtod_l+0xba>
 800c506:	49a0      	ldr	r1, [pc, #640]	; (800c788 <_strtod_l+0x580>)
 800c508:	a81b      	add	r0, sp, #108	; 0x6c
 800c50a:	f002 f819 	bl	800e540 <__match>
 800c50e:	2800      	cmp	r0, #0
 800c510:	f43f aed7 	beq.w	800c2c2 <_strtod_l+0xba>
 800c514:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c516:	499d      	ldr	r1, [pc, #628]	; (800c78c <_strtod_l+0x584>)
 800c518:	3b01      	subs	r3, #1
 800c51a:	a81b      	add	r0, sp, #108	; 0x6c
 800c51c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c51e:	f002 f80f 	bl	800e540 <__match>
 800c522:	b910      	cbnz	r0, 800c52a <_strtod_l+0x322>
 800c524:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c526:	3301      	adds	r3, #1
 800c528:	931b      	str	r3, [sp, #108]	; 0x6c
 800c52a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800c7a0 <_strtod_l+0x598>
 800c52e:	f04f 0a00 	mov.w	sl, #0
 800c532:	e6a8      	b.n	800c286 <_strtod_l+0x7e>
 800c534:	210a      	movs	r1, #10
 800c536:	fb01 3e0e 	mla	lr, r1, lr, r3
 800c53a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c53e:	e7b8      	b.n	800c4b2 <_strtod_l+0x2aa>
 800c540:	46be      	mov	lr, r7
 800c542:	e7c8      	b.n	800c4d6 <_strtod_l+0x2ce>
 800c544:	2b69      	cmp	r3, #105	; 0x69
 800c546:	d0de      	beq.n	800c506 <_strtod_l+0x2fe>
 800c548:	2b6e      	cmp	r3, #110	; 0x6e
 800c54a:	f47f aeba 	bne.w	800c2c2 <_strtod_l+0xba>
 800c54e:	4990      	ldr	r1, [pc, #576]	; (800c790 <_strtod_l+0x588>)
 800c550:	a81b      	add	r0, sp, #108	; 0x6c
 800c552:	f001 fff5 	bl	800e540 <__match>
 800c556:	2800      	cmp	r0, #0
 800c558:	f43f aeb3 	beq.w	800c2c2 <_strtod_l+0xba>
 800c55c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c55e:	781b      	ldrb	r3, [r3, #0]
 800c560:	2b28      	cmp	r3, #40	; 0x28
 800c562:	d10e      	bne.n	800c582 <_strtod_l+0x37a>
 800c564:	aa1e      	add	r2, sp, #120	; 0x78
 800c566:	498b      	ldr	r1, [pc, #556]	; (800c794 <_strtod_l+0x58c>)
 800c568:	a81b      	add	r0, sp, #108	; 0x6c
 800c56a:	f001 fffd 	bl	800e568 <__hexnan>
 800c56e:	2805      	cmp	r0, #5
 800c570:	d107      	bne.n	800c582 <_strtod_l+0x37a>
 800c572:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c574:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800c578:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c57c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c580:	e681      	b.n	800c286 <_strtod_l+0x7e>
 800c582:	f8df b224 	ldr.w	fp, [pc, #548]	; 800c7a8 <_strtod_l+0x5a0>
 800c586:	e7d2      	b.n	800c52e <_strtod_l+0x326>
 800c588:	ebae 0302 	sub.w	r3, lr, r2
 800c58c:	9306      	str	r3, [sp, #24]
 800c58e:	9b05      	ldr	r3, [sp, #20]
 800c590:	9807      	ldr	r0, [sp, #28]
 800c592:	2b00      	cmp	r3, #0
 800c594:	bf08      	it	eq
 800c596:	4623      	moveq	r3, r4
 800c598:	2c10      	cmp	r4, #16
 800c59a:	9305      	str	r3, [sp, #20]
 800c59c:	46a0      	mov	r8, r4
 800c59e:	bfa8      	it	ge
 800c5a0:	f04f 0810 	movge.w	r8, #16
 800c5a4:	f7f3 ffce 	bl	8000544 <__aeabi_ui2d>
 800c5a8:	2c09      	cmp	r4, #9
 800c5aa:	4682      	mov	sl, r0
 800c5ac:	468b      	mov	fp, r1
 800c5ae:	dc13      	bgt.n	800c5d8 <_strtod_l+0x3d0>
 800c5b0:	9b06      	ldr	r3, [sp, #24]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f43f ae67 	beq.w	800c286 <_strtod_l+0x7e>
 800c5b8:	9b06      	ldr	r3, [sp, #24]
 800c5ba:	dd7a      	ble.n	800c6b2 <_strtod_l+0x4aa>
 800c5bc:	2b16      	cmp	r3, #22
 800c5be:	dc61      	bgt.n	800c684 <_strtod_l+0x47c>
 800c5c0:	4a75      	ldr	r2, [pc, #468]	; (800c798 <_strtod_l+0x590>)
 800c5c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800c5c6:	e9de 0100 	ldrd	r0, r1, [lr]
 800c5ca:	4652      	mov	r2, sl
 800c5cc:	465b      	mov	r3, fp
 800c5ce:	f7f4 f833 	bl	8000638 <__aeabi_dmul>
 800c5d2:	4682      	mov	sl, r0
 800c5d4:	468b      	mov	fp, r1
 800c5d6:	e656      	b.n	800c286 <_strtod_l+0x7e>
 800c5d8:	4b6f      	ldr	r3, [pc, #444]	; (800c798 <_strtod_l+0x590>)
 800c5da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c5de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c5e2:	f7f4 f829 	bl	8000638 <__aeabi_dmul>
 800c5e6:	4606      	mov	r6, r0
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	460f      	mov	r7, r1
 800c5ec:	f7f3 ffaa 	bl	8000544 <__aeabi_ui2d>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	4630      	mov	r0, r6
 800c5f6:	4639      	mov	r1, r7
 800c5f8:	f7f3 fe68 	bl	80002cc <__adddf3>
 800c5fc:	2c0f      	cmp	r4, #15
 800c5fe:	4682      	mov	sl, r0
 800c600:	468b      	mov	fp, r1
 800c602:	ddd5      	ble.n	800c5b0 <_strtod_l+0x3a8>
 800c604:	9b06      	ldr	r3, [sp, #24]
 800c606:	eba4 0808 	sub.w	r8, r4, r8
 800c60a:	4498      	add	r8, r3
 800c60c:	f1b8 0f00 	cmp.w	r8, #0
 800c610:	f340 8096 	ble.w	800c740 <_strtod_l+0x538>
 800c614:	f018 030f 	ands.w	r3, r8, #15
 800c618:	d00a      	beq.n	800c630 <_strtod_l+0x428>
 800c61a:	495f      	ldr	r1, [pc, #380]	; (800c798 <_strtod_l+0x590>)
 800c61c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c620:	4652      	mov	r2, sl
 800c622:	465b      	mov	r3, fp
 800c624:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c628:	f7f4 f806 	bl	8000638 <__aeabi_dmul>
 800c62c:	4682      	mov	sl, r0
 800c62e:	468b      	mov	fp, r1
 800c630:	f038 080f 	bics.w	r8, r8, #15
 800c634:	d073      	beq.n	800c71e <_strtod_l+0x516>
 800c636:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c63a:	dd47      	ble.n	800c6cc <_strtod_l+0x4c4>
 800c63c:	2400      	movs	r4, #0
 800c63e:	46a0      	mov	r8, r4
 800c640:	9407      	str	r4, [sp, #28]
 800c642:	9405      	str	r4, [sp, #20]
 800c644:	2322      	movs	r3, #34	; 0x22
 800c646:	f8df b158 	ldr.w	fp, [pc, #344]	; 800c7a0 <_strtod_l+0x598>
 800c64a:	f8c9 3000 	str.w	r3, [r9]
 800c64e:	f04f 0a00 	mov.w	sl, #0
 800c652:	9b07      	ldr	r3, [sp, #28]
 800c654:	2b00      	cmp	r3, #0
 800c656:	f43f ae16 	beq.w	800c286 <_strtod_l+0x7e>
 800c65a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c65c:	4648      	mov	r0, r9
 800c65e:	f002 f8d9 	bl	800e814 <_Bfree>
 800c662:	9905      	ldr	r1, [sp, #20]
 800c664:	4648      	mov	r0, r9
 800c666:	f002 f8d5 	bl	800e814 <_Bfree>
 800c66a:	4641      	mov	r1, r8
 800c66c:	4648      	mov	r0, r9
 800c66e:	f002 f8d1 	bl	800e814 <_Bfree>
 800c672:	9907      	ldr	r1, [sp, #28]
 800c674:	4648      	mov	r0, r9
 800c676:	f002 f8cd 	bl	800e814 <_Bfree>
 800c67a:	4621      	mov	r1, r4
 800c67c:	4648      	mov	r0, r9
 800c67e:	f002 f8c9 	bl	800e814 <_Bfree>
 800c682:	e600      	b.n	800c286 <_strtod_l+0x7e>
 800c684:	9a06      	ldr	r2, [sp, #24]
 800c686:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800c68a:	4293      	cmp	r3, r2
 800c68c:	dbba      	blt.n	800c604 <_strtod_l+0x3fc>
 800c68e:	4d42      	ldr	r5, [pc, #264]	; (800c798 <_strtod_l+0x590>)
 800c690:	f1c4 040f 	rsb	r4, r4, #15
 800c694:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800c698:	4652      	mov	r2, sl
 800c69a:	465b      	mov	r3, fp
 800c69c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c6a0:	f7f3 ffca 	bl	8000638 <__aeabi_dmul>
 800c6a4:	9b06      	ldr	r3, [sp, #24]
 800c6a6:	1b1c      	subs	r4, r3, r4
 800c6a8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800c6ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c6b0:	e78d      	b.n	800c5ce <_strtod_l+0x3c6>
 800c6b2:	f113 0f16 	cmn.w	r3, #22
 800c6b6:	dba5      	blt.n	800c604 <_strtod_l+0x3fc>
 800c6b8:	4a37      	ldr	r2, [pc, #220]	; (800c798 <_strtod_l+0x590>)
 800c6ba:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800c6be:	e9d2 2300 	ldrd	r2, r3, [r2]
 800c6c2:	4650      	mov	r0, sl
 800c6c4:	4659      	mov	r1, fp
 800c6c6:	f7f4 f8e1 	bl	800088c <__aeabi_ddiv>
 800c6ca:	e782      	b.n	800c5d2 <_strtod_l+0x3ca>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	4e33      	ldr	r6, [pc, #204]	; (800c79c <_strtod_l+0x594>)
 800c6d0:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c6d4:	4650      	mov	r0, sl
 800c6d6:	4659      	mov	r1, fp
 800c6d8:	461d      	mov	r5, r3
 800c6da:	f1b8 0f01 	cmp.w	r8, #1
 800c6de:	dc21      	bgt.n	800c724 <_strtod_l+0x51c>
 800c6e0:	b10b      	cbz	r3, 800c6e6 <_strtod_l+0x4de>
 800c6e2:	4682      	mov	sl, r0
 800c6e4:	468b      	mov	fp, r1
 800c6e6:	4b2d      	ldr	r3, [pc, #180]	; (800c79c <_strtod_l+0x594>)
 800c6e8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c6ec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c6f0:	4652      	mov	r2, sl
 800c6f2:	465b      	mov	r3, fp
 800c6f4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800c6f8:	f7f3 ff9e 	bl	8000638 <__aeabi_dmul>
 800c6fc:	4b28      	ldr	r3, [pc, #160]	; (800c7a0 <_strtod_l+0x598>)
 800c6fe:	460a      	mov	r2, r1
 800c700:	400b      	ands	r3, r1
 800c702:	4928      	ldr	r1, [pc, #160]	; (800c7a4 <_strtod_l+0x59c>)
 800c704:	428b      	cmp	r3, r1
 800c706:	4682      	mov	sl, r0
 800c708:	d898      	bhi.n	800c63c <_strtod_l+0x434>
 800c70a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c70e:	428b      	cmp	r3, r1
 800c710:	bf86      	itte	hi
 800c712:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800c7ac <_strtod_l+0x5a4>
 800c716:	f04f 3aff 	movhi.w	sl, #4294967295
 800c71a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c71e:	2300      	movs	r3, #0
 800c720:	9304      	str	r3, [sp, #16]
 800c722:	e077      	b.n	800c814 <_strtod_l+0x60c>
 800c724:	f018 0f01 	tst.w	r8, #1
 800c728:	d006      	beq.n	800c738 <_strtod_l+0x530>
 800c72a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800c72e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c732:	f7f3 ff81 	bl	8000638 <__aeabi_dmul>
 800c736:	2301      	movs	r3, #1
 800c738:	3501      	adds	r5, #1
 800c73a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c73e:	e7cc      	b.n	800c6da <_strtod_l+0x4d2>
 800c740:	d0ed      	beq.n	800c71e <_strtod_l+0x516>
 800c742:	f1c8 0800 	rsb	r8, r8, #0
 800c746:	f018 020f 	ands.w	r2, r8, #15
 800c74a:	d00a      	beq.n	800c762 <_strtod_l+0x55a>
 800c74c:	4b12      	ldr	r3, [pc, #72]	; (800c798 <_strtod_l+0x590>)
 800c74e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c752:	4650      	mov	r0, sl
 800c754:	4659      	mov	r1, fp
 800c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75a:	f7f4 f897 	bl	800088c <__aeabi_ddiv>
 800c75e:	4682      	mov	sl, r0
 800c760:	468b      	mov	fp, r1
 800c762:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c766:	d0da      	beq.n	800c71e <_strtod_l+0x516>
 800c768:	f1b8 0f1f 	cmp.w	r8, #31
 800c76c:	dd20      	ble.n	800c7b0 <_strtod_l+0x5a8>
 800c76e:	2400      	movs	r4, #0
 800c770:	46a0      	mov	r8, r4
 800c772:	9407      	str	r4, [sp, #28]
 800c774:	9405      	str	r4, [sp, #20]
 800c776:	2322      	movs	r3, #34	; 0x22
 800c778:	f04f 0a00 	mov.w	sl, #0
 800c77c:	f04f 0b00 	mov.w	fp, #0
 800c780:	f8c9 3000 	str.w	r3, [r9]
 800c784:	e765      	b.n	800c652 <_strtod_l+0x44a>
 800c786:	bf00      	nop
 800c788:	080100a1 	.word	0x080100a1
 800c78c:	08010123 	.word	0x08010123
 800c790:	080100a9 	.word	0x080100a9
 800c794:	080100e4 	.word	0x080100e4
 800c798:	080101c8 	.word	0x080101c8
 800c79c:	080101a0 	.word	0x080101a0
 800c7a0:	7ff00000 	.word	0x7ff00000
 800c7a4:	7ca00000 	.word	0x7ca00000
 800c7a8:	fff80000 	.word	0xfff80000
 800c7ac:	7fefffff 	.word	0x7fefffff
 800c7b0:	f018 0310 	ands.w	r3, r8, #16
 800c7b4:	bf18      	it	ne
 800c7b6:	236a      	movne	r3, #106	; 0x6a
 800c7b8:	4da0      	ldr	r5, [pc, #640]	; (800ca3c <_strtod_l+0x834>)
 800c7ba:	9304      	str	r3, [sp, #16]
 800c7bc:	4650      	mov	r0, sl
 800c7be:	4659      	mov	r1, fp
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	f1b8 0f00 	cmp.w	r8, #0
 800c7c6:	f300 810a 	bgt.w	800c9de <_strtod_l+0x7d6>
 800c7ca:	b10b      	cbz	r3, 800c7d0 <_strtod_l+0x5c8>
 800c7cc:	4682      	mov	sl, r0
 800c7ce:	468b      	mov	fp, r1
 800c7d0:	9b04      	ldr	r3, [sp, #16]
 800c7d2:	b1bb      	cbz	r3, 800c804 <_strtod_l+0x5fc>
 800c7d4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800c7d8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	4659      	mov	r1, fp
 800c7e0:	dd10      	ble.n	800c804 <_strtod_l+0x5fc>
 800c7e2:	2b1f      	cmp	r3, #31
 800c7e4:	f340 8107 	ble.w	800c9f6 <_strtod_l+0x7ee>
 800c7e8:	2b34      	cmp	r3, #52	; 0x34
 800c7ea:	bfde      	ittt	le
 800c7ec:	3b20      	suble	r3, #32
 800c7ee:	f04f 32ff 	movle.w	r2, #4294967295
 800c7f2:	fa02 f303 	lslle.w	r3, r2, r3
 800c7f6:	f04f 0a00 	mov.w	sl, #0
 800c7fa:	bfcc      	ite	gt
 800c7fc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c800:	ea03 0b01 	andle.w	fp, r3, r1
 800c804:	2200      	movs	r2, #0
 800c806:	2300      	movs	r3, #0
 800c808:	4650      	mov	r0, sl
 800c80a:	4659      	mov	r1, fp
 800c80c:	f7f4 f97c 	bl	8000b08 <__aeabi_dcmpeq>
 800c810:	2800      	cmp	r0, #0
 800c812:	d1ac      	bne.n	800c76e <_strtod_l+0x566>
 800c814:	9b07      	ldr	r3, [sp, #28]
 800c816:	9300      	str	r3, [sp, #0]
 800c818:	9a05      	ldr	r2, [sp, #20]
 800c81a:	9908      	ldr	r1, [sp, #32]
 800c81c:	4623      	mov	r3, r4
 800c81e:	4648      	mov	r0, r9
 800c820:	f002 f84a 	bl	800e8b8 <__s2b>
 800c824:	9007      	str	r0, [sp, #28]
 800c826:	2800      	cmp	r0, #0
 800c828:	f43f af08 	beq.w	800c63c <_strtod_l+0x434>
 800c82c:	9a06      	ldr	r2, [sp, #24]
 800c82e:	9b06      	ldr	r3, [sp, #24]
 800c830:	2a00      	cmp	r2, #0
 800c832:	f1c3 0300 	rsb	r3, r3, #0
 800c836:	bfa8      	it	ge
 800c838:	2300      	movge	r3, #0
 800c83a:	930e      	str	r3, [sp, #56]	; 0x38
 800c83c:	2400      	movs	r4, #0
 800c83e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c842:	9316      	str	r3, [sp, #88]	; 0x58
 800c844:	46a0      	mov	r8, r4
 800c846:	9b07      	ldr	r3, [sp, #28]
 800c848:	4648      	mov	r0, r9
 800c84a:	6859      	ldr	r1, [r3, #4]
 800c84c:	f001 ffae 	bl	800e7ac <_Balloc>
 800c850:	9005      	str	r0, [sp, #20]
 800c852:	2800      	cmp	r0, #0
 800c854:	f43f aef6 	beq.w	800c644 <_strtod_l+0x43c>
 800c858:	9b07      	ldr	r3, [sp, #28]
 800c85a:	691a      	ldr	r2, [r3, #16]
 800c85c:	3202      	adds	r2, #2
 800c85e:	f103 010c 	add.w	r1, r3, #12
 800c862:	0092      	lsls	r2, r2, #2
 800c864:	300c      	adds	r0, #12
 800c866:	f7fe ffc7 	bl	800b7f8 <memcpy>
 800c86a:	aa1e      	add	r2, sp, #120	; 0x78
 800c86c:	a91d      	add	r1, sp, #116	; 0x74
 800c86e:	ec4b ab10 	vmov	d0, sl, fp
 800c872:	4648      	mov	r0, r9
 800c874:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800c878:	f002 fada 	bl	800ee30 <__d2b>
 800c87c:	901c      	str	r0, [sp, #112]	; 0x70
 800c87e:	2800      	cmp	r0, #0
 800c880:	f43f aee0 	beq.w	800c644 <_strtod_l+0x43c>
 800c884:	2101      	movs	r1, #1
 800c886:	4648      	mov	r0, r9
 800c888:	f002 f8a2 	bl	800e9d0 <__i2b>
 800c88c:	4680      	mov	r8, r0
 800c88e:	2800      	cmp	r0, #0
 800c890:	f43f aed8 	beq.w	800c644 <_strtod_l+0x43c>
 800c894:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c896:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c898:	2e00      	cmp	r6, #0
 800c89a:	bfab      	itete	ge
 800c89c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800c89e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800c8a0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800c8a2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800c8a4:	bfac      	ite	ge
 800c8a6:	18f7      	addge	r7, r6, r3
 800c8a8:	1b9d      	sublt	r5, r3, r6
 800c8aa:	9b04      	ldr	r3, [sp, #16]
 800c8ac:	1af6      	subs	r6, r6, r3
 800c8ae:	4416      	add	r6, r2
 800c8b0:	4b63      	ldr	r3, [pc, #396]	; (800ca40 <_strtod_l+0x838>)
 800c8b2:	3e01      	subs	r6, #1
 800c8b4:	429e      	cmp	r6, r3
 800c8b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c8ba:	f280 80af 	bge.w	800ca1c <_strtod_l+0x814>
 800c8be:	1b9b      	subs	r3, r3, r6
 800c8c0:	2b1f      	cmp	r3, #31
 800c8c2:	eba2 0203 	sub.w	r2, r2, r3
 800c8c6:	f04f 0101 	mov.w	r1, #1
 800c8ca:	f300 809b 	bgt.w	800ca04 <_strtod_l+0x7fc>
 800c8ce:	fa01 f303 	lsl.w	r3, r1, r3
 800c8d2:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8d8:	18be      	adds	r6, r7, r2
 800c8da:	9b04      	ldr	r3, [sp, #16]
 800c8dc:	42b7      	cmp	r7, r6
 800c8de:	4415      	add	r5, r2
 800c8e0:	441d      	add	r5, r3
 800c8e2:	463b      	mov	r3, r7
 800c8e4:	bfa8      	it	ge
 800c8e6:	4633      	movge	r3, r6
 800c8e8:	42ab      	cmp	r3, r5
 800c8ea:	bfa8      	it	ge
 800c8ec:	462b      	movge	r3, r5
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	bfc2      	ittt	gt
 800c8f2:	1af6      	subgt	r6, r6, r3
 800c8f4:	1aed      	subgt	r5, r5, r3
 800c8f6:	1aff      	subgt	r7, r7, r3
 800c8f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8fa:	b1bb      	cbz	r3, 800c92c <_strtod_l+0x724>
 800c8fc:	4641      	mov	r1, r8
 800c8fe:	461a      	mov	r2, r3
 800c900:	4648      	mov	r0, r9
 800c902:	f002 f905 	bl	800eb10 <__pow5mult>
 800c906:	4680      	mov	r8, r0
 800c908:	2800      	cmp	r0, #0
 800c90a:	f43f ae9b 	beq.w	800c644 <_strtod_l+0x43c>
 800c90e:	4601      	mov	r1, r0
 800c910:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c912:	4648      	mov	r0, r9
 800c914:	f002 f865 	bl	800e9e2 <__multiply>
 800c918:	900c      	str	r0, [sp, #48]	; 0x30
 800c91a:	2800      	cmp	r0, #0
 800c91c:	f43f ae92 	beq.w	800c644 <_strtod_l+0x43c>
 800c920:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c922:	4648      	mov	r0, r9
 800c924:	f001 ff76 	bl	800e814 <_Bfree>
 800c928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c92a:	931c      	str	r3, [sp, #112]	; 0x70
 800c92c:	2e00      	cmp	r6, #0
 800c92e:	dc7a      	bgt.n	800ca26 <_strtod_l+0x81e>
 800c930:	9b06      	ldr	r3, [sp, #24]
 800c932:	2b00      	cmp	r3, #0
 800c934:	dd08      	ble.n	800c948 <_strtod_l+0x740>
 800c936:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c938:	9905      	ldr	r1, [sp, #20]
 800c93a:	4648      	mov	r0, r9
 800c93c:	f002 f8e8 	bl	800eb10 <__pow5mult>
 800c940:	9005      	str	r0, [sp, #20]
 800c942:	2800      	cmp	r0, #0
 800c944:	f43f ae7e 	beq.w	800c644 <_strtod_l+0x43c>
 800c948:	2d00      	cmp	r5, #0
 800c94a:	dd08      	ble.n	800c95e <_strtod_l+0x756>
 800c94c:	462a      	mov	r2, r5
 800c94e:	9905      	ldr	r1, [sp, #20]
 800c950:	4648      	mov	r0, r9
 800c952:	f002 f92b 	bl	800ebac <__lshift>
 800c956:	9005      	str	r0, [sp, #20]
 800c958:	2800      	cmp	r0, #0
 800c95a:	f43f ae73 	beq.w	800c644 <_strtod_l+0x43c>
 800c95e:	2f00      	cmp	r7, #0
 800c960:	dd08      	ble.n	800c974 <_strtod_l+0x76c>
 800c962:	4641      	mov	r1, r8
 800c964:	463a      	mov	r2, r7
 800c966:	4648      	mov	r0, r9
 800c968:	f002 f920 	bl	800ebac <__lshift>
 800c96c:	4680      	mov	r8, r0
 800c96e:	2800      	cmp	r0, #0
 800c970:	f43f ae68 	beq.w	800c644 <_strtod_l+0x43c>
 800c974:	9a05      	ldr	r2, [sp, #20]
 800c976:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c978:	4648      	mov	r0, r9
 800c97a:	f002 f985 	bl	800ec88 <__mdiff>
 800c97e:	4604      	mov	r4, r0
 800c980:	2800      	cmp	r0, #0
 800c982:	f43f ae5f 	beq.w	800c644 <_strtod_l+0x43c>
 800c986:	68c3      	ldr	r3, [r0, #12]
 800c988:	930c      	str	r3, [sp, #48]	; 0x30
 800c98a:	2300      	movs	r3, #0
 800c98c:	60c3      	str	r3, [r0, #12]
 800c98e:	4641      	mov	r1, r8
 800c990:	f002 f960 	bl	800ec54 <__mcmp>
 800c994:	2800      	cmp	r0, #0
 800c996:	da55      	bge.n	800ca44 <_strtod_l+0x83c>
 800c998:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c99a:	b9e3      	cbnz	r3, 800c9d6 <_strtod_l+0x7ce>
 800c99c:	f1ba 0f00 	cmp.w	sl, #0
 800c9a0:	d119      	bne.n	800c9d6 <_strtod_l+0x7ce>
 800c9a2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c9a6:	b9b3      	cbnz	r3, 800c9d6 <_strtod_l+0x7ce>
 800c9a8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c9ac:	0d1b      	lsrs	r3, r3, #20
 800c9ae:	051b      	lsls	r3, r3, #20
 800c9b0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c9b4:	d90f      	bls.n	800c9d6 <_strtod_l+0x7ce>
 800c9b6:	6963      	ldr	r3, [r4, #20]
 800c9b8:	b913      	cbnz	r3, 800c9c0 <_strtod_l+0x7b8>
 800c9ba:	6923      	ldr	r3, [r4, #16]
 800c9bc:	2b01      	cmp	r3, #1
 800c9be:	dd0a      	ble.n	800c9d6 <_strtod_l+0x7ce>
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	4648      	mov	r0, r9
 800c9c6:	f002 f8f1 	bl	800ebac <__lshift>
 800c9ca:	4641      	mov	r1, r8
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	f002 f941 	bl	800ec54 <__mcmp>
 800c9d2:	2800      	cmp	r0, #0
 800c9d4:	dc67      	bgt.n	800caa6 <_strtod_l+0x89e>
 800c9d6:	9b04      	ldr	r3, [sp, #16]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d171      	bne.n	800cac0 <_strtod_l+0x8b8>
 800c9dc:	e63d      	b.n	800c65a <_strtod_l+0x452>
 800c9de:	f018 0f01 	tst.w	r8, #1
 800c9e2:	d004      	beq.n	800c9ee <_strtod_l+0x7e6>
 800c9e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c9e8:	f7f3 fe26 	bl	8000638 <__aeabi_dmul>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c9f2:	3508      	adds	r5, #8
 800c9f4:	e6e5      	b.n	800c7c2 <_strtod_l+0x5ba>
 800c9f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800c9fe:	ea03 0a0a 	and.w	sl, r3, sl
 800ca02:	e6ff      	b.n	800c804 <_strtod_l+0x5fc>
 800ca04:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ca08:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ca0c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ca10:	36e2      	adds	r6, #226	; 0xe2
 800ca12:	fa01 f306 	lsl.w	r3, r1, r6
 800ca16:	930a      	str	r3, [sp, #40]	; 0x28
 800ca18:	910f      	str	r1, [sp, #60]	; 0x3c
 800ca1a:	e75d      	b.n	800c8d8 <_strtod_l+0x6d0>
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	930a      	str	r3, [sp, #40]	; 0x28
 800ca20:	2301      	movs	r3, #1
 800ca22:	930f      	str	r3, [sp, #60]	; 0x3c
 800ca24:	e758      	b.n	800c8d8 <_strtod_l+0x6d0>
 800ca26:	4632      	mov	r2, r6
 800ca28:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ca2a:	4648      	mov	r0, r9
 800ca2c:	f002 f8be 	bl	800ebac <__lshift>
 800ca30:	901c      	str	r0, [sp, #112]	; 0x70
 800ca32:	2800      	cmp	r0, #0
 800ca34:	f47f af7c 	bne.w	800c930 <_strtod_l+0x728>
 800ca38:	e604      	b.n	800c644 <_strtod_l+0x43c>
 800ca3a:	bf00      	nop
 800ca3c:	080100f8 	.word	0x080100f8
 800ca40:	fffffc02 	.word	0xfffffc02
 800ca44:	465d      	mov	r5, fp
 800ca46:	f040 8086 	bne.w	800cb56 <_strtod_l+0x94e>
 800ca4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca50:	b32a      	cbz	r2, 800ca9e <_strtod_l+0x896>
 800ca52:	4aaf      	ldr	r2, [pc, #700]	; (800cd10 <_strtod_l+0xb08>)
 800ca54:	4293      	cmp	r3, r2
 800ca56:	d153      	bne.n	800cb00 <_strtod_l+0x8f8>
 800ca58:	9b04      	ldr	r3, [sp, #16]
 800ca5a:	4650      	mov	r0, sl
 800ca5c:	b1d3      	cbz	r3, 800ca94 <_strtod_l+0x88c>
 800ca5e:	4aad      	ldr	r2, [pc, #692]	; (800cd14 <_strtod_l+0xb0c>)
 800ca60:	402a      	ands	r2, r5
 800ca62:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ca66:	f04f 31ff 	mov.w	r1, #4294967295
 800ca6a:	d816      	bhi.n	800ca9a <_strtod_l+0x892>
 800ca6c:	0d12      	lsrs	r2, r2, #20
 800ca6e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ca72:	fa01 f303 	lsl.w	r3, r1, r3
 800ca76:	4298      	cmp	r0, r3
 800ca78:	d142      	bne.n	800cb00 <_strtod_l+0x8f8>
 800ca7a:	4ba7      	ldr	r3, [pc, #668]	; (800cd18 <_strtod_l+0xb10>)
 800ca7c:	429d      	cmp	r5, r3
 800ca7e:	d102      	bne.n	800ca86 <_strtod_l+0x87e>
 800ca80:	3001      	adds	r0, #1
 800ca82:	f43f addf 	beq.w	800c644 <_strtod_l+0x43c>
 800ca86:	4ba3      	ldr	r3, [pc, #652]	; (800cd14 <_strtod_l+0xb0c>)
 800ca88:	402b      	ands	r3, r5
 800ca8a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ca8e:	f04f 0a00 	mov.w	sl, #0
 800ca92:	e7a0      	b.n	800c9d6 <_strtod_l+0x7ce>
 800ca94:	f04f 33ff 	mov.w	r3, #4294967295
 800ca98:	e7ed      	b.n	800ca76 <_strtod_l+0x86e>
 800ca9a:	460b      	mov	r3, r1
 800ca9c:	e7eb      	b.n	800ca76 <_strtod_l+0x86e>
 800ca9e:	bb7b      	cbnz	r3, 800cb00 <_strtod_l+0x8f8>
 800caa0:	f1ba 0f00 	cmp.w	sl, #0
 800caa4:	d12c      	bne.n	800cb00 <_strtod_l+0x8f8>
 800caa6:	9904      	ldr	r1, [sp, #16]
 800caa8:	4a9a      	ldr	r2, [pc, #616]	; (800cd14 <_strtod_l+0xb0c>)
 800caaa:	465b      	mov	r3, fp
 800caac:	b1f1      	cbz	r1, 800caec <_strtod_l+0x8e4>
 800caae:	ea02 010b 	and.w	r1, r2, fp
 800cab2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cab6:	dc19      	bgt.n	800caec <_strtod_l+0x8e4>
 800cab8:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cabc:	f77f ae5b 	ble.w	800c776 <_strtod_l+0x56e>
 800cac0:	4a96      	ldr	r2, [pc, #600]	; (800cd1c <_strtod_l+0xb14>)
 800cac2:	2300      	movs	r3, #0
 800cac4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800cac8:	4650      	mov	r0, sl
 800caca:	4659      	mov	r1, fp
 800cacc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cad0:	f7f3 fdb2 	bl	8000638 <__aeabi_dmul>
 800cad4:	4682      	mov	sl, r0
 800cad6:	468b      	mov	fp, r1
 800cad8:	2900      	cmp	r1, #0
 800cada:	f47f adbe 	bne.w	800c65a <_strtod_l+0x452>
 800cade:	2800      	cmp	r0, #0
 800cae0:	f47f adbb 	bne.w	800c65a <_strtod_l+0x452>
 800cae4:	2322      	movs	r3, #34	; 0x22
 800cae6:	f8c9 3000 	str.w	r3, [r9]
 800caea:	e5b6      	b.n	800c65a <_strtod_l+0x452>
 800caec:	4013      	ands	r3, r2
 800caee:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800caf2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800caf6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800cafa:	f04f 3aff 	mov.w	sl, #4294967295
 800cafe:	e76a      	b.n	800c9d6 <_strtod_l+0x7ce>
 800cb00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb02:	b193      	cbz	r3, 800cb2a <_strtod_l+0x922>
 800cb04:	422b      	tst	r3, r5
 800cb06:	f43f af66 	beq.w	800c9d6 <_strtod_l+0x7ce>
 800cb0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb0c:	9a04      	ldr	r2, [sp, #16]
 800cb0e:	4650      	mov	r0, sl
 800cb10:	4659      	mov	r1, fp
 800cb12:	b173      	cbz	r3, 800cb32 <_strtod_l+0x92a>
 800cb14:	f7ff fb5c 	bl	800c1d0 <sulp>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	460b      	mov	r3, r1
 800cb1c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb20:	f7f3 fbd4 	bl	80002cc <__adddf3>
 800cb24:	4682      	mov	sl, r0
 800cb26:	468b      	mov	fp, r1
 800cb28:	e755      	b.n	800c9d6 <_strtod_l+0x7ce>
 800cb2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cb2c:	ea13 0f0a 	tst.w	r3, sl
 800cb30:	e7e9      	b.n	800cb06 <_strtod_l+0x8fe>
 800cb32:	f7ff fb4d 	bl	800c1d0 <sulp>
 800cb36:	4602      	mov	r2, r0
 800cb38:	460b      	mov	r3, r1
 800cb3a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cb3e:	f7f3 fbc3 	bl	80002c8 <__aeabi_dsub>
 800cb42:	2200      	movs	r2, #0
 800cb44:	2300      	movs	r3, #0
 800cb46:	4682      	mov	sl, r0
 800cb48:	468b      	mov	fp, r1
 800cb4a:	f7f3 ffdd 	bl	8000b08 <__aeabi_dcmpeq>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	f47f ae11 	bne.w	800c776 <_strtod_l+0x56e>
 800cb54:	e73f      	b.n	800c9d6 <_strtod_l+0x7ce>
 800cb56:	4641      	mov	r1, r8
 800cb58:	4620      	mov	r0, r4
 800cb5a:	f002 f9b8 	bl	800eece <__ratio>
 800cb5e:	ec57 6b10 	vmov	r6, r7, d0
 800cb62:	2200      	movs	r2, #0
 800cb64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb68:	ee10 0a10 	vmov	r0, s0
 800cb6c:	4639      	mov	r1, r7
 800cb6e:	f7f3 ffdf 	bl	8000b30 <__aeabi_dcmple>
 800cb72:	2800      	cmp	r0, #0
 800cb74:	d077      	beq.n	800cc66 <_strtod_l+0xa5e>
 800cb76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d04a      	beq.n	800cc12 <_strtod_l+0xa0a>
 800cb7c:	4b68      	ldr	r3, [pc, #416]	; (800cd20 <_strtod_l+0xb18>)
 800cb7e:	2200      	movs	r2, #0
 800cb80:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cb84:	4f66      	ldr	r7, [pc, #408]	; (800cd20 <_strtod_l+0xb18>)
 800cb86:	2600      	movs	r6, #0
 800cb88:	4b62      	ldr	r3, [pc, #392]	; (800cd14 <_strtod_l+0xb0c>)
 800cb8a:	402b      	ands	r3, r5
 800cb8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cb8e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb90:	4b64      	ldr	r3, [pc, #400]	; (800cd24 <_strtod_l+0xb1c>)
 800cb92:	429a      	cmp	r2, r3
 800cb94:	f040 80ce 	bne.w	800cd34 <_strtod_l+0xb2c>
 800cb98:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cb9c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cba0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800cba4:	ec4b ab10 	vmov	d0, sl, fp
 800cba8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800cbac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800cbb0:	f002 f8c8 	bl	800ed44 <__ulp>
 800cbb4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cbb8:	ec53 2b10 	vmov	r2, r3, d0
 800cbbc:	f7f3 fd3c 	bl	8000638 <__aeabi_dmul>
 800cbc0:	4652      	mov	r2, sl
 800cbc2:	465b      	mov	r3, fp
 800cbc4:	f7f3 fb82 	bl	80002cc <__adddf3>
 800cbc8:	460b      	mov	r3, r1
 800cbca:	4952      	ldr	r1, [pc, #328]	; (800cd14 <_strtod_l+0xb0c>)
 800cbcc:	4a56      	ldr	r2, [pc, #344]	; (800cd28 <_strtod_l+0xb20>)
 800cbce:	4019      	ands	r1, r3
 800cbd0:	4291      	cmp	r1, r2
 800cbd2:	4682      	mov	sl, r0
 800cbd4:	d95b      	bls.n	800cc8e <_strtod_l+0xa86>
 800cbd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	d103      	bne.n	800cbe8 <_strtod_l+0x9e0>
 800cbe0:	9b08      	ldr	r3, [sp, #32]
 800cbe2:	3301      	adds	r3, #1
 800cbe4:	f43f ad2e 	beq.w	800c644 <_strtod_l+0x43c>
 800cbe8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800cd18 <_strtod_l+0xb10>
 800cbec:	f04f 3aff 	mov.w	sl, #4294967295
 800cbf0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cbf2:	4648      	mov	r0, r9
 800cbf4:	f001 fe0e 	bl	800e814 <_Bfree>
 800cbf8:	9905      	ldr	r1, [sp, #20]
 800cbfa:	4648      	mov	r0, r9
 800cbfc:	f001 fe0a 	bl	800e814 <_Bfree>
 800cc00:	4641      	mov	r1, r8
 800cc02:	4648      	mov	r0, r9
 800cc04:	f001 fe06 	bl	800e814 <_Bfree>
 800cc08:	4621      	mov	r1, r4
 800cc0a:	4648      	mov	r0, r9
 800cc0c:	f001 fe02 	bl	800e814 <_Bfree>
 800cc10:	e619      	b.n	800c846 <_strtod_l+0x63e>
 800cc12:	f1ba 0f00 	cmp.w	sl, #0
 800cc16:	d11a      	bne.n	800cc4e <_strtod_l+0xa46>
 800cc18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc1c:	b9eb      	cbnz	r3, 800cc5a <_strtod_l+0xa52>
 800cc1e:	2200      	movs	r2, #0
 800cc20:	4b3f      	ldr	r3, [pc, #252]	; (800cd20 <_strtod_l+0xb18>)
 800cc22:	4630      	mov	r0, r6
 800cc24:	4639      	mov	r1, r7
 800cc26:	f7f3 ff79 	bl	8000b1c <__aeabi_dcmplt>
 800cc2a:	b9c8      	cbnz	r0, 800cc60 <_strtod_l+0xa58>
 800cc2c:	4630      	mov	r0, r6
 800cc2e:	4639      	mov	r1, r7
 800cc30:	2200      	movs	r2, #0
 800cc32:	4b3e      	ldr	r3, [pc, #248]	; (800cd2c <_strtod_l+0xb24>)
 800cc34:	f7f3 fd00 	bl	8000638 <__aeabi_dmul>
 800cc38:	4606      	mov	r6, r0
 800cc3a:	460f      	mov	r7, r1
 800cc3c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800cc40:	9618      	str	r6, [sp, #96]	; 0x60
 800cc42:	9319      	str	r3, [sp, #100]	; 0x64
 800cc44:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800cc48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cc4c:	e79c      	b.n	800cb88 <_strtod_l+0x980>
 800cc4e:	f1ba 0f01 	cmp.w	sl, #1
 800cc52:	d102      	bne.n	800cc5a <_strtod_l+0xa52>
 800cc54:	2d00      	cmp	r5, #0
 800cc56:	f43f ad8e 	beq.w	800c776 <_strtod_l+0x56e>
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	4b34      	ldr	r3, [pc, #208]	; (800cd30 <_strtod_l+0xb28>)
 800cc5e:	e78f      	b.n	800cb80 <_strtod_l+0x978>
 800cc60:	2600      	movs	r6, #0
 800cc62:	4f32      	ldr	r7, [pc, #200]	; (800cd2c <_strtod_l+0xb24>)
 800cc64:	e7ea      	b.n	800cc3c <_strtod_l+0xa34>
 800cc66:	4b31      	ldr	r3, [pc, #196]	; (800cd2c <_strtod_l+0xb24>)
 800cc68:	4630      	mov	r0, r6
 800cc6a:	4639      	mov	r1, r7
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	f7f3 fce3 	bl	8000638 <__aeabi_dmul>
 800cc72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc74:	4606      	mov	r6, r0
 800cc76:	460f      	mov	r7, r1
 800cc78:	b933      	cbnz	r3, 800cc88 <_strtod_l+0xa80>
 800cc7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc7e:	9010      	str	r0, [sp, #64]	; 0x40
 800cc80:	9311      	str	r3, [sp, #68]	; 0x44
 800cc82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cc86:	e7df      	b.n	800cc48 <_strtod_l+0xa40>
 800cc88:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800cc8c:	e7f9      	b.n	800cc82 <_strtod_l+0xa7a>
 800cc8e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800cc92:	9b04      	ldr	r3, [sp, #16]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d1ab      	bne.n	800cbf0 <_strtod_l+0x9e8>
 800cc98:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cc9c:	0d1b      	lsrs	r3, r3, #20
 800cc9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cca0:	051b      	lsls	r3, r3, #20
 800cca2:	429a      	cmp	r2, r3
 800cca4:	465d      	mov	r5, fp
 800cca6:	d1a3      	bne.n	800cbf0 <_strtod_l+0x9e8>
 800cca8:	4639      	mov	r1, r7
 800ccaa:	4630      	mov	r0, r6
 800ccac:	f7f3 ff74 	bl	8000b98 <__aeabi_d2iz>
 800ccb0:	f7f3 fc58 	bl	8000564 <__aeabi_i2d>
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	4639      	mov	r1, r7
 800ccba:	4630      	mov	r0, r6
 800ccbc:	f7f3 fb04 	bl	80002c8 <__aeabi_dsub>
 800ccc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccc2:	4606      	mov	r6, r0
 800ccc4:	460f      	mov	r7, r1
 800ccc6:	b933      	cbnz	r3, 800ccd6 <_strtod_l+0xace>
 800ccc8:	f1ba 0f00 	cmp.w	sl, #0
 800cccc:	d103      	bne.n	800ccd6 <_strtod_l+0xace>
 800ccce:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800ccd2:	2d00      	cmp	r5, #0
 800ccd4:	d06d      	beq.n	800cdb2 <_strtod_l+0xbaa>
 800ccd6:	a30a      	add	r3, pc, #40	; (adr r3, 800cd00 <_strtod_l+0xaf8>)
 800ccd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccdc:	4630      	mov	r0, r6
 800ccde:	4639      	mov	r1, r7
 800cce0:	f7f3 ff1c 	bl	8000b1c <__aeabi_dcmplt>
 800cce4:	2800      	cmp	r0, #0
 800cce6:	f47f acb8 	bne.w	800c65a <_strtod_l+0x452>
 800ccea:	a307      	add	r3, pc, #28	; (adr r3, 800cd08 <_strtod_l+0xb00>)
 800ccec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf0:	4630      	mov	r0, r6
 800ccf2:	4639      	mov	r1, r7
 800ccf4:	f7f3 ff30 	bl	8000b58 <__aeabi_dcmpgt>
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	f43f af79 	beq.w	800cbf0 <_strtod_l+0x9e8>
 800ccfe:	e4ac      	b.n	800c65a <_strtod_l+0x452>
 800cd00:	94a03595 	.word	0x94a03595
 800cd04:	3fdfffff 	.word	0x3fdfffff
 800cd08:	35afe535 	.word	0x35afe535
 800cd0c:	3fe00000 	.word	0x3fe00000
 800cd10:	000fffff 	.word	0x000fffff
 800cd14:	7ff00000 	.word	0x7ff00000
 800cd18:	7fefffff 	.word	0x7fefffff
 800cd1c:	39500000 	.word	0x39500000
 800cd20:	3ff00000 	.word	0x3ff00000
 800cd24:	7fe00000 	.word	0x7fe00000
 800cd28:	7c9fffff 	.word	0x7c9fffff
 800cd2c:	3fe00000 	.word	0x3fe00000
 800cd30:	bff00000 	.word	0xbff00000
 800cd34:	9b04      	ldr	r3, [sp, #16]
 800cd36:	b333      	cbz	r3, 800cd86 <_strtod_l+0xb7e>
 800cd38:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd3a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cd3e:	d822      	bhi.n	800cd86 <_strtod_l+0xb7e>
 800cd40:	a327      	add	r3, pc, #156	; (adr r3, 800cde0 <_strtod_l+0xbd8>)
 800cd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd46:	4630      	mov	r0, r6
 800cd48:	4639      	mov	r1, r7
 800cd4a:	f7f3 fef1 	bl	8000b30 <__aeabi_dcmple>
 800cd4e:	b1a0      	cbz	r0, 800cd7a <_strtod_l+0xb72>
 800cd50:	4639      	mov	r1, r7
 800cd52:	4630      	mov	r0, r6
 800cd54:	f7f3 ff48 	bl	8000be8 <__aeabi_d2uiz>
 800cd58:	2800      	cmp	r0, #0
 800cd5a:	bf08      	it	eq
 800cd5c:	2001      	moveq	r0, #1
 800cd5e:	f7f3 fbf1 	bl	8000544 <__aeabi_ui2d>
 800cd62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd64:	4606      	mov	r6, r0
 800cd66:	460f      	mov	r7, r1
 800cd68:	bb03      	cbnz	r3, 800cdac <_strtod_l+0xba4>
 800cd6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cd6e:	9012      	str	r0, [sp, #72]	; 0x48
 800cd70:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd72:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800cd76:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cd7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd7e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cd82:	1a9b      	subs	r3, r3, r2
 800cd84:	930b      	str	r3, [sp, #44]	; 0x2c
 800cd86:	ed9d 0b08 	vldr	d0, [sp, #32]
 800cd8a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800cd8e:	f001 ffd9 	bl	800ed44 <__ulp>
 800cd92:	4650      	mov	r0, sl
 800cd94:	ec53 2b10 	vmov	r2, r3, d0
 800cd98:	4659      	mov	r1, fp
 800cd9a:	f7f3 fc4d 	bl	8000638 <__aeabi_dmul>
 800cd9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cda2:	f7f3 fa93 	bl	80002cc <__adddf3>
 800cda6:	4682      	mov	sl, r0
 800cda8:	468b      	mov	fp, r1
 800cdaa:	e772      	b.n	800cc92 <_strtod_l+0xa8a>
 800cdac:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800cdb0:	e7df      	b.n	800cd72 <_strtod_l+0xb6a>
 800cdb2:	a30d      	add	r3, pc, #52	; (adr r3, 800cde8 <_strtod_l+0xbe0>)
 800cdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb8:	f7f3 feb0 	bl	8000b1c <__aeabi_dcmplt>
 800cdbc:	e79c      	b.n	800ccf8 <_strtod_l+0xaf0>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	930d      	str	r3, [sp, #52]	; 0x34
 800cdc2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cdc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cdc6:	6013      	str	r3, [r2, #0]
 800cdc8:	f7ff ba61 	b.w	800c28e <_strtod_l+0x86>
 800cdcc:	2b65      	cmp	r3, #101	; 0x65
 800cdce:	f04f 0200 	mov.w	r2, #0
 800cdd2:	f43f ab4e 	beq.w	800c472 <_strtod_l+0x26a>
 800cdd6:	2101      	movs	r1, #1
 800cdd8:	4614      	mov	r4, r2
 800cdda:	9104      	str	r1, [sp, #16]
 800cddc:	f7ff bacb 	b.w	800c376 <_strtod_l+0x16e>
 800cde0:	ffc00000 	.word	0xffc00000
 800cde4:	41dfffff 	.word	0x41dfffff
 800cde8:	94a03595 	.word	0x94a03595
 800cdec:	3fcfffff 	.word	0x3fcfffff

0800cdf0 <strtod>:
 800cdf0:	4b07      	ldr	r3, [pc, #28]	; (800ce10 <strtod+0x20>)
 800cdf2:	4a08      	ldr	r2, [pc, #32]	; (800ce14 <strtod+0x24>)
 800cdf4:	b410      	push	{r4}
 800cdf6:	681c      	ldr	r4, [r3, #0]
 800cdf8:	6a23      	ldr	r3, [r4, #32]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	bf08      	it	eq
 800cdfe:	4613      	moveq	r3, r2
 800ce00:	460a      	mov	r2, r1
 800ce02:	4601      	mov	r1, r0
 800ce04:	4620      	mov	r0, r4
 800ce06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce0a:	f7ff b9fd 	b.w	800c208 <_strtod_l>
 800ce0e:	bf00      	nop
 800ce10:	2000004c 	.word	0x2000004c
 800ce14:	200000b0 	.word	0x200000b0

0800ce18 <_strtol_l.isra.0>:
 800ce18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce1c:	4680      	mov	r8, r0
 800ce1e:	4689      	mov	r9, r1
 800ce20:	4692      	mov	sl, r2
 800ce22:	461e      	mov	r6, r3
 800ce24:	460f      	mov	r7, r1
 800ce26:	463d      	mov	r5, r7
 800ce28:	9808      	ldr	r0, [sp, #32]
 800ce2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ce2e:	f001 fc2b 	bl	800e688 <__locale_ctype_ptr_l>
 800ce32:	4420      	add	r0, r4
 800ce34:	7843      	ldrb	r3, [r0, #1]
 800ce36:	f013 0308 	ands.w	r3, r3, #8
 800ce3a:	d132      	bne.n	800cea2 <_strtol_l.isra.0+0x8a>
 800ce3c:	2c2d      	cmp	r4, #45	; 0x2d
 800ce3e:	d132      	bne.n	800cea6 <_strtol_l.isra.0+0x8e>
 800ce40:	787c      	ldrb	r4, [r7, #1]
 800ce42:	1cbd      	adds	r5, r7, #2
 800ce44:	2201      	movs	r2, #1
 800ce46:	2e00      	cmp	r6, #0
 800ce48:	d05d      	beq.n	800cf06 <_strtol_l.isra.0+0xee>
 800ce4a:	2e10      	cmp	r6, #16
 800ce4c:	d109      	bne.n	800ce62 <_strtol_l.isra.0+0x4a>
 800ce4e:	2c30      	cmp	r4, #48	; 0x30
 800ce50:	d107      	bne.n	800ce62 <_strtol_l.isra.0+0x4a>
 800ce52:	782b      	ldrb	r3, [r5, #0]
 800ce54:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ce58:	2b58      	cmp	r3, #88	; 0x58
 800ce5a:	d14f      	bne.n	800cefc <_strtol_l.isra.0+0xe4>
 800ce5c:	786c      	ldrb	r4, [r5, #1]
 800ce5e:	2610      	movs	r6, #16
 800ce60:	3502      	adds	r5, #2
 800ce62:	2a00      	cmp	r2, #0
 800ce64:	bf14      	ite	ne
 800ce66:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800ce6a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800ce6e:	2700      	movs	r7, #0
 800ce70:	fbb1 fcf6 	udiv	ip, r1, r6
 800ce74:	4638      	mov	r0, r7
 800ce76:	fb06 1e1c 	mls	lr, r6, ip, r1
 800ce7a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800ce7e:	2b09      	cmp	r3, #9
 800ce80:	d817      	bhi.n	800ceb2 <_strtol_l.isra.0+0x9a>
 800ce82:	461c      	mov	r4, r3
 800ce84:	42a6      	cmp	r6, r4
 800ce86:	dd23      	ble.n	800ced0 <_strtol_l.isra.0+0xb8>
 800ce88:	1c7b      	adds	r3, r7, #1
 800ce8a:	d007      	beq.n	800ce9c <_strtol_l.isra.0+0x84>
 800ce8c:	4584      	cmp	ip, r0
 800ce8e:	d31c      	bcc.n	800ceca <_strtol_l.isra.0+0xb2>
 800ce90:	d101      	bne.n	800ce96 <_strtol_l.isra.0+0x7e>
 800ce92:	45a6      	cmp	lr, r4
 800ce94:	db19      	blt.n	800ceca <_strtol_l.isra.0+0xb2>
 800ce96:	fb00 4006 	mla	r0, r0, r6, r4
 800ce9a:	2701      	movs	r7, #1
 800ce9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cea0:	e7eb      	b.n	800ce7a <_strtol_l.isra.0+0x62>
 800cea2:	462f      	mov	r7, r5
 800cea4:	e7bf      	b.n	800ce26 <_strtol_l.isra.0+0xe>
 800cea6:	2c2b      	cmp	r4, #43	; 0x2b
 800cea8:	bf04      	itt	eq
 800ceaa:	1cbd      	addeq	r5, r7, #2
 800ceac:	787c      	ldrbeq	r4, [r7, #1]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	e7c9      	b.n	800ce46 <_strtol_l.isra.0+0x2e>
 800ceb2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ceb6:	2b19      	cmp	r3, #25
 800ceb8:	d801      	bhi.n	800cebe <_strtol_l.isra.0+0xa6>
 800ceba:	3c37      	subs	r4, #55	; 0x37
 800cebc:	e7e2      	b.n	800ce84 <_strtol_l.isra.0+0x6c>
 800cebe:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800cec2:	2b19      	cmp	r3, #25
 800cec4:	d804      	bhi.n	800ced0 <_strtol_l.isra.0+0xb8>
 800cec6:	3c57      	subs	r4, #87	; 0x57
 800cec8:	e7dc      	b.n	800ce84 <_strtol_l.isra.0+0x6c>
 800ceca:	f04f 37ff 	mov.w	r7, #4294967295
 800cece:	e7e5      	b.n	800ce9c <_strtol_l.isra.0+0x84>
 800ced0:	1c7b      	adds	r3, r7, #1
 800ced2:	d108      	bne.n	800cee6 <_strtol_l.isra.0+0xce>
 800ced4:	2322      	movs	r3, #34	; 0x22
 800ced6:	f8c8 3000 	str.w	r3, [r8]
 800ceda:	4608      	mov	r0, r1
 800cedc:	f1ba 0f00 	cmp.w	sl, #0
 800cee0:	d107      	bne.n	800cef2 <_strtol_l.isra.0+0xda>
 800cee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee6:	b102      	cbz	r2, 800ceea <_strtol_l.isra.0+0xd2>
 800cee8:	4240      	negs	r0, r0
 800ceea:	f1ba 0f00 	cmp.w	sl, #0
 800ceee:	d0f8      	beq.n	800cee2 <_strtol_l.isra.0+0xca>
 800cef0:	b10f      	cbz	r7, 800cef6 <_strtol_l.isra.0+0xde>
 800cef2:	f105 39ff 	add.w	r9, r5, #4294967295
 800cef6:	f8ca 9000 	str.w	r9, [sl]
 800cefa:	e7f2      	b.n	800cee2 <_strtol_l.isra.0+0xca>
 800cefc:	2430      	movs	r4, #48	; 0x30
 800cefe:	2e00      	cmp	r6, #0
 800cf00:	d1af      	bne.n	800ce62 <_strtol_l.isra.0+0x4a>
 800cf02:	2608      	movs	r6, #8
 800cf04:	e7ad      	b.n	800ce62 <_strtol_l.isra.0+0x4a>
 800cf06:	2c30      	cmp	r4, #48	; 0x30
 800cf08:	d0a3      	beq.n	800ce52 <_strtol_l.isra.0+0x3a>
 800cf0a:	260a      	movs	r6, #10
 800cf0c:	e7a9      	b.n	800ce62 <_strtol_l.isra.0+0x4a>
	...

0800cf10 <strtol>:
 800cf10:	4b08      	ldr	r3, [pc, #32]	; (800cf34 <strtol+0x24>)
 800cf12:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf14:	681c      	ldr	r4, [r3, #0]
 800cf16:	4d08      	ldr	r5, [pc, #32]	; (800cf38 <strtol+0x28>)
 800cf18:	6a23      	ldr	r3, [r4, #32]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	bf08      	it	eq
 800cf1e:	462b      	moveq	r3, r5
 800cf20:	9300      	str	r3, [sp, #0]
 800cf22:	4613      	mov	r3, r2
 800cf24:	460a      	mov	r2, r1
 800cf26:	4601      	mov	r1, r0
 800cf28:	4620      	mov	r0, r4
 800cf2a:	f7ff ff75 	bl	800ce18 <_strtol_l.isra.0>
 800cf2e:	b003      	add	sp, #12
 800cf30:	bd30      	pop	{r4, r5, pc}
 800cf32:	bf00      	nop
 800cf34:	2000004c 	.word	0x2000004c
 800cf38:	200000b0 	.word	0x200000b0

0800cf3c <__swbuf_r>:
 800cf3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3e:	460e      	mov	r6, r1
 800cf40:	4614      	mov	r4, r2
 800cf42:	4605      	mov	r5, r0
 800cf44:	b118      	cbz	r0, 800cf4e <__swbuf_r+0x12>
 800cf46:	6983      	ldr	r3, [r0, #24]
 800cf48:	b90b      	cbnz	r3, 800cf4e <__swbuf_r+0x12>
 800cf4a:	f000 ffed 	bl	800df28 <__sinit>
 800cf4e:	4b21      	ldr	r3, [pc, #132]	; (800cfd4 <__swbuf_r+0x98>)
 800cf50:	429c      	cmp	r4, r3
 800cf52:	d12a      	bne.n	800cfaa <__swbuf_r+0x6e>
 800cf54:	686c      	ldr	r4, [r5, #4]
 800cf56:	69a3      	ldr	r3, [r4, #24]
 800cf58:	60a3      	str	r3, [r4, #8]
 800cf5a:	89a3      	ldrh	r3, [r4, #12]
 800cf5c:	071a      	lsls	r2, r3, #28
 800cf5e:	d52e      	bpl.n	800cfbe <__swbuf_r+0x82>
 800cf60:	6923      	ldr	r3, [r4, #16]
 800cf62:	b363      	cbz	r3, 800cfbe <__swbuf_r+0x82>
 800cf64:	6923      	ldr	r3, [r4, #16]
 800cf66:	6820      	ldr	r0, [r4, #0]
 800cf68:	1ac0      	subs	r0, r0, r3
 800cf6a:	6963      	ldr	r3, [r4, #20]
 800cf6c:	b2f6      	uxtb	r6, r6
 800cf6e:	4283      	cmp	r3, r0
 800cf70:	4637      	mov	r7, r6
 800cf72:	dc04      	bgt.n	800cf7e <__swbuf_r+0x42>
 800cf74:	4621      	mov	r1, r4
 800cf76:	4628      	mov	r0, r5
 800cf78:	f000 ff6c 	bl	800de54 <_fflush_r>
 800cf7c:	bb28      	cbnz	r0, 800cfca <__swbuf_r+0x8e>
 800cf7e:	68a3      	ldr	r3, [r4, #8]
 800cf80:	3b01      	subs	r3, #1
 800cf82:	60a3      	str	r3, [r4, #8]
 800cf84:	6823      	ldr	r3, [r4, #0]
 800cf86:	1c5a      	adds	r2, r3, #1
 800cf88:	6022      	str	r2, [r4, #0]
 800cf8a:	701e      	strb	r6, [r3, #0]
 800cf8c:	6963      	ldr	r3, [r4, #20]
 800cf8e:	3001      	adds	r0, #1
 800cf90:	4283      	cmp	r3, r0
 800cf92:	d004      	beq.n	800cf9e <__swbuf_r+0x62>
 800cf94:	89a3      	ldrh	r3, [r4, #12]
 800cf96:	07db      	lsls	r3, r3, #31
 800cf98:	d519      	bpl.n	800cfce <__swbuf_r+0x92>
 800cf9a:	2e0a      	cmp	r6, #10
 800cf9c:	d117      	bne.n	800cfce <__swbuf_r+0x92>
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	4628      	mov	r0, r5
 800cfa2:	f000 ff57 	bl	800de54 <_fflush_r>
 800cfa6:	b190      	cbz	r0, 800cfce <__swbuf_r+0x92>
 800cfa8:	e00f      	b.n	800cfca <__swbuf_r+0x8e>
 800cfaa:	4b0b      	ldr	r3, [pc, #44]	; (800cfd8 <__swbuf_r+0x9c>)
 800cfac:	429c      	cmp	r4, r3
 800cfae:	d101      	bne.n	800cfb4 <__swbuf_r+0x78>
 800cfb0:	68ac      	ldr	r4, [r5, #8]
 800cfb2:	e7d0      	b.n	800cf56 <__swbuf_r+0x1a>
 800cfb4:	4b09      	ldr	r3, [pc, #36]	; (800cfdc <__swbuf_r+0xa0>)
 800cfb6:	429c      	cmp	r4, r3
 800cfb8:	bf08      	it	eq
 800cfba:	68ec      	ldreq	r4, [r5, #12]
 800cfbc:	e7cb      	b.n	800cf56 <__swbuf_r+0x1a>
 800cfbe:	4621      	mov	r1, r4
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	f000 f80d 	bl	800cfe0 <__swsetup_r>
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	d0cc      	beq.n	800cf64 <__swbuf_r+0x28>
 800cfca:	f04f 37ff 	mov.w	r7, #4294967295
 800cfce:	4638      	mov	r0, r7
 800cfd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	08010150 	.word	0x08010150
 800cfd8:	08010170 	.word	0x08010170
 800cfdc:	08010130 	.word	0x08010130

0800cfe0 <__swsetup_r>:
 800cfe0:	4b32      	ldr	r3, [pc, #200]	; (800d0ac <__swsetup_r+0xcc>)
 800cfe2:	b570      	push	{r4, r5, r6, lr}
 800cfe4:	681d      	ldr	r5, [r3, #0]
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	460c      	mov	r4, r1
 800cfea:	b125      	cbz	r5, 800cff6 <__swsetup_r+0x16>
 800cfec:	69ab      	ldr	r3, [r5, #24]
 800cfee:	b913      	cbnz	r3, 800cff6 <__swsetup_r+0x16>
 800cff0:	4628      	mov	r0, r5
 800cff2:	f000 ff99 	bl	800df28 <__sinit>
 800cff6:	4b2e      	ldr	r3, [pc, #184]	; (800d0b0 <__swsetup_r+0xd0>)
 800cff8:	429c      	cmp	r4, r3
 800cffa:	d10f      	bne.n	800d01c <__swsetup_r+0x3c>
 800cffc:	686c      	ldr	r4, [r5, #4]
 800cffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d002:	b29a      	uxth	r2, r3
 800d004:	0715      	lsls	r5, r2, #28
 800d006:	d42c      	bmi.n	800d062 <__swsetup_r+0x82>
 800d008:	06d0      	lsls	r0, r2, #27
 800d00a:	d411      	bmi.n	800d030 <__swsetup_r+0x50>
 800d00c:	2209      	movs	r2, #9
 800d00e:	6032      	str	r2, [r6, #0]
 800d010:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d014:	81a3      	strh	r3, [r4, #12]
 800d016:	f04f 30ff 	mov.w	r0, #4294967295
 800d01a:	e03e      	b.n	800d09a <__swsetup_r+0xba>
 800d01c:	4b25      	ldr	r3, [pc, #148]	; (800d0b4 <__swsetup_r+0xd4>)
 800d01e:	429c      	cmp	r4, r3
 800d020:	d101      	bne.n	800d026 <__swsetup_r+0x46>
 800d022:	68ac      	ldr	r4, [r5, #8]
 800d024:	e7eb      	b.n	800cffe <__swsetup_r+0x1e>
 800d026:	4b24      	ldr	r3, [pc, #144]	; (800d0b8 <__swsetup_r+0xd8>)
 800d028:	429c      	cmp	r4, r3
 800d02a:	bf08      	it	eq
 800d02c:	68ec      	ldreq	r4, [r5, #12]
 800d02e:	e7e6      	b.n	800cffe <__swsetup_r+0x1e>
 800d030:	0751      	lsls	r1, r2, #29
 800d032:	d512      	bpl.n	800d05a <__swsetup_r+0x7a>
 800d034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d036:	b141      	cbz	r1, 800d04a <__swsetup_r+0x6a>
 800d038:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d03c:	4299      	cmp	r1, r3
 800d03e:	d002      	beq.n	800d046 <__swsetup_r+0x66>
 800d040:	4630      	mov	r0, r6
 800d042:	f001 ffc1 	bl	800efc8 <_free_r>
 800d046:	2300      	movs	r3, #0
 800d048:	6363      	str	r3, [r4, #52]	; 0x34
 800d04a:	89a3      	ldrh	r3, [r4, #12]
 800d04c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d050:	81a3      	strh	r3, [r4, #12]
 800d052:	2300      	movs	r3, #0
 800d054:	6063      	str	r3, [r4, #4]
 800d056:	6923      	ldr	r3, [r4, #16]
 800d058:	6023      	str	r3, [r4, #0]
 800d05a:	89a3      	ldrh	r3, [r4, #12]
 800d05c:	f043 0308 	orr.w	r3, r3, #8
 800d060:	81a3      	strh	r3, [r4, #12]
 800d062:	6923      	ldr	r3, [r4, #16]
 800d064:	b94b      	cbnz	r3, 800d07a <__swsetup_r+0x9a>
 800d066:	89a3      	ldrh	r3, [r4, #12]
 800d068:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d06c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d070:	d003      	beq.n	800d07a <__swsetup_r+0x9a>
 800d072:	4621      	mov	r1, r4
 800d074:	4630      	mov	r0, r6
 800d076:	f001 fb3f 	bl	800e6f8 <__smakebuf_r>
 800d07a:	89a2      	ldrh	r2, [r4, #12]
 800d07c:	f012 0301 	ands.w	r3, r2, #1
 800d080:	d00c      	beq.n	800d09c <__swsetup_r+0xbc>
 800d082:	2300      	movs	r3, #0
 800d084:	60a3      	str	r3, [r4, #8]
 800d086:	6963      	ldr	r3, [r4, #20]
 800d088:	425b      	negs	r3, r3
 800d08a:	61a3      	str	r3, [r4, #24]
 800d08c:	6923      	ldr	r3, [r4, #16]
 800d08e:	b953      	cbnz	r3, 800d0a6 <__swsetup_r+0xc6>
 800d090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d094:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d098:	d1ba      	bne.n	800d010 <__swsetup_r+0x30>
 800d09a:	bd70      	pop	{r4, r5, r6, pc}
 800d09c:	0792      	lsls	r2, r2, #30
 800d09e:	bf58      	it	pl
 800d0a0:	6963      	ldrpl	r3, [r4, #20]
 800d0a2:	60a3      	str	r3, [r4, #8]
 800d0a4:	e7f2      	b.n	800d08c <__swsetup_r+0xac>
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	e7f7      	b.n	800d09a <__swsetup_r+0xba>
 800d0aa:	bf00      	nop
 800d0ac:	2000004c 	.word	0x2000004c
 800d0b0:	08010150 	.word	0x08010150
 800d0b4:	08010170 	.word	0x08010170
 800d0b8:	08010130 	.word	0x08010130

0800d0bc <quorem>:
 800d0bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c0:	6903      	ldr	r3, [r0, #16]
 800d0c2:	690c      	ldr	r4, [r1, #16]
 800d0c4:	42a3      	cmp	r3, r4
 800d0c6:	4680      	mov	r8, r0
 800d0c8:	f2c0 8082 	blt.w	800d1d0 <quorem+0x114>
 800d0cc:	3c01      	subs	r4, #1
 800d0ce:	f101 0714 	add.w	r7, r1, #20
 800d0d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d0d6:	f100 0614 	add.w	r6, r0, #20
 800d0da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d0de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d0e2:	eb06 030c 	add.w	r3, r6, ip
 800d0e6:	3501      	adds	r5, #1
 800d0e8:	eb07 090c 	add.w	r9, r7, ip
 800d0ec:	9301      	str	r3, [sp, #4]
 800d0ee:	fbb0 f5f5 	udiv	r5, r0, r5
 800d0f2:	b395      	cbz	r5, 800d15a <quorem+0x9e>
 800d0f4:	f04f 0a00 	mov.w	sl, #0
 800d0f8:	4638      	mov	r0, r7
 800d0fa:	46b6      	mov	lr, r6
 800d0fc:	46d3      	mov	fp, sl
 800d0fe:	f850 2b04 	ldr.w	r2, [r0], #4
 800d102:	b293      	uxth	r3, r2
 800d104:	fb05 a303 	mla	r3, r5, r3, sl
 800d108:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d10c:	b29b      	uxth	r3, r3
 800d10e:	ebab 0303 	sub.w	r3, fp, r3
 800d112:	0c12      	lsrs	r2, r2, #16
 800d114:	f8de b000 	ldr.w	fp, [lr]
 800d118:	fb05 a202 	mla	r2, r5, r2, sl
 800d11c:	fa13 f38b 	uxtah	r3, r3, fp
 800d120:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d124:	fa1f fb82 	uxth.w	fp, r2
 800d128:	f8de 2000 	ldr.w	r2, [lr]
 800d12c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d130:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d134:	b29b      	uxth	r3, r3
 800d136:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d13a:	4581      	cmp	r9, r0
 800d13c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d140:	f84e 3b04 	str.w	r3, [lr], #4
 800d144:	d2db      	bcs.n	800d0fe <quorem+0x42>
 800d146:	f856 300c 	ldr.w	r3, [r6, ip]
 800d14a:	b933      	cbnz	r3, 800d15a <quorem+0x9e>
 800d14c:	9b01      	ldr	r3, [sp, #4]
 800d14e:	3b04      	subs	r3, #4
 800d150:	429e      	cmp	r6, r3
 800d152:	461a      	mov	r2, r3
 800d154:	d330      	bcc.n	800d1b8 <quorem+0xfc>
 800d156:	f8c8 4010 	str.w	r4, [r8, #16]
 800d15a:	4640      	mov	r0, r8
 800d15c:	f001 fd7a 	bl	800ec54 <__mcmp>
 800d160:	2800      	cmp	r0, #0
 800d162:	db25      	blt.n	800d1b0 <quorem+0xf4>
 800d164:	3501      	adds	r5, #1
 800d166:	4630      	mov	r0, r6
 800d168:	f04f 0c00 	mov.w	ip, #0
 800d16c:	f857 2b04 	ldr.w	r2, [r7], #4
 800d170:	f8d0 e000 	ldr.w	lr, [r0]
 800d174:	b293      	uxth	r3, r2
 800d176:	ebac 0303 	sub.w	r3, ip, r3
 800d17a:	0c12      	lsrs	r2, r2, #16
 800d17c:	fa13 f38e 	uxtah	r3, r3, lr
 800d180:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d184:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d188:	b29b      	uxth	r3, r3
 800d18a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d18e:	45b9      	cmp	r9, r7
 800d190:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d194:	f840 3b04 	str.w	r3, [r0], #4
 800d198:	d2e8      	bcs.n	800d16c <quorem+0xb0>
 800d19a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d19e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d1a2:	b92a      	cbnz	r2, 800d1b0 <quorem+0xf4>
 800d1a4:	3b04      	subs	r3, #4
 800d1a6:	429e      	cmp	r6, r3
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	d30b      	bcc.n	800d1c4 <quorem+0x108>
 800d1ac:	f8c8 4010 	str.w	r4, [r8, #16]
 800d1b0:	4628      	mov	r0, r5
 800d1b2:	b003      	add	sp, #12
 800d1b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1b8:	6812      	ldr	r2, [r2, #0]
 800d1ba:	3b04      	subs	r3, #4
 800d1bc:	2a00      	cmp	r2, #0
 800d1be:	d1ca      	bne.n	800d156 <quorem+0x9a>
 800d1c0:	3c01      	subs	r4, #1
 800d1c2:	e7c5      	b.n	800d150 <quorem+0x94>
 800d1c4:	6812      	ldr	r2, [r2, #0]
 800d1c6:	3b04      	subs	r3, #4
 800d1c8:	2a00      	cmp	r2, #0
 800d1ca:	d1ef      	bne.n	800d1ac <quorem+0xf0>
 800d1cc:	3c01      	subs	r4, #1
 800d1ce:	e7ea      	b.n	800d1a6 <quorem+0xea>
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	e7ee      	b.n	800d1b2 <quorem+0xf6>
 800d1d4:	0000      	movs	r0, r0
	...

0800d1d8 <_dtoa_r>:
 800d1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1dc:	ec57 6b10 	vmov	r6, r7, d0
 800d1e0:	b097      	sub	sp, #92	; 0x5c
 800d1e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d1e4:	9106      	str	r1, [sp, #24]
 800d1e6:	4604      	mov	r4, r0
 800d1e8:	920b      	str	r2, [sp, #44]	; 0x2c
 800d1ea:	9312      	str	r3, [sp, #72]	; 0x48
 800d1ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d1f0:	e9cd 6700 	strd	r6, r7, [sp]
 800d1f4:	b93d      	cbnz	r5, 800d206 <_dtoa_r+0x2e>
 800d1f6:	2010      	movs	r0, #16
 800d1f8:	f001 fabe 	bl	800e778 <malloc>
 800d1fc:	6260      	str	r0, [r4, #36]	; 0x24
 800d1fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d202:	6005      	str	r5, [r0, #0]
 800d204:	60c5      	str	r5, [r0, #12]
 800d206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d208:	6819      	ldr	r1, [r3, #0]
 800d20a:	b151      	cbz	r1, 800d222 <_dtoa_r+0x4a>
 800d20c:	685a      	ldr	r2, [r3, #4]
 800d20e:	604a      	str	r2, [r1, #4]
 800d210:	2301      	movs	r3, #1
 800d212:	4093      	lsls	r3, r2
 800d214:	608b      	str	r3, [r1, #8]
 800d216:	4620      	mov	r0, r4
 800d218:	f001 fafc 	bl	800e814 <_Bfree>
 800d21c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d21e:	2200      	movs	r2, #0
 800d220:	601a      	str	r2, [r3, #0]
 800d222:	1e3b      	subs	r3, r7, #0
 800d224:	bfbb      	ittet	lt
 800d226:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d22a:	9301      	strlt	r3, [sp, #4]
 800d22c:	2300      	movge	r3, #0
 800d22e:	2201      	movlt	r2, #1
 800d230:	bfac      	ite	ge
 800d232:	f8c8 3000 	strge.w	r3, [r8]
 800d236:	f8c8 2000 	strlt.w	r2, [r8]
 800d23a:	4baf      	ldr	r3, [pc, #700]	; (800d4f8 <_dtoa_r+0x320>)
 800d23c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d240:	ea33 0308 	bics.w	r3, r3, r8
 800d244:	d114      	bne.n	800d270 <_dtoa_r+0x98>
 800d246:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d248:	f242 730f 	movw	r3, #9999	; 0x270f
 800d24c:	6013      	str	r3, [r2, #0]
 800d24e:	9b00      	ldr	r3, [sp, #0]
 800d250:	b923      	cbnz	r3, 800d25c <_dtoa_r+0x84>
 800d252:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d256:	2800      	cmp	r0, #0
 800d258:	f000 8542 	beq.w	800dce0 <_dtoa_r+0xb08>
 800d25c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d25e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d50c <_dtoa_r+0x334>
 800d262:	2b00      	cmp	r3, #0
 800d264:	f000 8544 	beq.w	800dcf0 <_dtoa_r+0xb18>
 800d268:	f10b 0303 	add.w	r3, fp, #3
 800d26c:	f000 bd3e 	b.w	800dcec <_dtoa_r+0xb14>
 800d270:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d274:	2200      	movs	r2, #0
 800d276:	2300      	movs	r3, #0
 800d278:	4630      	mov	r0, r6
 800d27a:	4639      	mov	r1, r7
 800d27c:	f7f3 fc44 	bl	8000b08 <__aeabi_dcmpeq>
 800d280:	4681      	mov	r9, r0
 800d282:	b168      	cbz	r0, 800d2a0 <_dtoa_r+0xc8>
 800d284:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d286:	2301      	movs	r3, #1
 800d288:	6013      	str	r3, [r2, #0]
 800d28a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	f000 8524 	beq.w	800dcda <_dtoa_r+0xb02>
 800d292:	4b9a      	ldr	r3, [pc, #616]	; (800d4fc <_dtoa_r+0x324>)
 800d294:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d296:	f103 3bff 	add.w	fp, r3, #4294967295
 800d29a:	6013      	str	r3, [r2, #0]
 800d29c:	f000 bd28 	b.w	800dcf0 <_dtoa_r+0xb18>
 800d2a0:	aa14      	add	r2, sp, #80	; 0x50
 800d2a2:	a915      	add	r1, sp, #84	; 0x54
 800d2a4:	ec47 6b10 	vmov	d0, r6, r7
 800d2a8:	4620      	mov	r0, r4
 800d2aa:	f001 fdc1 	bl	800ee30 <__d2b>
 800d2ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d2b2:	9004      	str	r0, [sp, #16]
 800d2b4:	2d00      	cmp	r5, #0
 800d2b6:	d07c      	beq.n	800d3b2 <_dtoa_r+0x1da>
 800d2b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d2bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d2c0:	46b2      	mov	sl, r6
 800d2c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d2c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d2ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	4b8b      	ldr	r3, [pc, #556]	; (800d500 <_dtoa_r+0x328>)
 800d2d2:	4650      	mov	r0, sl
 800d2d4:	4659      	mov	r1, fp
 800d2d6:	f7f2 fff7 	bl	80002c8 <__aeabi_dsub>
 800d2da:	a381      	add	r3, pc, #516	; (adr r3, 800d4e0 <_dtoa_r+0x308>)
 800d2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e0:	f7f3 f9aa 	bl	8000638 <__aeabi_dmul>
 800d2e4:	a380      	add	r3, pc, #512	; (adr r3, 800d4e8 <_dtoa_r+0x310>)
 800d2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ea:	f7f2 ffef 	bl	80002cc <__adddf3>
 800d2ee:	4606      	mov	r6, r0
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	460f      	mov	r7, r1
 800d2f4:	f7f3 f936 	bl	8000564 <__aeabi_i2d>
 800d2f8:	a37d      	add	r3, pc, #500	; (adr r3, 800d4f0 <_dtoa_r+0x318>)
 800d2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2fe:	f7f3 f99b 	bl	8000638 <__aeabi_dmul>
 800d302:	4602      	mov	r2, r0
 800d304:	460b      	mov	r3, r1
 800d306:	4630      	mov	r0, r6
 800d308:	4639      	mov	r1, r7
 800d30a:	f7f2 ffdf 	bl	80002cc <__adddf3>
 800d30e:	4606      	mov	r6, r0
 800d310:	460f      	mov	r7, r1
 800d312:	f7f3 fc41 	bl	8000b98 <__aeabi_d2iz>
 800d316:	2200      	movs	r2, #0
 800d318:	4682      	mov	sl, r0
 800d31a:	2300      	movs	r3, #0
 800d31c:	4630      	mov	r0, r6
 800d31e:	4639      	mov	r1, r7
 800d320:	f7f3 fbfc 	bl	8000b1c <__aeabi_dcmplt>
 800d324:	b148      	cbz	r0, 800d33a <_dtoa_r+0x162>
 800d326:	4650      	mov	r0, sl
 800d328:	f7f3 f91c 	bl	8000564 <__aeabi_i2d>
 800d32c:	4632      	mov	r2, r6
 800d32e:	463b      	mov	r3, r7
 800d330:	f7f3 fbea 	bl	8000b08 <__aeabi_dcmpeq>
 800d334:	b908      	cbnz	r0, 800d33a <_dtoa_r+0x162>
 800d336:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d33a:	f1ba 0f16 	cmp.w	sl, #22
 800d33e:	d859      	bhi.n	800d3f4 <_dtoa_r+0x21c>
 800d340:	4970      	ldr	r1, [pc, #448]	; (800d504 <_dtoa_r+0x32c>)
 800d342:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d34a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d34e:	f7f3 fc03 	bl	8000b58 <__aeabi_dcmpgt>
 800d352:	2800      	cmp	r0, #0
 800d354:	d050      	beq.n	800d3f8 <_dtoa_r+0x220>
 800d356:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d35a:	2300      	movs	r3, #0
 800d35c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d35e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d360:	1b5d      	subs	r5, r3, r5
 800d362:	f1b5 0801 	subs.w	r8, r5, #1
 800d366:	bf49      	itett	mi
 800d368:	f1c5 0301 	rsbmi	r3, r5, #1
 800d36c:	2300      	movpl	r3, #0
 800d36e:	9305      	strmi	r3, [sp, #20]
 800d370:	f04f 0800 	movmi.w	r8, #0
 800d374:	bf58      	it	pl
 800d376:	9305      	strpl	r3, [sp, #20]
 800d378:	f1ba 0f00 	cmp.w	sl, #0
 800d37c:	db3e      	blt.n	800d3fc <_dtoa_r+0x224>
 800d37e:	2300      	movs	r3, #0
 800d380:	44d0      	add	r8, sl
 800d382:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d386:	9307      	str	r3, [sp, #28]
 800d388:	9b06      	ldr	r3, [sp, #24]
 800d38a:	2b09      	cmp	r3, #9
 800d38c:	f200 8090 	bhi.w	800d4b0 <_dtoa_r+0x2d8>
 800d390:	2b05      	cmp	r3, #5
 800d392:	bfc4      	itt	gt
 800d394:	3b04      	subgt	r3, #4
 800d396:	9306      	strgt	r3, [sp, #24]
 800d398:	9b06      	ldr	r3, [sp, #24]
 800d39a:	f1a3 0302 	sub.w	r3, r3, #2
 800d39e:	bfcc      	ite	gt
 800d3a0:	2500      	movgt	r5, #0
 800d3a2:	2501      	movle	r5, #1
 800d3a4:	2b03      	cmp	r3, #3
 800d3a6:	f200 808f 	bhi.w	800d4c8 <_dtoa_r+0x2f0>
 800d3aa:	e8df f003 	tbb	[pc, r3]
 800d3ae:	7f7d      	.short	0x7f7d
 800d3b0:	7131      	.short	0x7131
 800d3b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d3b6:	441d      	add	r5, r3
 800d3b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d3bc:	2820      	cmp	r0, #32
 800d3be:	dd13      	ble.n	800d3e8 <_dtoa_r+0x210>
 800d3c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d3c4:	9b00      	ldr	r3, [sp, #0]
 800d3c6:	fa08 f800 	lsl.w	r8, r8, r0
 800d3ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d3ce:	fa23 f000 	lsr.w	r0, r3, r0
 800d3d2:	ea48 0000 	orr.w	r0, r8, r0
 800d3d6:	f7f3 f8b5 	bl	8000544 <__aeabi_ui2d>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	4682      	mov	sl, r0
 800d3de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d3e2:	3d01      	subs	r5, #1
 800d3e4:	9313      	str	r3, [sp, #76]	; 0x4c
 800d3e6:	e772      	b.n	800d2ce <_dtoa_r+0xf6>
 800d3e8:	9b00      	ldr	r3, [sp, #0]
 800d3ea:	f1c0 0020 	rsb	r0, r0, #32
 800d3ee:	fa03 f000 	lsl.w	r0, r3, r0
 800d3f2:	e7f0      	b.n	800d3d6 <_dtoa_r+0x1fe>
 800d3f4:	2301      	movs	r3, #1
 800d3f6:	e7b1      	b.n	800d35c <_dtoa_r+0x184>
 800d3f8:	900f      	str	r0, [sp, #60]	; 0x3c
 800d3fa:	e7b0      	b.n	800d35e <_dtoa_r+0x186>
 800d3fc:	9b05      	ldr	r3, [sp, #20]
 800d3fe:	eba3 030a 	sub.w	r3, r3, sl
 800d402:	9305      	str	r3, [sp, #20]
 800d404:	f1ca 0300 	rsb	r3, sl, #0
 800d408:	9307      	str	r3, [sp, #28]
 800d40a:	2300      	movs	r3, #0
 800d40c:	930e      	str	r3, [sp, #56]	; 0x38
 800d40e:	e7bb      	b.n	800d388 <_dtoa_r+0x1b0>
 800d410:	2301      	movs	r3, #1
 800d412:	930a      	str	r3, [sp, #40]	; 0x28
 800d414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d416:	2b00      	cmp	r3, #0
 800d418:	dd59      	ble.n	800d4ce <_dtoa_r+0x2f6>
 800d41a:	9302      	str	r3, [sp, #8]
 800d41c:	4699      	mov	r9, r3
 800d41e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d420:	2200      	movs	r2, #0
 800d422:	6072      	str	r2, [r6, #4]
 800d424:	2204      	movs	r2, #4
 800d426:	f102 0014 	add.w	r0, r2, #20
 800d42a:	4298      	cmp	r0, r3
 800d42c:	6871      	ldr	r1, [r6, #4]
 800d42e:	d953      	bls.n	800d4d8 <_dtoa_r+0x300>
 800d430:	4620      	mov	r0, r4
 800d432:	f001 f9bb 	bl	800e7ac <_Balloc>
 800d436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d438:	6030      	str	r0, [r6, #0]
 800d43a:	f1b9 0f0e 	cmp.w	r9, #14
 800d43e:	f8d3 b000 	ldr.w	fp, [r3]
 800d442:	f200 80e6 	bhi.w	800d612 <_dtoa_r+0x43a>
 800d446:	2d00      	cmp	r5, #0
 800d448:	f000 80e3 	beq.w	800d612 <_dtoa_r+0x43a>
 800d44c:	ed9d 7b00 	vldr	d7, [sp]
 800d450:	f1ba 0f00 	cmp.w	sl, #0
 800d454:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d458:	dd74      	ble.n	800d544 <_dtoa_r+0x36c>
 800d45a:	4a2a      	ldr	r2, [pc, #168]	; (800d504 <_dtoa_r+0x32c>)
 800d45c:	f00a 030f 	and.w	r3, sl, #15
 800d460:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d464:	ed93 7b00 	vldr	d7, [r3]
 800d468:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d46c:	06f0      	lsls	r0, r6, #27
 800d46e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d472:	d565      	bpl.n	800d540 <_dtoa_r+0x368>
 800d474:	4b24      	ldr	r3, [pc, #144]	; (800d508 <_dtoa_r+0x330>)
 800d476:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d47a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d47e:	f7f3 fa05 	bl	800088c <__aeabi_ddiv>
 800d482:	e9cd 0100 	strd	r0, r1, [sp]
 800d486:	f006 060f 	and.w	r6, r6, #15
 800d48a:	2503      	movs	r5, #3
 800d48c:	4f1e      	ldr	r7, [pc, #120]	; (800d508 <_dtoa_r+0x330>)
 800d48e:	e04c      	b.n	800d52a <_dtoa_r+0x352>
 800d490:	2301      	movs	r3, #1
 800d492:	930a      	str	r3, [sp, #40]	; 0x28
 800d494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d496:	4453      	add	r3, sl
 800d498:	f103 0901 	add.w	r9, r3, #1
 800d49c:	9302      	str	r3, [sp, #8]
 800d49e:	464b      	mov	r3, r9
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	bfb8      	it	lt
 800d4a4:	2301      	movlt	r3, #1
 800d4a6:	e7ba      	b.n	800d41e <_dtoa_r+0x246>
 800d4a8:	2300      	movs	r3, #0
 800d4aa:	e7b2      	b.n	800d412 <_dtoa_r+0x23a>
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	e7f0      	b.n	800d492 <_dtoa_r+0x2ba>
 800d4b0:	2501      	movs	r5, #1
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	9306      	str	r3, [sp, #24]
 800d4b6:	950a      	str	r5, [sp, #40]	; 0x28
 800d4b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4bc:	9302      	str	r3, [sp, #8]
 800d4be:	4699      	mov	r9, r3
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	2312      	movs	r3, #18
 800d4c4:	920b      	str	r2, [sp, #44]	; 0x2c
 800d4c6:	e7aa      	b.n	800d41e <_dtoa_r+0x246>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	930a      	str	r3, [sp, #40]	; 0x28
 800d4cc:	e7f4      	b.n	800d4b8 <_dtoa_r+0x2e0>
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	9302      	str	r3, [sp, #8]
 800d4d2:	4699      	mov	r9, r3
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	e7f5      	b.n	800d4c4 <_dtoa_r+0x2ec>
 800d4d8:	3101      	adds	r1, #1
 800d4da:	6071      	str	r1, [r6, #4]
 800d4dc:	0052      	lsls	r2, r2, #1
 800d4de:	e7a2      	b.n	800d426 <_dtoa_r+0x24e>
 800d4e0:	636f4361 	.word	0x636f4361
 800d4e4:	3fd287a7 	.word	0x3fd287a7
 800d4e8:	8b60c8b3 	.word	0x8b60c8b3
 800d4ec:	3fc68a28 	.word	0x3fc68a28
 800d4f0:	509f79fb 	.word	0x509f79fb
 800d4f4:	3fd34413 	.word	0x3fd34413
 800d4f8:	7ff00000 	.word	0x7ff00000
 800d4fc:	080100ad 	.word	0x080100ad
 800d500:	3ff80000 	.word	0x3ff80000
 800d504:	080101c8 	.word	0x080101c8
 800d508:	080101a0 	.word	0x080101a0
 800d50c:	08010129 	.word	0x08010129
 800d510:	07f1      	lsls	r1, r6, #31
 800d512:	d508      	bpl.n	800d526 <_dtoa_r+0x34e>
 800d514:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d51c:	f7f3 f88c 	bl	8000638 <__aeabi_dmul>
 800d520:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d524:	3501      	adds	r5, #1
 800d526:	1076      	asrs	r6, r6, #1
 800d528:	3708      	adds	r7, #8
 800d52a:	2e00      	cmp	r6, #0
 800d52c:	d1f0      	bne.n	800d510 <_dtoa_r+0x338>
 800d52e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d532:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d536:	f7f3 f9a9 	bl	800088c <__aeabi_ddiv>
 800d53a:	e9cd 0100 	strd	r0, r1, [sp]
 800d53e:	e01a      	b.n	800d576 <_dtoa_r+0x39e>
 800d540:	2502      	movs	r5, #2
 800d542:	e7a3      	b.n	800d48c <_dtoa_r+0x2b4>
 800d544:	f000 80a0 	beq.w	800d688 <_dtoa_r+0x4b0>
 800d548:	f1ca 0600 	rsb	r6, sl, #0
 800d54c:	4b9f      	ldr	r3, [pc, #636]	; (800d7cc <_dtoa_r+0x5f4>)
 800d54e:	4fa0      	ldr	r7, [pc, #640]	; (800d7d0 <_dtoa_r+0x5f8>)
 800d550:	f006 020f 	and.w	r2, r6, #15
 800d554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d55c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d560:	f7f3 f86a 	bl	8000638 <__aeabi_dmul>
 800d564:	e9cd 0100 	strd	r0, r1, [sp]
 800d568:	1136      	asrs	r6, r6, #4
 800d56a:	2300      	movs	r3, #0
 800d56c:	2502      	movs	r5, #2
 800d56e:	2e00      	cmp	r6, #0
 800d570:	d17f      	bne.n	800d672 <_dtoa_r+0x49a>
 800d572:	2b00      	cmp	r3, #0
 800d574:	d1e1      	bne.n	800d53a <_dtoa_r+0x362>
 800d576:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f000 8087 	beq.w	800d68c <_dtoa_r+0x4b4>
 800d57e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d582:	2200      	movs	r2, #0
 800d584:	4b93      	ldr	r3, [pc, #588]	; (800d7d4 <_dtoa_r+0x5fc>)
 800d586:	4630      	mov	r0, r6
 800d588:	4639      	mov	r1, r7
 800d58a:	f7f3 fac7 	bl	8000b1c <__aeabi_dcmplt>
 800d58e:	2800      	cmp	r0, #0
 800d590:	d07c      	beq.n	800d68c <_dtoa_r+0x4b4>
 800d592:	f1b9 0f00 	cmp.w	r9, #0
 800d596:	d079      	beq.n	800d68c <_dtoa_r+0x4b4>
 800d598:	9b02      	ldr	r3, [sp, #8]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	dd35      	ble.n	800d60a <_dtoa_r+0x432>
 800d59e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d5a2:	9308      	str	r3, [sp, #32]
 800d5a4:	4639      	mov	r1, r7
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	4b8b      	ldr	r3, [pc, #556]	; (800d7d8 <_dtoa_r+0x600>)
 800d5aa:	4630      	mov	r0, r6
 800d5ac:	f7f3 f844 	bl	8000638 <__aeabi_dmul>
 800d5b0:	e9cd 0100 	strd	r0, r1, [sp]
 800d5b4:	9f02      	ldr	r7, [sp, #8]
 800d5b6:	3501      	adds	r5, #1
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	f7f2 ffd3 	bl	8000564 <__aeabi_i2d>
 800d5be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5c2:	f7f3 f839 	bl	8000638 <__aeabi_dmul>
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	4b84      	ldr	r3, [pc, #528]	; (800d7dc <_dtoa_r+0x604>)
 800d5ca:	f7f2 fe7f 	bl	80002cc <__adddf3>
 800d5ce:	4605      	mov	r5, r0
 800d5d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d5d4:	2f00      	cmp	r7, #0
 800d5d6:	d15d      	bne.n	800d694 <_dtoa_r+0x4bc>
 800d5d8:	2200      	movs	r2, #0
 800d5da:	4b81      	ldr	r3, [pc, #516]	; (800d7e0 <_dtoa_r+0x608>)
 800d5dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5e0:	f7f2 fe72 	bl	80002c8 <__aeabi_dsub>
 800d5e4:	462a      	mov	r2, r5
 800d5e6:	4633      	mov	r3, r6
 800d5e8:	e9cd 0100 	strd	r0, r1, [sp]
 800d5ec:	f7f3 fab4 	bl	8000b58 <__aeabi_dcmpgt>
 800d5f0:	2800      	cmp	r0, #0
 800d5f2:	f040 8288 	bne.w	800db06 <_dtoa_r+0x92e>
 800d5f6:	462a      	mov	r2, r5
 800d5f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d5fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d600:	f7f3 fa8c 	bl	8000b1c <__aeabi_dcmplt>
 800d604:	2800      	cmp	r0, #0
 800d606:	f040 827c 	bne.w	800db02 <_dtoa_r+0x92a>
 800d60a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d60e:	e9cd 2300 	strd	r2, r3, [sp]
 800d612:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d614:	2b00      	cmp	r3, #0
 800d616:	f2c0 8150 	blt.w	800d8ba <_dtoa_r+0x6e2>
 800d61a:	f1ba 0f0e 	cmp.w	sl, #14
 800d61e:	f300 814c 	bgt.w	800d8ba <_dtoa_r+0x6e2>
 800d622:	4b6a      	ldr	r3, [pc, #424]	; (800d7cc <_dtoa_r+0x5f4>)
 800d624:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d628:	ed93 7b00 	vldr	d7, [r3]
 800d62c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d62e:	2b00      	cmp	r3, #0
 800d630:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d634:	f280 80d8 	bge.w	800d7e8 <_dtoa_r+0x610>
 800d638:	f1b9 0f00 	cmp.w	r9, #0
 800d63c:	f300 80d4 	bgt.w	800d7e8 <_dtoa_r+0x610>
 800d640:	f040 825e 	bne.w	800db00 <_dtoa_r+0x928>
 800d644:	2200      	movs	r2, #0
 800d646:	4b66      	ldr	r3, [pc, #408]	; (800d7e0 <_dtoa_r+0x608>)
 800d648:	ec51 0b17 	vmov	r0, r1, d7
 800d64c:	f7f2 fff4 	bl	8000638 <__aeabi_dmul>
 800d650:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d654:	f7f3 fa76 	bl	8000b44 <__aeabi_dcmpge>
 800d658:	464f      	mov	r7, r9
 800d65a:	464e      	mov	r6, r9
 800d65c:	2800      	cmp	r0, #0
 800d65e:	f040 8234 	bne.w	800daca <_dtoa_r+0x8f2>
 800d662:	2331      	movs	r3, #49	; 0x31
 800d664:	f10b 0501 	add.w	r5, fp, #1
 800d668:	f88b 3000 	strb.w	r3, [fp]
 800d66c:	f10a 0a01 	add.w	sl, sl, #1
 800d670:	e22f      	b.n	800dad2 <_dtoa_r+0x8fa>
 800d672:	07f2      	lsls	r2, r6, #31
 800d674:	d505      	bpl.n	800d682 <_dtoa_r+0x4aa>
 800d676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d67a:	f7f2 ffdd 	bl	8000638 <__aeabi_dmul>
 800d67e:	3501      	adds	r5, #1
 800d680:	2301      	movs	r3, #1
 800d682:	1076      	asrs	r6, r6, #1
 800d684:	3708      	adds	r7, #8
 800d686:	e772      	b.n	800d56e <_dtoa_r+0x396>
 800d688:	2502      	movs	r5, #2
 800d68a:	e774      	b.n	800d576 <_dtoa_r+0x39e>
 800d68c:	f8cd a020 	str.w	sl, [sp, #32]
 800d690:	464f      	mov	r7, r9
 800d692:	e791      	b.n	800d5b8 <_dtoa_r+0x3e0>
 800d694:	4b4d      	ldr	r3, [pc, #308]	; (800d7cc <_dtoa_r+0x5f4>)
 800d696:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d69a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d047      	beq.n	800d734 <_dtoa_r+0x55c>
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	460b      	mov	r3, r1
 800d6a8:	2000      	movs	r0, #0
 800d6aa:	494e      	ldr	r1, [pc, #312]	; (800d7e4 <_dtoa_r+0x60c>)
 800d6ac:	f7f3 f8ee 	bl	800088c <__aeabi_ddiv>
 800d6b0:	462a      	mov	r2, r5
 800d6b2:	4633      	mov	r3, r6
 800d6b4:	f7f2 fe08 	bl	80002c8 <__aeabi_dsub>
 800d6b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d6bc:	465d      	mov	r5, fp
 800d6be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6c2:	f7f3 fa69 	bl	8000b98 <__aeabi_d2iz>
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	f7f2 ff4c 	bl	8000564 <__aeabi_i2d>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	460b      	mov	r3, r1
 800d6d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d6d4:	f7f2 fdf8 	bl	80002c8 <__aeabi_dsub>
 800d6d8:	3630      	adds	r6, #48	; 0x30
 800d6da:	f805 6b01 	strb.w	r6, [r5], #1
 800d6de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d6e2:	e9cd 0100 	strd	r0, r1, [sp]
 800d6e6:	f7f3 fa19 	bl	8000b1c <__aeabi_dcmplt>
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	d163      	bne.n	800d7b6 <_dtoa_r+0x5de>
 800d6ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d6f2:	2000      	movs	r0, #0
 800d6f4:	4937      	ldr	r1, [pc, #220]	; (800d7d4 <_dtoa_r+0x5fc>)
 800d6f6:	f7f2 fde7 	bl	80002c8 <__aeabi_dsub>
 800d6fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d6fe:	f7f3 fa0d 	bl	8000b1c <__aeabi_dcmplt>
 800d702:	2800      	cmp	r0, #0
 800d704:	f040 80b7 	bne.w	800d876 <_dtoa_r+0x69e>
 800d708:	eba5 030b 	sub.w	r3, r5, fp
 800d70c:	429f      	cmp	r7, r3
 800d70e:	f77f af7c 	ble.w	800d60a <_dtoa_r+0x432>
 800d712:	2200      	movs	r2, #0
 800d714:	4b30      	ldr	r3, [pc, #192]	; (800d7d8 <_dtoa_r+0x600>)
 800d716:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d71a:	f7f2 ff8d 	bl	8000638 <__aeabi_dmul>
 800d71e:	2200      	movs	r2, #0
 800d720:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d724:	4b2c      	ldr	r3, [pc, #176]	; (800d7d8 <_dtoa_r+0x600>)
 800d726:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d72a:	f7f2 ff85 	bl	8000638 <__aeabi_dmul>
 800d72e:	e9cd 0100 	strd	r0, r1, [sp]
 800d732:	e7c4      	b.n	800d6be <_dtoa_r+0x4e6>
 800d734:	462a      	mov	r2, r5
 800d736:	4633      	mov	r3, r6
 800d738:	f7f2 ff7e 	bl	8000638 <__aeabi_dmul>
 800d73c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d740:	eb0b 0507 	add.w	r5, fp, r7
 800d744:	465e      	mov	r6, fp
 800d746:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d74a:	f7f3 fa25 	bl	8000b98 <__aeabi_d2iz>
 800d74e:	4607      	mov	r7, r0
 800d750:	f7f2 ff08 	bl	8000564 <__aeabi_i2d>
 800d754:	3730      	adds	r7, #48	; 0x30
 800d756:	4602      	mov	r2, r0
 800d758:	460b      	mov	r3, r1
 800d75a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d75e:	f7f2 fdb3 	bl	80002c8 <__aeabi_dsub>
 800d762:	f806 7b01 	strb.w	r7, [r6], #1
 800d766:	42ae      	cmp	r6, r5
 800d768:	e9cd 0100 	strd	r0, r1, [sp]
 800d76c:	f04f 0200 	mov.w	r2, #0
 800d770:	d126      	bne.n	800d7c0 <_dtoa_r+0x5e8>
 800d772:	4b1c      	ldr	r3, [pc, #112]	; (800d7e4 <_dtoa_r+0x60c>)
 800d774:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d778:	f7f2 fda8 	bl	80002cc <__adddf3>
 800d77c:	4602      	mov	r2, r0
 800d77e:	460b      	mov	r3, r1
 800d780:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d784:	f7f3 f9e8 	bl	8000b58 <__aeabi_dcmpgt>
 800d788:	2800      	cmp	r0, #0
 800d78a:	d174      	bne.n	800d876 <_dtoa_r+0x69e>
 800d78c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d790:	2000      	movs	r0, #0
 800d792:	4914      	ldr	r1, [pc, #80]	; (800d7e4 <_dtoa_r+0x60c>)
 800d794:	f7f2 fd98 	bl	80002c8 <__aeabi_dsub>
 800d798:	4602      	mov	r2, r0
 800d79a:	460b      	mov	r3, r1
 800d79c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7a0:	f7f3 f9bc 	bl	8000b1c <__aeabi_dcmplt>
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	f43f af30 	beq.w	800d60a <_dtoa_r+0x432>
 800d7aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d7ae:	2b30      	cmp	r3, #48	; 0x30
 800d7b0:	f105 32ff 	add.w	r2, r5, #4294967295
 800d7b4:	d002      	beq.n	800d7bc <_dtoa_r+0x5e4>
 800d7b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d7ba:	e04a      	b.n	800d852 <_dtoa_r+0x67a>
 800d7bc:	4615      	mov	r5, r2
 800d7be:	e7f4      	b.n	800d7aa <_dtoa_r+0x5d2>
 800d7c0:	4b05      	ldr	r3, [pc, #20]	; (800d7d8 <_dtoa_r+0x600>)
 800d7c2:	f7f2 ff39 	bl	8000638 <__aeabi_dmul>
 800d7c6:	e9cd 0100 	strd	r0, r1, [sp]
 800d7ca:	e7bc      	b.n	800d746 <_dtoa_r+0x56e>
 800d7cc:	080101c8 	.word	0x080101c8
 800d7d0:	080101a0 	.word	0x080101a0
 800d7d4:	3ff00000 	.word	0x3ff00000
 800d7d8:	40240000 	.word	0x40240000
 800d7dc:	401c0000 	.word	0x401c0000
 800d7e0:	40140000 	.word	0x40140000
 800d7e4:	3fe00000 	.word	0x3fe00000
 800d7e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d7ec:	465d      	mov	r5, fp
 800d7ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d7f2:	4630      	mov	r0, r6
 800d7f4:	4639      	mov	r1, r7
 800d7f6:	f7f3 f849 	bl	800088c <__aeabi_ddiv>
 800d7fa:	f7f3 f9cd 	bl	8000b98 <__aeabi_d2iz>
 800d7fe:	4680      	mov	r8, r0
 800d800:	f7f2 feb0 	bl	8000564 <__aeabi_i2d>
 800d804:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d808:	f7f2 ff16 	bl	8000638 <__aeabi_dmul>
 800d80c:	4602      	mov	r2, r0
 800d80e:	460b      	mov	r3, r1
 800d810:	4630      	mov	r0, r6
 800d812:	4639      	mov	r1, r7
 800d814:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d818:	f7f2 fd56 	bl	80002c8 <__aeabi_dsub>
 800d81c:	f805 6b01 	strb.w	r6, [r5], #1
 800d820:	eba5 060b 	sub.w	r6, r5, fp
 800d824:	45b1      	cmp	r9, r6
 800d826:	4602      	mov	r2, r0
 800d828:	460b      	mov	r3, r1
 800d82a:	d139      	bne.n	800d8a0 <_dtoa_r+0x6c8>
 800d82c:	f7f2 fd4e 	bl	80002cc <__adddf3>
 800d830:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d834:	4606      	mov	r6, r0
 800d836:	460f      	mov	r7, r1
 800d838:	f7f3 f98e 	bl	8000b58 <__aeabi_dcmpgt>
 800d83c:	b9c8      	cbnz	r0, 800d872 <_dtoa_r+0x69a>
 800d83e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d842:	4630      	mov	r0, r6
 800d844:	4639      	mov	r1, r7
 800d846:	f7f3 f95f 	bl	8000b08 <__aeabi_dcmpeq>
 800d84a:	b110      	cbz	r0, 800d852 <_dtoa_r+0x67a>
 800d84c:	f018 0f01 	tst.w	r8, #1
 800d850:	d10f      	bne.n	800d872 <_dtoa_r+0x69a>
 800d852:	9904      	ldr	r1, [sp, #16]
 800d854:	4620      	mov	r0, r4
 800d856:	f000 ffdd 	bl	800e814 <_Bfree>
 800d85a:	2300      	movs	r3, #0
 800d85c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d85e:	702b      	strb	r3, [r5, #0]
 800d860:	f10a 0301 	add.w	r3, sl, #1
 800d864:	6013      	str	r3, [r2, #0]
 800d866:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d868:	2b00      	cmp	r3, #0
 800d86a:	f000 8241 	beq.w	800dcf0 <_dtoa_r+0xb18>
 800d86e:	601d      	str	r5, [r3, #0]
 800d870:	e23e      	b.n	800dcf0 <_dtoa_r+0xb18>
 800d872:	f8cd a020 	str.w	sl, [sp, #32]
 800d876:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d87a:	2a39      	cmp	r2, #57	; 0x39
 800d87c:	f105 33ff 	add.w	r3, r5, #4294967295
 800d880:	d108      	bne.n	800d894 <_dtoa_r+0x6bc>
 800d882:	459b      	cmp	fp, r3
 800d884:	d10a      	bne.n	800d89c <_dtoa_r+0x6c4>
 800d886:	9b08      	ldr	r3, [sp, #32]
 800d888:	3301      	adds	r3, #1
 800d88a:	9308      	str	r3, [sp, #32]
 800d88c:	2330      	movs	r3, #48	; 0x30
 800d88e:	f88b 3000 	strb.w	r3, [fp]
 800d892:	465b      	mov	r3, fp
 800d894:	781a      	ldrb	r2, [r3, #0]
 800d896:	3201      	adds	r2, #1
 800d898:	701a      	strb	r2, [r3, #0]
 800d89a:	e78c      	b.n	800d7b6 <_dtoa_r+0x5de>
 800d89c:	461d      	mov	r5, r3
 800d89e:	e7ea      	b.n	800d876 <_dtoa_r+0x69e>
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	4b9b      	ldr	r3, [pc, #620]	; (800db10 <_dtoa_r+0x938>)
 800d8a4:	f7f2 fec8 	bl	8000638 <__aeabi_dmul>
 800d8a8:	2200      	movs	r2, #0
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	4606      	mov	r6, r0
 800d8ae:	460f      	mov	r7, r1
 800d8b0:	f7f3 f92a 	bl	8000b08 <__aeabi_dcmpeq>
 800d8b4:	2800      	cmp	r0, #0
 800d8b6:	d09a      	beq.n	800d7ee <_dtoa_r+0x616>
 800d8b8:	e7cb      	b.n	800d852 <_dtoa_r+0x67a>
 800d8ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8bc:	2a00      	cmp	r2, #0
 800d8be:	f000 808b 	beq.w	800d9d8 <_dtoa_r+0x800>
 800d8c2:	9a06      	ldr	r2, [sp, #24]
 800d8c4:	2a01      	cmp	r2, #1
 800d8c6:	dc6e      	bgt.n	800d9a6 <_dtoa_r+0x7ce>
 800d8c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d8ca:	2a00      	cmp	r2, #0
 800d8cc:	d067      	beq.n	800d99e <_dtoa_r+0x7c6>
 800d8ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d8d2:	9f07      	ldr	r7, [sp, #28]
 800d8d4:	9d05      	ldr	r5, [sp, #20]
 800d8d6:	9a05      	ldr	r2, [sp, #20]
 800d8d8:	2101      	movs	r1, #1
 800d8da:	441a      	add	r2, r3
 800d8dc:	4620      	mov	r0, r4
 800d8de:	9205      	str	r2, [sp, #20]
 800d8e0:	4498      	add	r8, r3
 800d8e2:	f001 f875 	bl	800e9d0 <__i2b>
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	2d00      	cmp	r5, #0
 800d8ea:	dd0c      	ble.n	800d906 <_dtoa_r+0x72e>
 800d8ec:	f1b8 0f00 	cmp.w	r8, #0
 800d8f0:	dd09      	ble.n	800d906 <_dtoa_r+0x72e>
 800d8f2:	4545      	cmp	r5, r8
 800d8f4:	9a05      	ldr	r2, [sp, #20]
 800d8f6:	462b      	mov	r3, r5
 800d8f8:	bfa8      	it	ge
 800d8fa:	4643      	movge	r3, r8
 800d8fc:	1ad2      	subs	r2, r2, r3
 800d8fe:	9205      	str	r2, [sp, #20]
 800d900:	1aed      	subs	r5, r5, r3
 800d902:	eba8 0803 	sub.w	r8, r8, r3
 800d906:	9b07      	ldr	r3, [sp, #28]
 800d908:	b1eb      	cbz	r3, 800d946 <_dtoa_r+0x76e>
 800d90a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d067      	beq.n	800d9e0 <_dtoa_r+0x808>
 800d910:	b18f      	cbz	r7, 800d936 <_dtoa_r+0x75e>
 800d912:	4631      	mov	r1, r6
 800d914:	463a      	mov	r2, r7
 800d916:	4620      	mov	r0, r4
 800d918:	f001 f8fa 	bl	800eb10 <__pow5mult>
 800d91c:	9a04      	ldr	r2, [sp, #16]
 800d91e:	4601      	mov	r1, r0
 800d920:	4606      	mov	r6, r0
 800d922:	4620      	mov	r0, r4
 800d924:	f001 f85d 	bl	800e9e2 <__multiply>
 800d928:	9904      	ldr	r1, [sp, #16]
 800d92a:	9008      	str	r0, [sp, #32]
 800d92c:	4620      	mov	r0, r4
 800d92e:	f000 ff71 	bl	800e814 <_Bfree>
 800d932:	9b08      	ldr	r3, [sp, #32]
 800d934:	9304      	str	r3, [sp, #16]
 800d936:	9b07      	ldr	r3, [sp, #28]
 800d938:	1bda      	subs	r2, r3, r7
 800d93a:	d004      	beq.n	800d946 <_dtoa_r+0x76e>
 800d93c:	9904      	ldr	r1, [sp, #16]
 800d93e:	4620      	mov	r0, r4
 800d940:	f001 f8e6 	bl	800eb10 <__pow5mult>
 800d944:	9004      	str	r0, [sp, #16]
 800d946:	2101      	movs	r1, #1
 800d948:	4620      	mov	r0, r4
 800d94a:	f001 f841 	bl	800e9d0 <__i2b>
 800d94e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d950:	4607      	mov	r7, r0
 800d952:	2b00      	cmp	r3, #0
 800d954:	f000 81d0 	beq.w	800dcf8 <_dtoa_r+0xb20>
 800d958:	461a      	mov	r2, r3
 800d95a:	4601      	mov	r1, r0
 800d95c:	4620      	mov	r0, r4
 800d95e:	f001 f8d7 	bl	800eb10 <__pow5mult>
 800d962:	9b06      	ldr	r3, [sp, #24]
 800d964:	2b01      	cmp	r3, #1
 800d966:	4607      	mov	r7, r0
 800d968:	dc40      	bgt.n	800d9ec <_dtoa_r+0x814>
 800d96a:	9b00      	ldr	r3, [sp, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d139      	bne.n	800d9e4 <_dtoa_r+0x80c>
 800d970:	9b01      	ldr	r3, [sp, #4]
 800d972:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d976:	2b00      	cmp	r3, #0
 800d978:	d136      	bne.n	800d9e8 <_dtoa_r+0x810>
 800d97a:	9b01      	ldr	r3, [sp, #4]
 800d97c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d980:	0d1b      	lsrs	r3, r3, #20
 800d982:	051b      	lsls	r3, r3, #20
 800d984:	b12b      	cbz	r3, 800d992 <_dtoa_r+0x7ba>
 800d986:	9b05      	ldr	r3, [sp, #20]
 800d988:	3301      	adds	r3, #1
 800d98a:	9305      	str	r3, [sp, #20]
 800d98c:	f108 0801 	add.w	r8, r8, #1
 800d990:	2301      	movs	r3, #1
 800d992:	9307      	str	r3, [sp, #28]
 800d994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d996:	2b00      	cmp	r3, #0
 800d998:	d12a      	bne.n	800d9f0 <_dtoa_r+0x818>
 800d99a:	2001      	movs	r0, #1
 800d99c:	e030      	b.n	800da00 <_dtoa_r+0x828>
 800d99e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d9a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d9a4:	e795      	b.n	800d8d2 <_dtoa_r+0x6fa>
 800d9a6:	9b07      	ldr	r3, [sp, #28]
 800d9a8:	f109 37ff 	add.w	r7, r9, #4294967295
 800d9ac:	42bb      	cmp	r3, r7
 800d9ae:	bfbf      	itttt	lt
 800d9b0:	9b07      	ldrlt	r3, [sp, #28]
 800d9b2:	9707      	strlt	r7, [sp, #28]
 800d9b4:	1afa      	sublt	r2, r7, r3
 800d9b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d9b8:	bfbb      	ittet	lt
 800d9ba:	189b      	addlt	r3, r3, r2
 800d9bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d9be:	1bdf      	subge	r7, r3, r7
 800d9c0:	2700      	movlt	r7, #0
 800d9c2:	f1b9 0f00 	cmp.w	r9, #0
 800d9c6:	bfb5      	itete	lt
 800d9c8:	9b05      	ldrlt	r3, [sp, #20]
 800d9ca:	9d05      	ldrge	r5, [sp, #20]
 800d9cc:	eba3 0509 	sublt.w	r5, r3, r9
 800d9d0:	464b      	movge	r3, r9
 800d9d2:	bfb8      	it	lt
 800d9d4:	2300      	movlt	r3, #0
 800d9d6:	e77e      	b.n	800d8d6 <_dtoa_r+0x6fe>
 800d9d8:	9f07      	ldr	r7, [sp, #28]
 800d9da:	9d05      	ldr	r5, [sp, #20]
 800d9dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d9de:	e783      	b.n	800d8e8 <_dtoa_r+0x710>
 800d9e0:	9a07      	ldr	r2, [sp, #28]
 800d9e2:	e7ab      	b.n	800d93c <_dtoa_r+0x764>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	e7d4      	b.n	800d992 <_dtoa_r+0x7ba>
 800d9e8:	9b00      	ldr	r3, [sp, #0]
 800d9ea:	e7d2      	b.n	800d992 <_dtoa_r+0x7ba>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	9307      	str	r3, [sp, #28]
 800d9f0:	693b      	ldr	r3, [r7, #16]
 800d9f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d9f6:	6918      	ldr	r0, [r3, #16]
 800d9f8:	f000 ff9c 	bl	800e934 <__hi0bits>
 800d9fc:	f1c0 0020 	rsb	r0, r0, #32
 800da00:	4440      	add	r0, r8
 800da02:	f010 001f 	ands.w	r0, r0, #31
 800da06:	d047      	beq.n	800da98 <_dtoa_r+0x8c0>
 800da08:	f1c0 0320 	rsb	r3, r0, #32
 800da0c:	2b04      	cmp	r3, #4
 800da0e:	dd3b      	ble.n	800da88 <_dtoa_r+0x8b0>
 800da10:	9b05      	ldr	r3, [sp, #20]
 800da12:	f1c0 001c 	rsb	r0, r0, #28
 800da16:	4403      	add	r3, r0
 800da18:	9305      	str	r3, [sp, #20]
 800da1a:	4405      	add	r5, r0
 800da1c:	4480      	add	r8, r0
 800da1e:	9b05      	ldr	r3, [sp, #20]
 800da20:	2b00      	cmp	r3, #0
 800da22:	dd05      	ble.n	800da30 <_dtoa_r+0x858>
 800da24:	461a      	mov	r2, r3
 800da26:	9904      	ldr	r1, [sp, #16]
 800da28:	4620      	mov	r0, r4
 800da2a:	f001 f8bf 	bl	800ebac <__lshift>
 800da2e:	9004      	str	r0, [sp, #16]
 800da30:	f1b8 0f00 	cmp.w	r8, #0
 800da34:	dd05      	ble.n	800da42 <_dtoa_r+0x86a>
 800da36:	4639      	mov	r1, r7
 800da38:	4642      	mov	r2, r8
 800da3a:	4620      	mov	r0, r4
 800da3c:	f001 f8b6 	bl	800ebac <__lshift>
 800da40:	4607      	mov	r7, r0
 800da42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da44:	b353      	cbz	r3, 800da9c <_dtoa_r+0x8c4>
 800da46:	4639      	mov	r1, r7
 800da48:	9804      	ldr	r0, [sp, #16]
 800da4a:	f001 f903 	bl	800ec54 <__mcmp>
 800da4e:	2800      	cmp	r0, #0
 800da50:	da24      	bge.n	800da9c <_dtoa_r+0x8c4>
 800da52:	2300      	movs	r3, #0
 800da54:	220a      	movs	r2, #10
 800da56:	9904      	ldr	r1, [sp, #16]
 800da58:	4620      	mov	r0, r4
 800da5a:	f000 fef2 	bl	800e842 <__multadd>
 800da5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da60:	9004      	str	r0, [sp, #16]
 800da62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800da66:	2b00      	cmp	r3, #0
 800da68:	f000 814d 	beq.w	800dd06 <_dtoa_r+0xb2e>
 800da6c:	2300      	movs	r3, #0
 800da6e:	4631      	mov	r1, r6
 800da70:	220a      	movs	r2, #10
 800da72:	4620      	mov	r0, r4
 800da74:	f000 fee5 	bl	800e842 <__multadd>
 800da78:	9b02      	ldr	r3, [sp, #8]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	4606      	mov	r6, r0
 800da7e:	dc4f      	bgt.n	800db20 <_dtoa_r+0x948>
 800da80:	9b06      	ldr	r3, [sp, #24]
 800da82:	2b02      	cmp	r3, #2
 800da84:	dd4c      	ble.n	800db20 <_dtoa_r+0x948>
 800da86:	e011      	b.n	800daac <_dtoa_r+0x8d4>
 800da88:	d0c9      	beq.n	800da1e <_dtoa_r+0x846>
 800da8a:	9a05      	ldr	r2, [sp, #20]
 800da8c:	331c      	adds	r3, #28
 800da8e:	441a      	add	r2, r3
 800da90:	9205      	str	r2, [sp, #20]
 800da92:	441d      	add	r5, r3
 800da94:	4498      	add	r8, r3
 800da96:	e7c2      	b.n	800da1e <_dtoa_r+0x846>
 800da98:	4603      	mov	r3, r0
 800da9a:	e7f6      	b.n	800da8a <_dtoa_r+0x8b2>
 800da9c:	f1b9 0f00 	cmp.w	r9, #0
 800daa0:	dc38      	bgt.n	800db14 <_dtoa_r+0x93c>
 800daa2:	9b06      	ldr	r3, [sp, #24]
 800daa4:	2b02      	cmp	r3, #2
 800daa6:	dd35      	ble.n	800db14 <_dtoa_r+0x93c>
 800daa8:	f8cd 9008 	str.w	r9, [sp, #8]
 800daac:	9b02      	ldr	r3, [sp, #8]
 800daae:	b963      	cbnz	r3, 800daca <_dtoa_r+0x8f2>
 800dab0:	4639      	mov	r1, r7
 800dab2:	2205      	movs	r2, #5
 800dab4:	4620      	mov	r0, r4
 800dab6:	f000 fec4 	bl	800e842 <__multadd>
 800daba:	4601      	mov	r1, r0
 800dabc:	4607      	mov	r7, r0
 800dabe:	9804      	ldr	r0, [sp, #16]
 800dac0:	f001 f8c8 	bl	800ec54 <__mcmp>
 800dac4:	2800      	cmp	r0, #0
 800dac6:	f73f adcc 	bgt.w	800d662 <_dtoa_r+0x48a>
 800daca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dacc:	465d      	mov	r5, fp
 800dace:	ea6f 0a03 	mvn.w	sl, r3
 800dad2:	f04f 0900 	mov.w	r9, #0
 800dad6:	4639      	mov	r1, r7
 800dad8:	4620      	mov	r0, r4
 800dada:	f000 fe9b 	bl	800e814 <_Bfree>
 800dade:	2e00      	cmp	r6, #0
 800dae0:	f43f aeb7 	beq.w	800d852 <_dtoa_r+0x67a>
 800dae4:	f1b9 0f00 	cmp.w	r9, #0
 800dae8:	d005      	beq.n	800daf6 <_dtoa_r+0x91e>
 800daea:	45b1      	cmp	r9, r6
 800daec:	d003      	beq.n	800daf6 <_dtoa_r+0x91e>
 800daee:	4649      	mov	r1, r9
 800daf0:	4620      	mov	r0, r4
 800daf2:	f000 fe8f 	bl	800e814 <_Bfree>
 800daf6:	4631      	mov	r1, r6
 800daf8:	4620      	mov	r0, r4
 800dafa:	f000 fe8b 	bl	800e814 <_Bfree>
 800dafe:	e6a8      	b.n	800d852 <_dtoa_r+0x67a>
 800db00:	2700      	movs	r7, #0
 800db02:	463e      	mov	r6, r7
 800db04:	e7e1      	b.n	800daca <_dtoa_r+0x8f2>
 800db06:	f8dd a020 	ldr.w	sl, [sp, #32]
 800db0a:	463e      	mov	r6, r7
 800db0c:	e5a9      	b.n	800d662 <_dtoa_r+0x48a>
 800db0e:	bf00      	nop
 800db10:	40240000 	.word	0x40240000
 800db14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db16:	f8cd 9008 	str.w	r9, [sp, #8]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	f000 80fa 	beq.w	800dd14 <_dtoa_r+0xb3c>
 800db20:	2d00      	cmp	r5, #0
 800db22:	dd05      	ble.n	800db30 <_dtoa_r+0x958>
 800db24:	4631      	mov	r1, r6
 800db26:	462a      	mov	r2, r5
 800db28:	4620      	mov	r0, r4
 800db2a:	f001 f83f 	bl	800ebac <__lshift>
 800db2e:	4606      	mov	r6, r0
 800db30:	9b07      	ldr	r3, [sp, #28]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d04c      	beq.n	800dbd0 <_dtoa_r+0x9f8>
 800db36:	6871      	ldr	r1, [r6, #4]
 800db38:	4620      	mov	r0, r4
 800db3a:	f000 fe37 	bl	800e7ac <_Balloc>
 800db3e:	6932      	ldr	r2, [r6, #16]
 800db40:	3202      	adds	r2, #2
 800db42:	4605      	mov	r5, r0
 800db44:	0092      	lsls	r2, r2, #2
 800db46:	f106 010c 	add.w	r1, r6, #12
 800db4a:	300c      	adds	r0, #12
 800db4c:	f7fd fe54 	bl	800b7f8 <memcpy>
 800db50:	2201      	movs	r2, #1
 800db52:	4629      	mov	r1, r5
 800db54:	4620      	mov	r0, r4
 800db56:	f001 f829 	bl	800ebac <__lshift>
 800db5a:	9b00      	ldr	r3, [sp, #0]
 800db5c:	f8cd b014 	str.w	fp, [sp, #20]
 800db60:	f003 0301 	and.w	r3, r3, #1
 800db64:	46b1      	mov	r9, r6
 800db66:	9307      	str	r3, [sp, #28]
 800db68:	4606      	mov	r6, r0
 800db6a:	4639      	mov	r1, r7
 800db6c:	9804      	ldr	r0, [sp, #16]
 800db6e:	f7ff faa5 	bl	800d0bc <quorem>
 800db72:	4649      	mov	r1, r9
 800db74:	4605      	mov	r5, r0
 800db76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800db7a:	9804      	ldr	r0, [sp, #16]
 800db7c:	f001 f86a 	bl	800ec54 <__mcmp>
 800db80:	4632      	mov	r2, r6
 800db82:	9000      	str	r0, [sp, #0]
 800db84:	4639      	mov	r1, r7
 800db86:	4620      	mov	r0, r4
 800db88:	f001 f87e 	bl	800ec88 <__mdiff>
 800db8c:	68c3      	ldr	r3, [r0, #12]
 800db8e:	4602      	mov	r2, r0
 800db90:	bb03      	cbnz	r3, 800dbd4 <_dtoa_r+0x9fc>
 800db92:	4601      	mov	r1, r0
 800db94:	9008      	str	r0, [sp, #32]
 800db96:	9804      	ldr	r0, [sp, #16]
 800db98:	f001 f85c 	bl	800ec54 <__mcmp>
 800db9c:	9a08      	ldr	r2, [sp, #32]
 800db9e:	4603      	mov	r3, r0
 800dba0:	4611      	mov	r1, r2
 800dba2:	4620      	mov	r0, r4
 800dba4:	9308      	str	r3, [sp, #32]
 800dba6:	f000 fe35 	bl	800e814 <_Bfree>
 800dbaa:	9b08      	ldr	r3, [sp, #32]
 800dbac:	b9a3      	cbnz	r3, 800dbd8 <_dtoa_r+0xa00>
 800dbae:	9a06      	ldr	r2, [sp, #24]
 800dbb0:	b992      	cbnz	r2, 800dbd8 <_dtoa_r+0xa00>
 800dbb2:	9a07      	ldr	r2, [sp, #28]
 800dbb4:	b982      	cbnz	r2, 800dbd8 <_dtoa_r+0xa00>
 800dbb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dbba:	d029      	beq.n	800dc10 <_dtoa_r+0xa38>
 800dbbc:	9b00      	ldr	r3, [sp, #0]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	dd01      	ble.n	800dbc6 <_dtoa_r+0x9ee>
 800dbc2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800dbc6:	9b05      	ldr	r3, [sp, #20]
 800dbc8:	1c5d      	adds	r5, r3, #1
 800dbca:	f883 8000 	strb.w	r8, [r3]
 800dbce:	e782      	b.n	800dad6 <_dtoa_r+0x8fe>
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	e7c2      	b.n	800db5a <_dtoa_r+0x982>
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	e7e3      	b.n	800dba0 <_dtoa_r+0x9c8>
 800dbd8:	9a00      	ldr	r2, [sp, #0]
 800dbda:	2a00      	cmp	r2, #0
 800dbdc:	db04      	blt.n	800dbe8 <_dtoa_r+0xa10>
 800dbde:	d125      	bne.n	800dc2c <_dtoa_r+0xa54>
 800dbe0:	9a06      	ldr	r2, [sp, #24]
 800dbe2:	bb1a      	cbnz	r2, 800dc2c <_dtoa_r+0xa54>
 800dbe4:	9a07      	ldr	r2, [sp, #28]
 800dbe6:	bb0a      	cbnz	r2, 800dc2c <_dtoa_r+0xa54>
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	ddec      	ble.n	800dbc6 <_dtoa_r+0x9ee>
 800dbec:	2201      	movs	r2, #1
 800dbee:	9904      	ldr	r1, [sp, #16]
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f000 ffdb 	bl	800ebac <__lshift>
 800dbf6:	4639      	mov	r1, r7
 800dbf8:	9004      	str	r0, [sp, #16]
 800dbfa:	f001 f82b 	bl	800ec54 <__mcmp>
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	dc03      	bgt.n	800dc0a <_dtoa_r+0xa32>
 800dc02:	d1e0      	bne.n	800dbc6 <_dtoa_r+0x9ee>
 800dc04:	f018 0f01 	tst.w	r8, #1
 800dc08:	d0dd      	beq.n	800dbc6 <_dtoa_r+0x9ee>
 800dc0a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc0e:	d1d8      	bne.n	800dbc2 <_dtoa_r+0x9ea>
 800dc10:	9b05      	ldr	r3, [sp, #20]
 800dc12:	9a05      	ldr	r2, [sp, #20]
 800dc14:	1c5d      	adds	r5, r3, #1
 800dc16:	2339      	movs	r3, #57	; 0x39
 800dc18:	7013      	strb	r3, [r2, #0]
 800dc1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc1e:	2b39      	cmp	r3, #57	; 0x39
 800dc20:	f105 32ff 	add.w	r2, r5, #4294967295
 800dc24:	d04f      	beq.n	800dcc6 <_dtoa_r+0xaee>
 800dc26:	3301      	adds	r3, #1
 800dc28:	7013      	strb	r3, [r2, #0]
 800dc2a:	e754      	b.n	800dad6 <_dtoa_r+0x8fe>
 800dc2c:	9a05      	ldr	r2, [sp, #20]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	f102 0501 	add.w	r5, r2, #1
 800dc34:	dd06      	ble.n	800dc44 <_dtoa_r+0xa6c>
 800dc36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc3a:	d0e9      	beq.n	800dc10 <_dtoa_r+0xa38>
 800dc3c:	f108 0801 	add.w	r8, r8, #1
 800dc40:	9b05      	ldr	r3, [sp, #20]
 800dc42:	e7c2      	b.n	800dbca <_dtoa_r+0x9f2>
 800dc44:	9a02      	ldr	r2, [sp, #8]
 800dc46:	f805 8c01 	strb.w	r8, [r5, #-1]
 800dc4a:	eba5 030b 	sub.w	r3, r5, fp
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d021      	beq.n	800dc96 <_dtoa_r+0xabe>
 800dc52:	2300      	movs	r3, #0
 800dc54:	220a      	movs	r2, #10
 800dc56:	9904      	ldr	r1, [sp, #16]
 800dc58:	4620      	mov	r0, r4
 800dc5a:	f000 fdf2 	bl	800e842 <__multadd>
 800dc5e:	45b1      	cmp	r9, r6
 800dc60:	9004      	str	r0, [sp, #16]
 800dc62:	f04f 0300 	mov.w	r3, #0
 800dc66:	f04f 020a 	mov.w	r2, #10
 800dc6a:	4649      	mov	r1, r9
 800dc6c:	4620      	mov	r0, r4
 800dc6e:	d105      	bne.n	800dc7c <_dtoa_r+0xaa4>
 800dc70:	f000 fde7 	bl	800e842 <__multadd>
 800dc74:	4681      	mov	r9, r0
 800dc76:	4606      	mov	r6, r0
 800dc78:	9505      	str	r5, [sp, #20]
 800dc7a:	e776      	b.n	800db6a <_dtoa_r+0x992>
 800dc7c:	f000 fde1 	bl	800e842 <__multadd>
 800dc80:	4631      	mov	r1, r6
 800dc82:	4681      	mov	r9, r0
 800dc84:	2300      	movs	r3, #0
 800dc86:	220a      	movs	r2, #10
 800dc88:	4620      	mov	r0, r4
 800dc8a:	f000 fdda 	bl	800e842 <__multadd>
 800dc8e:	4606      	mov	r6, r0
 800dc90:	e7f2      	b.n	800dc78 <_dtoa_r+0xaa0>
 800dc92:	f04f 0900 	mov.w	r9, #0
 800dc96:	2201      	movs	r2, #1
 800dc98:	9904      	ldr	r1, [sp, #16]
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f000 ff86 	bl	800ebac <__lshift>
 800dca0:	4639      	mov	r1, r7
 800dca2:	9004      	str	r0, [sp, #16]
 800dca4:	f000 ffd6 	bl	800ec54 <__mcmp>
 800dca8:	2800      	cmp	r0, #0
 800dcaa:	dcb6      	bgt.n	800dc1a <_dtoa_r+0xa42>
 800dcac:	d102      	bne.n	800dcb4 <_dtoa_r+0xadc>
 800dcae:	f018 0f01 	tst.w	r8, #1
 800dcb2:	d1b2      	bne.n	800dc1a <_dtoa_r+0xa42>
 800dcb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dcb8:	2b30      	cmp	r3, #48	; 0x30
 800dcba:	f105 32ff 	add.w	r2, r5, #4294967295
 800dcbe:	f47f af0a 	bne.w	800dad6 <_dtoa_r+0x8fe>
 800dcc2:	4615      	mov	r5, r2
 800dcc4:	e7f6      	b.n	800dcb4 <_dtoa_r+0xadc>
 800dcc6:	4593      	cmp	fp, r2
 800dcc8:	d105      	bne.n	800dcd6 <_dtoa_r+0xafe>
 800dcca:	2331      	movs	r3, #49	; 0x31
 800dccc:	f10a 0a01 	add.w	sl, sl, #1
 800dcd0:	f88b 3000 	strb.w	r3, [fp]
 800dcd4:	e6ff      	b.n	800dad6 <_dtoa_r+0x8fe>
 800dcd6:	4615      	mov	r5, r2
 800dcd8:	e79f      	b.n	800dc1a <_dtoa_r+0xa42>
 800dcda:	f8df b064 	ldr.w	fp, [pc, #100]	; 800dd40 <_dtoa_r+0xb68>
 800dcde:	e007      	b.n	800dcf0 <_dtoa_r+0xb18>
 800dce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dce2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800dd44 <_dtoa_r+0xb6c>
 800dce6:	b11b      	cbz	r3, 800dcf0 <_dtoa_r+0xb18>
 800dce8:	f10b 0308 	add.w	r3, fp, #8
 800dcec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dcee:	6013      	str	r3, [r2, #0]
 800dcf0:	4658      	mov	r0, fp
 800dcf2:	b017      	add	sp, #92	; 0x5c
 800dcf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf8:	9b06      	ldr	r3, [sp, #24]
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	f77f ae35 	ble.w	800d96a <_dtoa_r+0x792>
 800dd00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd02:	9307      	str	r3, [sp, #28]
 800dd04:	e649      	b.n	800d99a <_dtoa_r+0x7c2>
 800dd06:	9b02      	ldr	r3, [sp, #8]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	dc03      	bgt.n	800dd14 <_dtoa_r+0xb3c>
 800dd0c:	9b06      	ldr	r3, [sp, #24]
 800dd0e:	2b02      	cmp	r3, #2
 800dd10:	f73f aecc 	bgt.w	800daac <_dtoa_r+0x8d4>
 800dd14:	465d      	mov	r5, fp
 800dd16:	4639      	mov	r1, r7
 800dd18:	9804      	ldr	r0, [sp, #16]
 800dd1a:	f7ff f9cf 	bl	800d0bc <quorem>
 800dd1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dd22:	f805 8b01 	strb.w	r8, [r5], #1
 800dd26:	9a02      	ldr	r2, [sp, #8]
 800dd28:	eba5 030b 	sub.w	r3, r5, fp
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	ddb0      	ble.n	800dc92 <_dtoa_r+0xaba>
 800dd30:	2300      	movs	r3, #0
 800dd32:	220a      	movs	r2, #10
 800dd34:	9904      	ldr	r1, [sp, #16]
 800dd36:	4620      	mov	r0, r4
 800dd38:	f000 fd83 	bl	800e842 <__multadd>
 800dd3c:	9004      	str	r0, [sp, #16]
 800dd3e:	e7ea      	b.n	800dd16 <_dtoa_r+0xb3e>
 800dd40:	080100ac 	.word	0x080100ac
 800dd44:	08010120 	.word	0x08010120

0800dd48 <__sflush_r>:
 800dd48:	898a      	ldrh	r2, [r1, #12]
 800dd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd4e:	4605      	mov	r5, r0
 800dd50:	0710      	lsls	r0, r2, #28
 800dd52:	460c      	mov	r4, r1
 800dd54:	d458      	bmi.n	800de08 <__sflush_r+0xc0>
 800dd56:	684b      	ldr	r3, [r1, #4]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	dc05      	bgt.n	800dd68 <__sflush_r+0x20>
 800dd5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	dc02      	bgt.n	800dd68 <__sflush_r+0x20>
 800dd62:	2000      	movs	r0, #0
 800dd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd6a:	2e00      	cmp	r6, #0
 800dd6c:	d0f9      	beq.n	800dd62 <__sflush_r+0x1a>
 800dd6e:	2300      	movs	r3, #0
 800dd70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dd74:	682f      	ldr	r7, [r5, #0]
 800dd76:	6a21      	ldr	r1, [r4, #32]
 800dd78:	602b      	str	r3, [r5, #0]
 800dd7a:	d032      	beq.n	800dde2 <__sflush_r+0x9a>
 800dd7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dd7e:	89a3      	ldrh	r3, [r4, #12]
 800dd80:	075a      	lsls	r2, r3, #29
 800dd82:	d505      	bpl.n	800dd90 <__sflush_r+0x48>
 800dd84:	6863      	ldr	r3, [r4, #4]
 800dd86:	1ac0      	subs	r0, r0, r3
 800dd88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dd8a:	b10b      	cbz	r3, 800dd90 <__sflush_r+0x48>
 800dd8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd8e:	1ac0      	subs	r0, r0, r3
 800dd90:	2300      	movs	r3, #0
 800dd92:	4602      	mov	r2, r0
 800dd94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dd96:	6a21      	ldr	r1, [r4, #32]
 800dd98:	4628      	mov	r0, r5
 800dd9a:	47b0      	blx	r6
 800dd9c:	1c43      	adds	r3, r0, #1
 800dd9e:	89a3      	ldrh	r3, [r4, #12]
 800dda0:	d106      	bne.n	800ddb0 <__sflush_r+0x68>
 800dda2:	6829      	ldr	r1, [r5, #0]
 800dda4:	291d      	cmp	r1, #29
 800dda6:	d848      	bhi.n	800de3a <__sflush_r+0xf2>
 800dda8:	4a29      	ldr	r2, [pc, #164]	; (800de50 <__sflush_r+0x108>)
 800ddaa:	40ca      	lsrs	r2, r1
 800ddac:	07d6      	lsls	r6, r2, #31
 800ddae:	d544      	bpl.n	800de3a <__sflush_r+0xf2>
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	6062      	str	r2, [r4, #4]
 800ddb4:	04d9      	lsls	r1, r3, #19
 800ddb6:	6922      	ldr	r2, [r4, #16]
 800ddb8:	6022      	str	r2, [r4, #0]
 800ddba:	d504      	bpl.n	800ddc6 <__sflush_r+0x7e>
 800ddbc:	1c42      	adds	r2, r0, #1
 800ddbe:	d101      	bne.n	800ddc4 <__sflush_r+0x7c>
 800ddc0:	682b      	ldr	r3, [r5, #0]
 800ddc2:	b903      	cbnz	r3, 800ddc6 <__sflush_r+0x7e>
 800ddc4:	6560      	str	r0, [r4, #84]	; 0x54
 800ddc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ddc8:	602f      	str	r7, [r5, #0]
 800ddca:	2900      	cmp	r1, #0
 800ddcc:	d0c9      	beq.n	800dd62 <__sflush_r+0x1a>
 800ddce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ddd2:	4299      	cmp	r1, r3
 800ddd4:	d002      	beq.n	800dddc <__sflush_r+0x94>
 800ddd6:	4628      	mov	r0, r5
 800ddd8:	f001 f8f6 	bl	800efc8 <_free_r>
 800dddc:	2000      	movs	r0, #0
 800ddde:	6360      	str	r0, [r4, #52]	; 0x34
 800dde0:	e7c0      	b.n	800dd64 <__sflush_r+0x1c>
 800dde2:	2301      	movs	r3, #1
 800dde4:	4628      	mov	r0, r5
 800dde6:	47b0      	blx	r6
 800dde8:	1c41      	adds	r1, r0, #1
 800ddea:	d1c8      	bne.n	800dd7e <__sflush_r+0x36>
 800ddec:	682b      	ldr	r3, [r5, #0]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d0c5      	beq.n	800dd7e <__sflush_r+0x36>
 800ddf2:	2b1d      	cmp	r3, #29
 800ddf4:	d001      	beq.n	800ddfa <__sflush_r+0xb2>
 800ddf6:	2b16      	cmp	r3, #22
 800ddf8:	d101      	bne.n	800ddfe <__sflush_r+0xb6>
 800ddfa:	602f      	str	r7, [r5, #0]
 800ddfc:	e7b1      	b.n	800dd62 <__sflush_r+0x1a>
 800ddfe:	89a3      	ldrh	r3, [r4, #12]
 800de00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de04:	81a3      	strh	r3, [r4, #12]
 800de06:	e7ad      	b.n	800dd64 <__sflush_r+0x1c>
 800de08:	690f      	ldr	r7, [r1, #16]
 800de0a:	2f00      	cmp	r7, #0
 800de0c:	d0a9      	beq.n	800dd62 <__sflush_r+0x1a>
 800de0e:	0793      	lsls	r3, r2, #30
 800de10:	680e      	ldr	r6, [r1, #0]
 800de12:	bf08      	it	eq
 800de14:	694b      	ldreq	r3, [r1, #20]
 800de16:	600f      	str	r7, [r1, #0]
 800de18:	bf18      	it	ne
 800de1a:	2300      	movne	r3, #0
 800de1c:	eba6 0807 	sub.w	r8, r6, r7
 800de20:	608b      	str	r3, [r1, #8]
 800de22:	f1b8 0f00 	cmp.w	r8, #0
 800de26:	dd9c      	ble.n	800dd62 <__sflush_r+0x1a>
 800de28:	4643      	mov	r3, r8
 800de2a:	463a      	mov	r2, r7
 800de2c:	6a21      	ldr	r1, [r4, #32]
 800de2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de30:	4628      	mov	r0, r5
 800de32:	47b0      	blx	r6
 800de34:	2800      	cmp	r0, #0
 800de36:	dc06      	bgt.n	800de46 <__sflush_r+0xfe>
 800de38:	89a3      	ldrh	r3, [r4, #12]
 800de3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de3e:	81a3      	strh	r3, [r4, #12]
 800de40:	f04f 30ff 	mov.w	r0, #4294967295
 800de44:	e78e      	b.n	800dd64 <__sflush_r+0x1c>
 800de46:	4407      	add	r7, r0
 800de48:	eba8 0800 	sub.w	r8, r8, r0
 800de4c:	e7e9      	b.n	800de22 <__sflush_r+0xda>
 800de4e:	bf00      	nop
 800de50:	20400001 	.word	0x20400001

0800de54 <_fflush_r>:
 800de54:	b538      	push	{r3, r4, r5, lr}
 800de56:	690b      	ldr	r3, [r1, #16]
 800de58:	4605      	mov	r5, r0
 800de5a:	460c      	mov	r4, r1
 800de5c:	b1db      	cbz	r3, 800de96 <_fflush_r+0x42>
 800de5e:	b118      	cbz	r0, 800de68 <_fflush_r+0x14>
 800de60:	6983      	ldr	r3, [r0, #24]
 800de62:	b90b      	cbnz	r3, 800de68 <_fflush_r+0x14>
 800de64:	f000 f860 	bl	800df28 <__sinit>
 800de68:	4b0c      	ldr	r3, [pc, #48]	; (800de9c <_fflush_r+0x48>)
 800de6a:	429c      	cmp	r4, r3
 800de6c:	d109      	bne.n	800de82 <_fflush_r+0x2e>
 800de6e:	686c      	ldr	r4, [r5, #4]
 800de70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de74:	b17b      	cbz	r3, 800de96 <_fflush_r+0x42>
 800de76:	4621      	mov	r1, r4
 800de78:	4628      	mov	r0, r5
 800de7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de7e:	f7ff bf63 	b.w	800dd48 <__sflush_r>
 800de82:	4b07      	ldr	r3, [pc, #28]	; (800dea0 <_fflush_r+0x4c>)
 800de84:	429c      	cmp	r4, r3
 800de86:	d101      	bne.n	800de8c <_fflush_r+0x38>
 800de88:	68ac      	ldr	r4, [r5, #8]
 800de8a:	e7f1      	b.n	800de70 <_fflush_r+0x1c>
 800de8c:	4b05      	ldr	r3, [pc, #20]	; (800dea4 <_fflush_r+0x50>)
 800de8e:	429c      	cmp	r4, r3
 800de90:	bf08      	it	eq
 800de92:	68ec      	ldreq	r4, [r5, #12]
 800de94:	e7ec      	b.n	800de70 <_fflush_r+0x1c>
 800de96:	2000      	movs	r0, #0
 800de98:	bd38      	pop	{r3, r4, r5, pc}
 800de9a:	bf00      	nop
 800de9c:	08010150 	.word	0x08010150
 800dea0:	08010170 	.word	0x08010170
 800dea4:	08010130 	.word	0x08010130

0800dea8 <std>:
 800dea8:	2300      	movs	r3, #0
 800deaa:	b510      	push	{r4, lr}
 800deac:	4604      	mov	r4, r0
 800deae:	e9c0 3300 	strd	r3, r3, [r0]
 800deb2:	6083      	str	r3, [r0, #8]
 800deb4:	8181      	strh	r1, [r0, #12]
 800deb6:	6643      	str	r3, [r0, #100]	; 0x64
 800deb8:	81c2      	strh	r2, [r0, #14]
 800deba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800debe:	6183      	str	r3, [r0, #24]
 800dec0:	4619      	mov	r1, r3
 800dec2:	2208      	movs	r2, #8
 800dec4:	305c      	adds	r0, #92	; 0x5c
 800dec6:	f7fd fca2 	bl	800b80e <memset>
 800deca:	4b05      	ldr	r3, [pc, #20]	; (800dee0 <std+0x38>)
 800decc:	6263      	str	r3, [r4, #36]	; 0x24
 800dece:	4b05      	ldr	r3, [pc, #20]	; (800dee4 <std+0x3c>)
 800ded0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ded2:	4b05      	ldr	r3, [pc, #20]	; (800dee8 <std+0x40>)
 800ded4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ded6:	4b05      	ldr	r3, [pc, #20]	; (800deec <std+0x44>)
 800ded8:	6224      	str	r4, [r4, #32]
 800deda:	6323      	str	r3, [r4, #48]	; 0x30
 800dedc:	bd10      	pop	{r4, pc}
 800dede:	bf00      	nop
 800dee0:	0800f3b9 	.word	0x0800f3b9
 800dee4:	0800f3db 	.word	0x0800f3db
 800dee8:	0800f413 	.word	0x0800f413
 800deec:	0800f437 	.word	0x0800f437

0800def0 <_cleanup_r>:
 800def0:	4901      	ldr	r1, [pc, #4]	; (800def8 <_cleanup_r+0x8>)
 800def2:	f000 b885 	b.w	800e000 <_fwalk_reent>
 800def6:	bf00      	nop
 800def8:	0800de55 	.word	0x0800de55

0800defc <__sfmoreglue>:
 800defc:	b570      	push	{r4, r5, r6, lr}
 800defe:	1e4a      	subs	r2, r1, #1
 800df00:	2568      	movs	r5, #104	; 0x68
 800df02:	4355      	muls	r5, r2
 800df04:	460e      	mov	r6, r1
 800df06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df0a:	f001 f8ab 	bl	800f064 <_malloc_r>
 800df0e:	4604      	mov	r4, r0
 800df10:	b140      	cbz	r0, 800df24 <__sfmoreglue+0x28>
 800df12:	2100      	movs	r1, #0
 800df14:	e9c0 1600 	strd	r1, r6, [r0]
 800df18:	300c      	adds	r0, #12
 800df1a:	60a0      	str	r0, [r4, #8]
 800df1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df20:	f7fd fc75 	bl	800b80e <memset>
 800df24:	4620      	mov	r0, r4
 800df26:	bd70      	pop	{r4, r5, r6, pc}

0800df28 <__sinit>:
 800df28:	6983      	ldr	r3, [r0, #24]
 800df2a:	b510      	push	{r4, lr}
 800df2c:	4604      	mov	r4, r0
 800df2e:	bb33      	cbnz	r3, 800df7e <__sinit+0x56>
 800df30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800df34:	6503      	str	r3, [r0, #80]	; 0x50
 800df36:	4b12      	ldr	r3, [pc, #72]	; (800df80 <__sinit+0x58>)
 800df38:	4a12      	ldr	r2, [pc, #72]	; (800df84 <__sinit+0x5c>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	6282      	str	r2, [r0, #40]	; 0x28
 800df3e:	4298      	cmp	r0, r3
 800df40:	bf04      	itt	eq
 800df42:	2301      	moveq	r3, #1
 800df44:	6183      	streq	r3, [r0, #24]
 800df46:	f000 f81f 	bl	800df88 <__sfp>
 800df4a:	6060      	str	r0, [r4, #4]
 800df4c:	4620      	mov	r0, r4
 800df4e:	f000 f81b 	bl	800df88 <__sfp>
 800df52:	60a0      	str	r0, [r4, #8]
 800df54:	4620      	mov	r0, r4
 800df56:	f000 f817 	bl	800df88 <__sfp>
 800df5a:	2200      	movs	r2, #0
 800df5c:	60e0      	str	r0, [r4, #12]
 800df5e:	2104      	movs	r1, #4
 800df60:	6860      	ldr	r0, [r4, #4]
 800df62:	f7ff ffa1 	bl	800dea8 <std>
 800df66:	2201      	movs	r2, #1
 800df68:	2109      	movs	r1, #9
 800df6a:	68a0      	ldr	r0, [r4, #8]
 800df6c:	f7ff ff9c 	bl	800dea8 <std>
 800df70:	2202      	movs	r2, #2
 800df72:	2112      	movs	r1, #18
 800df74:	68e0      	ldr	r0, [r4, #12]
 800df76:	f7ff ff97 	bl	800dea8 <std>
 800df7a:	2301      	movs	r3, #1
 800df7c:	61a3      	str	r3, [r4, #24]
 800df7e:	bd10      	pop	{r4, pc}
 800df80:	08010098 	.word	0x08010098
 800df84:	0800def1 	.word	0x0800def1

0800df88 <__sfp>:
 800df88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df8a:	4b1b      	ldr	r3, [pc, #108]	; (800dff8 <__sfp+0x70>)
 800df8c:	681e      	ldr	r6, [r3, #0]
 800df8e:	69b3      	ldr	r3, [r6, #24]
 800df90:	4607      	mov	r7, r0
 800df92:	b913      	cbnz	r3, 800df9a <__sfp+0x12>
 800df94:	4630      	mov	r0, r6
 800df96:	f7ff ffc7 	bl	800df28 <__sinit>
 800df9a:	3648      	adds	r6, #72	; 0x48
 800df9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dfa0:	3b01      	subs	r3, #1
 800dfa2:	d503      	bpl.n	800dfac <__sfp+0x24>
 800dfa4:	6833      	ldr	r3, [r6, #0]
 800dfa6:	b133      	cbz	r3, 800dfb6 <__sfp+0x2e>
 800dfa8:	6836      	ldr	r6, [r6, #0]
 800dfaa:	e7f7      	b.n	800df9c <__sfp+0x14>
 800dfac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dfb0:	b16d      	cbz	r5, 800dfce <__sfp+0x46>
 800dfb2:	3468      	adds	r4, #104	; 0x68
 800dfb4:	e7f4      	b.n	800dfa0 <__sfp+0x18>
 800dfb6:	2104      	movs	r1, #4
 800dfb8:	4638      	mov	r0, r7
 800dfba:	f7ff ff9f 	bl	800defc <__sfmoreglue>
 800dfbe:	6030      	str	r0, [r6, #0]
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d1f1      	bne.n	800dfa8 <__sfp+0x20>
 800dfc4:	230c      	movs	r3, #12
 800dfc6:	603b      	str	r3, [r7, #0]
 800dfc8:	4604      	mov	r4, r0
 800dfca:	4620      	mov	r0, r4
 800dfcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfce:	4b0b      	ldr	r3, [pc, #44]	; (800dffc <__sfp+0x74>)
 800dfd0:	6665      	str	r5, [r4, #100]	; 0x64
 800dfd2:	e9c4 5500 	strd	r5, r5, [r4]
 800dfd6:	60a5      	str	r5, [r4, #8]
 800dfd8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800dfdc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800dfe0:	2208      	movs	r2, #8
 800dfe2:	4629      	mov	r1, r5
 800dfe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dfe8:	f7fd fc11 	bl	800b80e <memset>
 800dfec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dff0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dff4:	e7e9      	b.n	800dfca <__sfp+0x42>
 800dff6:	bf00      	nop
 800dff8:	08010098 	.word	0x08010098
 800dffc:	ffff0001 	.word	0xffff0001

0800e000 <_fwalk_reent>:
 800e000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e004:	4680      	mov	r8, r0
 800e006:	4689      	mov	r9, r1
 800e008:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e00c:	2600      	movs	r6, #0
 800e00e:	b914      	cbnz	r4, 800e016 <_fwalk_reent+0x16>
 800e010:	4630      	mov	r0, r6
 800e012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e016:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e01a:	3f01      	subs	r7, #1
 800e01c:	d501      	bpl.n	800e022 <_fwalk_reent+0x22>
 800e01e:	6824      	ldr	r4, [r4, #0]
 800e020:	e7f5      	b.n	800e00e <_fwalk_reent+0xe>
 800e022:	89ab      	ldrh	r3, [r5, #12]
 800e024:	2b01      	cmp	r3, #1
 800e026:	d907      	bls.n	800e038 <_fwalk_reent+0x38>
 800e028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e02c:	3301      	adds	r3, #1
 800e02e:	d003      	beq.n	800e038 <_fwalk_reent+0x38>
 800e030:	4629      	mov	r1, r5
 800e032:	4640      	mov	r0, r8
 800e034:	47c8      	blx	r9
 800e036:	4306      	orrs	r6, r0
 800e038:	3568      	adds	r5, #104	; 0x68
 800e03a:	e7ee      	b.n	800e01a <_fwalk_reent+0x1a>

0800e03c <rshift>:
 800e03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e03e:	6906      	ldr	r6, [r0, #16]
 800e040:	114b      	asrs	r3, r1, #5
 800e042:	429e      	cmp	r6, r3
 800e044:	f100 0414 	add.w	r4, r0, #20
 800e048:	dd30      	ble.n	800e0ac <rshift+0x70>
 800e04a:	f011 011f 	ands.w	r1, r1, #31
 800e04e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800e052:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800e056:	d108      	bne.n	800e06a <rshift+0x2e>
 800e058:	4621      	mov	r1, r4
 800e05a:	42b2      	cmp	r2, r6
 800e05c:	460b      	mov	r3, r1
 800e05e:	d211      	bcs.n	800e084 <rshift+0x48>
 800e060:	f852 3b04 	ldr.w	r3, [r2], #4
 800e064:	f841 3b04 	str.w	r3, [r1], #4
 800e068:	e7f7      	b.n	800e05a <rshift+0x1e>
 800e06a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800e06e:	f1c1 0c20 	rsb	ip, r1, #32
 800e072:	40cd      	lsrs	r5, r1
 800e074:	3204      	adds	r2, #4
 800e076:	4623      	mov	r3, r4
 800e078:	42b2      	cmp	r2, r6
 800e07a:	4617      	mov	r7, r2
 800e07c:	d30c      	bcc.n	800e098 <rshift+0x5c>
 800e07e:	601d      	str	r5, [r3, #0]
 800e080:	b105      	cbz	r5, 800e084 <rshift+0x48>
 800e082:	3304      	adds	r3, #4
 800e084:	1b1a      	subs	r2, r3, r4
 800e086:	42a3      	cmp	r3, r4
 800e088:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e08c:	bf08      	it	eq
 800e08e:	2300      	moveq	r3, #0
 800e090:	6102      	str	r2, [r0, #16]
 800e092:	bf08      	it	eq
 800e094:	6143      	streq	r3, [r0, #20]
 800e096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e098:	683f      	ldr	r7, [r7, #0]
 800e09a:	fa07 f70c 	lsl.w	r7, r7, ip
 800e09e:	433d      	orrs	r5, r7
 800e0a0:	f843 5b04 	str.w	r5, [r3], #4
 800e0a4:	f852 5b04 	ldr.w	r5, [r2], #4
 800e0a8:	40cd      	lsrs	r5, r1
 800e0aa:	e7e5      	b.n	800e078 <rshift+0x3c>
 800e0ac:	4623      	mov	r3, r4
 800e0ae:	e7e9      	b.n	800e084 <rshift+0x48>

0800e0b0 <__hexdig_fun>:
 800e0b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e0b4:	2b09      	cmp	r3, #9
 800e0b6:	d802      	bhi.n	800e0be <__hexdig_fun+0xe>
 800e0b8:	3820      	subs	r0, #32
 800e0ba:	b2c0      	uxtb	r0, r0
 800e0bc:	4770      	bx	lr
 800e0be:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e0c2:	2b05      	cmp	r3, #5
 800e0c4:	d801      	bhi.n	800e0ca <__hexdig_fun+0x1a>
 800e0c6:	3847      	subs	r0, #71	; 0x47
 800e0c8:	e7f7      	b.n	800e0ba <__hexdig_fun+0xa>
 800e0ca:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e0ce:	2b05      	cmp	r3, #5
 800e0d0:	d801      	bhi.n	800e0d6 <__hexdig_fun+0x26>
 800e0d2:	3827      	subs	r0, #39	; 0x27
 800e0d4:	e7f1      	b.n	800e0ba <__hexdig_fun+0xa>
 800e0d6:	2000      	movs	r0, #0
 800e0d8:	4770      	bx	lr

0800e0da <__gethex>:
 800e0da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0de:	b08b      	sub	sp, #44	; 0x2c
 800e0e0:	468a      	mov	sl, r1
 800e0e2:	9002      	str	r0, [sp, #8]
 800e0e4:	9816      	ldr	r0, [sp, #88]	; 0x58
 800e0e6:	9306      	str	r3, [sp, #24]
 800e0e8:	4690      	mov	r8, r2
 800e0ea:	f000 fad0 	bl	800e68e <__localeconv_l>
 800e0ee:	6803      	ldr	r3, [r0, #0]
 800e0f0:	9303      	str	r3, [sp, #12]
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7f2 f88c 	bl	8000210 <strlen>
 800e0f8:	9b03      	ldr	r3, [sp, #12]
 800e0fa:	9001      	str	r0, [sp, #4]
 800e0fc:	4403      	add	r3, r0
 800e0fe:	f04f 0b00 	mov.w	fp, #0
 800e102:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e106:	9307      	str	r3, [sp, #28]
 800e108:	f8da 3000 	ldr.w	r3, [sl]
 800e10c:	3302      	adds	r3, #2
 800e10e:	461f      	mov	r7, r3
 800e110:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e114:	2830      	cmp	r0, #48	; 0x30
 800e116:	d06c      	beq.n	800e1f2 <__gethex+0x118>
 800e118:	f7ff ffca 	bl	800e0b0 <__hexdig_fun>
 800e11c:	4604      	mov	r4, r0
 800e11e:	2800      	cmp	r0, #0
 800e120:	d16a      	bne.n	800e1f8 <__gethex+0x11e>
 800e122:	9a01      	ldr	r2, [sp, #4]
 800e124:	9903      	ldr	r1, [sp, #12]
 800e126:	4638      	mov	r0, r7
 800e128:	f001 f989 	bl	800f43e <strncmp>
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d166      	bne.n	800e1fe <__gethex+0x124>
 800e130:	9b01      	ldr	r3, [sp, #4]
 800e132:	5cf8      	ldrb	r0, [r7, r3]
 800e134:	18fe      	adds	r6, r7, r3
 800e136:	f7ff ffbb 	bl	800e0b0 <__hexdig_fun>
 800e13a:	2800      	cmp	r0, #0
 800e13c:	d062      	beq.n	800e204 <__gethex+0x12a>
 800e13e:	4633      	mov	r3, r6
 800e140:	7818      	ldrb	r0, [r3, #0]
 800e142:	2830      	cmp	r0, #48	; 0x30
 800e144:	461f      	mov	r7, r3
 800e146:	f103 0301 	add.w	r3, r3, #1
 800e14a:	d0f9      	beq.n	800e140 <__gethex+0x66>
 800e14c:	f7ff ffb0 	bl	800e0b0 <__hexdig_fun>
 800e150:	fab0 f580 	clz	r5, r0
 800e154:	096d      	lsrs	r5, r5, #5
 800e156:	4634      	mov	r4, r6
 800e158:	f04f 0b01 	mov.w	fp, #1
 800e15c:	463a      	mov	r2, r7
 800e15e:	4616      	mov	r6, r2
 800e160:	3201      	adds	r2, #1
 800e162:	7830      	ldrb	r0, [r6, #0]
 800e164:	f7ff ffa4 	bl	800e0b0 <__hexdig_fun>
 800e168:	2800      	cmp	r0, #0
 800e16a:	d1f8      	bne.n	800e15e <__gethex+0x84>
 800e16c:	9a01      	ldr	r2, [sp, #4]
 800e16e:	9903      	ldr	r1, [sp, #12]
 800e170:	4630      	mov	r0, r6
 800e172:	f001 f964 	bl	800f43e <strncmp>
 800e176:	b950      	cbnz	r0, 800e18e <__gethex+0xb4>
 800e178:	b954      	cbnz	r4, 800e190 <__gethex+0xb6>
 800e17a:	9b01      	ldr	r3, [sp, #4]
 800e17c:	18f4      	adds	r4, r6, r3
 800e17e:	4622      	mov	r2, r4
 800e180:	4616      	mov	r6, r2
 800e182:	3201      	adds	r2, #1
 800e184:	7830      	ldrb	r0, [r6, #0]
 800e186:	f7ff ff93 	bl	800e0b0 <__hexdig_fun>
 800e18a:	2800      	cmp	r0, #0
 800e18c:	d1f8      	bne.n	800e180 <__gethex+0xa6>
 800e18e:	b10c      	cbz	r4, 800e194 <__gethex+0xba>
 800e190:	1ba4      	subs	r4, r4, r6
 800e192:	00a4      	lsls	r4, r4, #2
 800e194:	7833      	ldrb	r3, [r6, #0]
 800e196:	2b50      	cmp	r3, #80	; 0x50
 800e198:	d001      	beq.n	800e19e <__gethex+0xc4>
 800e19a:	2b70      	cmp	r3, #112	; 0x70
 800e19c:	d140      	bne.n	800e220 <__gethex+0x146>
 800e19e:	7873      	ldrb	r3, [r6, #1]
 800e1a0:	2b2b      	cmp	r3, #43	; 0x2b
 800e1a2:	d031      	beq.n	800e208 <__gethex+0x12e>
 800e1a4:	2b2d      	cmp	r3, #45	; 0x2d
 800e1a6:	d033      	beq.n	800e210 <__gethex+0x136>
 800e1a8:	1c71      	adds	r1, r6, #1
 800e1aa:	f04f 0900 	mov.w	r9, #0
 800e1ae:	7808      	ldrb	r0, [r1, #0]
 800e1b0:	f7ff ff7e 	bl	800e0b0 <__hexdig_fun>
 800e1b4:	1e43      	subs	r3, r0, #1
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b18      	cmp	r3, #24
 800e1ba:	d831      	bhi.n	800e220 <__gethex+0x146>
 800e1bc:	f1a0 0210 	sub.w	r2, r0, #16
 800e1c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e1c4:	f7ff ff74 	bl	800e0b0 <__hexdig_fun>
 800e1c8:	1e43      	subs	r3, r0, #1
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	2b18      	cmp	r3, #24
 800e1ce:	d922      	bls.n	800e216 <__gethex+0x13c>
 800e1d0:	f1b9 0f00 	cmp.w	r9, #0
 800e1d4:	d000      	beq.n	800e1d8 <__gethex+0xfe>
 800e1d6:	4252      	negs	r2, r2
 800e1d8:	4414      	add	r4, r2
 800e1da:	f8ca 1000 	str.w	r1, [sl]
 800e1de:	b30d      	cbz	r5, 800e224 <__gethex+0x14a>
 800e1e0:	f1bb 0f00 	cmp.w	fp, #0
 800e1e4:	bf0c      	ite	eq
 800e1e6:	2706      	moveq	r7, #6
 800e1e8:	2700      	movne	r7, #0
 800e1ea:	4638      	mov	r0, r7
 800e1ec:	b00b      	add	sp, #44	; 0x2c
 800e1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1f2:	f10b 0b01 	add.w	fp, fp, #1
 800e1f6:	e78a      	b.n	800e10e <__gethex+0x34>
 800e1f8:	2500      	movs	r5, #0
 800e1fa:	462c      	mov	r4, r5
 800e1fc:	e7ae      	b.n	800e15c <__gethex+0x82>
 800e1fe:	463e      	mov	r6, r7
 800e200:	2501      	movs	r5, #1
 800e202:	e7c7      	b.n	800e194 <__gethex+0xba>
 800e204:	4604      	mov	r4, r0
 800e206:	e7fb      	b.n	800e200 <__gethex+0x126>
 800e208:	f04f 0900 	mov.w	r9, #0
 800e20c:	1cb1      	adds	r1, r6, #2
 800e20e:	e7ce      	b.n	800e1ae <__gethex+0xd4>
 800e210:	f04f 0901 	mov.w	r9, #1
 800e214:	e7fa      	b.n	800e20c <__gethex+0x132>
 800e216:	230a      	movs	r3, #10
 800e218:	fb03 0202 	mla	r2, r3, r2, r0
 800e21c:	3a10      	subs	r2, #16
 800e21e:	e7cf      	b.n	800e1c0 <__gethex+0xe6>
 800e220:	4631      	mov	r1, r6
 800e222:	e7da      	b.n	800e1da <__gethex+0x100>
 800e224:	1bf3      	subs	r3, r6, r7
 800e226:	3b01      	subs	r3, #1
 800e228:	4629      	mov	r1, r5
 800e22a:	2b07      	cmp	r3, #7
 800e22c:	dc49      	bgt.n	800e2c2 <__gethex+0x1e8>
 800e22e:	9802      	ldr	r0, [sp, #8]
 800e230:	f000 fabc 	bl	800e7ac <_Balloc>
 800e234:	9b01      	ldr	r3, [sp, #4]
 800e236:	f100 0914 	add.w	r9, r0, #20
 800e23a:	f04f 0b00 	mov.w	fp, #0
 800e23e:	f1c3 0301 	rsb	r3, r3, #1
 800e242:	4605      	mov	r5, r0
 800e244:	f8cd 9010 	str.w	r9, [sp, #16]
 800e248:	46da      	mov	sl, fp
 800e24a:	9308      	str	r3, [sp, #32]
 800e24c:	42b7      	cmp	r7, r6
 800e24e:	d33b      	bcc.n	800e2c8 <__gethex+0x1ee>
 800e250:	9804      	ldr	r0, [sp, #16]
 800e252:	f840 ab04 	str.w	sl, [r0], #4
 800e256:	eba0 0009 	sub.w	r0, r0, r9
 800e25a:	1080      	asrs	r0, r0, #2
 800e25c:	6128      	str	r0, [r5, #16]
 800e25e:	0147      	lsls	r7, r0, #5
 800e260:	4650      	mov	r0, sl
 800e262:	f000 fb67 	bl	800e934 <__hi0bits>
 800e266:	f8d8 6000 	ldr.w	r6, [r8]
 800e26a:	1a3f      	subs	r7, r7, r0
 800e26c:	42b7      	cmp	r7, r6
 800e26e:	dd64      	ble.n	800e33a <__gethex+0x260>
 800e270:	1bbf      	subs	r7, r7, r6
 800e272:	4639      	mov	r1, r7
 800e274:	4628      	mov	r0, r5
 800e276:	f000 fe77 	bl	800ef68 <__any_on>
 800e27a:	4682      	mov	sl, r0
 800e27c:	b178      	cbz	r0, 800e29e <__gethex+0x1c4>
 800e27e:	1e7b      	subs	r3, r7, #1
 800e280:	1159      	asrs	r1, r3, #5
 800e282:	f003 021f 	and.w	r2, r3, #31
 800e286:	f04f 0a01 	mov.w	sl, #1
 800e28a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e28e:	fa0a f202 	lsl.w	r2, sl, r2
 800e292:	420a      	tst	r2, r1
 800e294:	d003      	beq.n	800e29e <__gethex+0x1c4>
 800e296:	4553      	cmp	r3, sl
 800e298:	dc46      	bgt.n	800e328 <__gethex+0x24e>
 800e29a:	f04f 0a02 	mov.w	sl, #2
 800e29e:	4639      	mov	r1, r7
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	f7ff fecb 	bl	800e03c <rshift>
 800e2a6:	443c      	add	r4, r7
 800e2a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e2ac:	42a3      	cmp	r3, r4
 800e2ae:	da52      	bge.n	800e356 <__gethex+0x27c>
 800e2b0:	4629      	mov	r1, r5
 800e2b2:	9802      	ldr	r0, [sp, #8]
 800e2b4:	f000 faae 	bl	800e814 <_Bfree>
 800e2b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	6013      	str	r3, [r2, #0]
 800e2be:	27a3      	movs	r7, #163	; 0xa3
 800e2c0:	e793      	b.n	800e1ea <__gethex+0x110>
 800e2c2:	3101      	adds	r1, #1
 800e2c4:	105b      	asrs	r3, r3, #1
 800e2c6:	e7b0      	b.n	800e22a <__gethex+0x150>
 800e2c8:	1e73      	subs	r3, r6, #1
 800e2ca:	9305      	str	r3, [sp, #20]
 800e2cc:	9a07      	ldr	r2, [sp, #28]
 800e2ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e2d2:	4293      	cmp	r3, r2
 800e2d4:	d018      	beq.n	800e308 <__gethex+0x22e>
 800e2d6:	f1bb 0f20 	cmp.w	fp, #32
 800e2da:	d107      	bne.n	800e2ec <__gethex+0x212>
 800e2dc:	9b04      	ldr	r3, [sp, #16]
 800e2de:	f8c3 a000 	str.w	sl, [r3]
 800e2e2:	3304      	adds	r3, #4
 800e2e4:	f04f 0a00 	mov.w	sl, #0
 800e2e8:	9304      	str	r3, [sp, #16]
 800e2ea:	46d3      	mov	fp, sl
 800e2ec:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e2f0:	f7ff fede 	bl	800e0b0 <__hexdig_fun>
 800e2f4:	f000 000f 	and.w	r0, r0, #15
 800e2f8:	fa00 f00b 	lsl.w	r0, r0, fp
 800e2fc:	ea4a 0a00 	orr.w	sl, sl, r0
 800e300:	f10b 0b04 	add.w	fp, fp, #4
 800e304:	9b05      	ldr	r3, [sp, #20]
 800e306:	e00d      	b.n	800e324 <__gethex+0x24a>
 800e308:	9b05      	ldr	r3, [sp, #20]
 800e30a:	9a08      	ldr	r2, [sp, #32]
 800e30c:	4413      	add	r3, r2
 800e30e:	42bb      	cmp	r3, r7
 800e310:	d3e1      	bcc.n	800e2d6 <__gethex+0x1fc>
 800e312:	4618      	mov	r0, r3
 800e314:	9a01      	ldr	r2, [sp, #4]
 800e316:	9903      	ldr	r1, [sp, #12]
 800e318:	9309      	str	r3, [sp, #36]	; 0x24
 800e31a:	f001 f890 	bl	800f43e <strncmp>
 800e31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e320:	2800      	cmp	r0, #0
 800e322:	d1d8      	bne.n	800e2d6 <__gethex+0x1fc>
 800e324:	461e      	mov	r6, r3
 800e326:	e791      	b.n	800e24c <__gethex+0x172>
 800e328:	1eb9      	subs	r1, r7, #2
 800e32a:	4628      	mov	r0, r5
 800e32c:	f000 fe1c 	bl	800ef68 <__any_on>
 800e330:	2800      	cmp	r0, #0
 800e332:	d0b2      	beq.n	800e29a <__gethex+0x1c0>
 800e334:	f04f 0a03 	mov.w	sl, #3
 800e338:	e7b1      	b.n	800e29e <__gethex+0x1c4>
 800e33a:	da09      	bge.n	800e350 <__gethex+0x276>
 800e33c:	1bf7      	subs	r7, r6, r7
 800e33e:	4629      	mov	r1, r5
 800e340:	463a      	mov	r2, r7
 800e342:	9802      	ldr	r0, [sp, #8]
 800e344:	f000 fc32 	bl	800ebac <__lshift>
 800e348:	1be4      	subs	r4, r4, r7
 800e34a:	4605      	mov	r5, r0
 800e34c:	f100 0914 	add.w	r9, r0, #20
 800e350:	f04f 0a00 	mov.w	sl, #0
 800e354:	e7a8      	b.n	800e2a8 <__gethex+0x1ce>
 800e356:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e35a:	42a0      	cmp	r0, r4
 800e35c:	dd6a      	ble.n	800e434 <__gethex+0x35a>
 800e35e:	1b04      	subs	r4, r0, r4
 800e360:	42a6      	cmp	r6, r4
 800e362:	dc2e      	bgt.n	800e3c2 <__gethex+0x2e8>
 800e364:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e368:	2b02      	cmp	r3, #2
 800e36a:	d022      	beq.n	800e3b2 <__gethex+0x2d8>
 800e36c:	2b03      	cmp	r3, #3
 800e36e:	d024      	beq.n	800e3ba <__gethex+0x2e0>
 800e370:	2b01      	cmp	r3, #1
 800e372:	d115      	bne.n	800e3a0 <__gethex+0x2c6>
 800e374:	42a6      	cmp	r6, r4
 800e376:	d113      	bne.n	800e3a0 <__gethex+0x2c6>
 800e378:	2e01      	cmp	r6, #1
 800e37a:	dc0b      	bgt.n	800e394 <__gethex+0x2ba>
 800e37c:	9a06      	ldr	r2, [sp, #24]
 800e37e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e382:	6013      	str	r3, [r2, #0]
 800e384:	2301      	movs	r3, #1
 800e386:	612b      	str	r3, [r5, #16]
 800e388:	f8c9 3000 	str.w	r3, [r9]
 800e38c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e38e:	2762      	movs	r7, #98	; 0x62
 800e390:	601d      	str	r5, [r3, #0]
 800e392:	e72a      	b.n	800e1ea <__gethex+0x110>
 800e394:	1e71      	subs	r1, r6, #1
 800e396:	4628      	mov	r0, r5
 800e398:	f000 fde6 	bl	800ef68 <__any_on>
 800e39c:	2800      	cmp	r0, #0
 800e39e:	d1ed      	bne.n	800e37c <__gethex+0x2a2>
 800e3a0:	4629      	mov	r1, r5
 800e3a2:	9802      	ldr	r0, [sp, #8]
 800e3a4:	f000 fa36 	bl	800e814 <_Bfree>
 800e3a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	6013      	str	r3, [r2, #0]
 800e3ae:	2750      	movs	r7, #80	; 0x50
 800e3b0:	e71b      	b.n	800e1ea <__gethex+0x110>
 800e3b2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d0e1      	beq.n	800e37c <__gethex+0x2a2>
 800e3b8:	e7f2      	b.n	800e3a0 <__gethex+0x2c6>
 800e3ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d1dd      	bne.n	800e37c <__gethex+0x2a2>
 800e3c0:	e7ee      	b.n	800e3a0 <__gethex+0x2c6>
 800e3c2:	1e67      	subs	r7, r4, #1
 800e3c4:	f1ba 0f00 	cmp.w	sl, #0
 800e3c8:	d131      	bne.n	800e42e <__gethex+0x354>
 800e3ca:	b127      	cbz	r7, 800e3d6 <__gethex+0x2fc>
 800e3cc:	4639      	mov	r1, r7
 800e3ce:	4628      	mov	r0, r5
 800e3d0:	f000 fdca 	bl	800ef68 <__any_on>
 800e3d4:	4682      	mov	sl, r0
 800e3d6:	117a      	asrs	r2, r7, #5
 800e3d8:	2301      	movs	r3, #1
 800e3da:	f007 071f 	and.w	r7, r7, #31
 800e3de:	fa03 f707 	lsl.w	r7, r3, r7
 800e3e2:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800e3e6:	4621      	mov	r1, r4
 800e3e8:	421f      	tst	r7, r3
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	bf18      	it	ne
 800e3ee:	f04a 0a02 	orrne.w	sl, sl, #2
 800e3f2:	1b36      	subs	r6, r6, r4
 800e3f4:	f7ff fe22 	bl	800e03c <rshift>
 800e3f8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800e3fc:	2702      	movs	r7, #2
 800e3fe:	f1ba 0f00 	cmp.w	sl, #0
 800e402:	d048      	beq.n	800e496 <__gethex+0x3bc>
 800e404:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e408:	2b02      	cmp	r3, #2
 800e40a:	d015      	beq.n	800e438 <__gethex+0x35e>
 800e40c:	2b03      	cmp	r3, #3
 800e40e:	d017      	beq.n	800e440 <__gethex+0x366>
 800e410:	2b01      	cmp	r3, #1
 800e412:	d109      	bne.n	800e428 <__gethex+0x34e>
 800e414:	f01a 0f02 	tst.w	sl, #2
 800e418:	d006      	beq.n	800e428 <__gethex+0x34e>
 800e41a:	f8d9 3000 	ldr.w	r3, [r9]
 800e41e:	ea4a 0a03 	orr.w	sl, sl, r3
 800e422:	f01a 0f01 	tst.w	sl, #1
 800e426:	d10e      	bne.n	800e446 <__gethex+0x36c>
 800e428:	f047 0710 	orr.w	r7, r7, #16
 800e42c:	e033      	b.n	800e496 <__gethex+0x3bc>
 800e42e:	f04f 0a01 	mov.w	sl, #1
 800e432:	e7d0      	b.n	800e3d6 <__gethex+0x2fc>
 800e434:	2701      	movs	r7, #1
 800e436:	e7e2      	b.n	800e3fe <__gethex+0x324>
 800e438:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e43a:	f1c3 0301 	rsb	r3, r3, #1
 800e43e:	9315      	str	r3, [sp, #84]	; 0x54
 800e440:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e442:	2b00      	cmp	r3, #0
 800e444:	d0f0      	beq.n	800e428 <__gethex+0x34e>
 800e446:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800e44a:	f105 0314 	add.w	r3, r5, #20
 800e44e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800e452:	eb03 010a 	add.w	r1, r3, sl
 800e456:	f04f 0c00 	mov.w	ip, #0
 800e45a:	4618      	mov	r0, r3
 800e45c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e460:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e464:	d01c      	beq.n	800e4a0 <__gethex+0x3c6>
 800e466:	3201      	adds	r2, #1
 800e468:	6002      	str	r2, [r0, #0]
 800e46a:	2f02      	cmp	r7, #2
 800e46c:	f105 0314 	add.w	r3, r5, #20
 800e470:	d138      	bne.n	800e4e4 <__gethex+0x40a>
 800e472:	f8d8 2000 	ldr.w	r2, [r8]
 800e476:	3a01      	subs	r2, #1
 800e478:	42b2      	cmp	r2, r6
 800e47a:	d10a      	bne.n	800e492 <__gethex+0x3b8>
 800e47c:	1171      	asrs	r1, r6, #5
 800e47e:	2201      	movs	r2, #1
 800e480:	f006 061f 	and.w	r6, r6, #31
 800e484:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e488:	fa02 f606 	lsl.w	r6, r2, r6
 800e48c:	421e      	tst	r6, r3
 800e48e:	bf18      	it	ne
 800e490:	4617      	movne	r7, r2
 800e492:	f047 0720 	orr.w	r7, r7, #32
 800e496:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e498:	601d      	str	r5, [r3, #0]
 800e49a:	9b06      	ldr	r3, [sp, #24]
 800e49c:	601c      	str	r4, [r3, #0]
 800e49e:	e6a4      	b.n	800e1ea <__gethex+0x110>
 800e4a0:	4299      	cmp	r1, r3
 800e4a2:	f843 cc04 	str.w	ip, [r3, #-4]
 800e4a6:	d8d8      	bhi.n	800e45a <__gethex+0x380>
 800e4a8:	68ab      	ldr	r3, [r5, #8]
 800e4aa:	4599      	cmp	r9, r3
 800e4ac:	db12      	blt.n	800e4d4 <__gethex+0x3fa>
 800e4ae:	6869      	ldr	r1, [r5, #4]
 800e4b0:	9802      	ldr	r0, [sp, #8]
 800e4b2:	3101      	adds	r1, #1
 800e4b4:	f000 f97a 	bl	800e7ac <_Balloc>
 800e4b8:	692a      	ldr	r2, [r5, #16]
 800e4ba:	3202      	adds	r2, #2
 800e4bc:	f105 010c 	add.w	r1, r5, #12
 800e4c0:	4683      	mov	fp, r0
 800e4c2:	0092      	lsls	r2, r2, #2
 800e4c4:	300c      	adds	r0, #12
 800e4c6:	f7fd f997 	bl	800b7f8 <memcpy>
 800e4ca:	4629      	mov	r1, r5
 800e4cc:	9802      	ldr	r0, [sp, #8]
 800e4ce:	f000 f9a1 	bl	800e814 <_Bfree>
 800e4d2:	465d      	mov	r5, fp
 800e4d4:	692b      	ldr	r3, [r5, #16]
 800e4d6:	1c5a      	adds	r2, r3, #1
 800e4d8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800e4dc:	612a      	str	r2, [r5, #16]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	615a      	str	r2, [r3, #20]
 800e4e2:	e7c2      	b.n	800e46a <__gethex+0x390>
 800e4e4:	692a      	ldr	r2, [r5, #16]
 800e4e6:	454a      	cmp	r2, r9
 800e4e8:	dd0b      	ble.n	800e502 <__gethex+0x428>
 800e4ea:	2101      	movs	r1, #1
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	f7ff fda5 	bl	800e03c <rshift>
 800e4f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e4f6:	3401      	adds	r4, #1
 800e4f8:	42a3      	cmp	r3, r4
 800e4fa:	f6ff aed9 	blt.w	800e2b0 <__gethex+0x1d6>
 800e4fe:	2701      	movs	r7, #1
 800e500:	e7c7      	b.n	800e492 <__gethex+0x3b8>
 800e502:	f016 061f 	ands.w	r6, r6, #31
 800e506:	d0fa      	beq.n	800e4fe <__gethex+0x424>
 800e508:	449a      	add	sl, r3
 800e50a:	f1c6 0620 	rsb	r6, r6, #32
 800e50e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e512:	f000 fa0f 	bl	800e934 <__hi0bits>
 800e516:	42b0      	cmp	r0, r6
 800e518:	dbe7      	blt.n	800e4ea <__gethex+0x410>
 800e51a:	e7f0      	b.n	800e4fe <__gethex+0x424>

0800e51c <L_shift>:
 800e51c:	f1c2 0208 	rsb	r2, r2, #8
 800e520:	0092      	lsls	r2, r2, #2
 800e522:	b570      	push	{r4, r5, r6, lr}
 800e524:	f1c2 0620 	rsb	r6, r2, #32
 800e528:	6843      	ldr	r3, [r0, #4]
 800e52a:	6804      	ldr	r4, [r0, #0]
 800e52c:	fa03 f506 	lsl.w	r5, r3, r6
 800e530:	432c      	orrs	r4, r5
 800e532:	40d3      	lsrs	r3, r2
 800e534:	6004      	str	r4, [r0, #0]
 800e536:	f840 3f04 	str.w	r3, [r0, #4]!
 800e53a:	4288      	cmp	r0, r1
 800e53c:	d3f4      	bcc.n	800e528 <L_shift+0xc>
 800e53e:	bd70      	pop	{r4, r5, r6, pc}

0800e540 <__match>:
 800e540:	b530      	push	{r4, r5, lr}
 800e542:	6803      	ldr	r3, [r0, #0]
 800e544:	3301      	adds	r3, #1
 800e546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e54a:	b914      	cbnz	r4, 800e552 <__match+0x12>
 800e54c:	6003      	str	r3, [r0, #0]
 800e54e:	2001      	movs	r0, #1
 800e550:	bd30      	pop	{r4, r5, pc}
 800e552:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e556:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e55a:	2d19      	cmp	r5, #25
 800e55c:	bf98      	it	ls
 800e55e:	3220      	addls	r2, #32
 800e560:	42a2      	cmp	r2, r4
 800e562:	d0f0      	beq.n	800e546 <__match+0x6>
 800e564:	2000      	movs	r0, #0
 800e566:	e7f3      	b.n	800e550 <__match+0x10>

0800e568 <__hexnan>:
 800e568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e56c:	680b      	ldr	r3, [r1, #0]
 800e56e:	6801      	ldr	r1, [r0, #0]
 800e570:	115f      	asrs	r7, r3, #5
 800e572:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800e576:	f013 031f 	ands.w	r3, r3, #31
 800e57a:	b087      	sub	sp, #28
 800e57c:	bf18      	it	ne
 800e57e:	3704      	addne	r7, #4
 800e580:	2500      	movs	r5, #0
 800e582:	1f3e      	subs	r6, r7, #4
 800e584:	4682      	mov	sl, r0
 800e586:	4690      	mov	r8, r2
 800e588:	9301      	str	r3, [sp, #4]
 800e58a:	f847 5c04 	str.w	r5, [r7, #-4]
 800e58e:	46b1      	mov	r9, r6
 800e590:	4634      	mov	r4, r6
 800e592:	9502      	str	r5, [sp, #8]
 800e594:	46ab      	mov	fp, r5
 800e596:	784a      	ldrb	r2, [r1, #1]
 800e598:	1c4b      	adds	r3, r1, #1
 800e59a:	9303      	str	r3, [sp, #12]
 800e59c:	b342      	cbz	r2, 800e5f0 <__hexnan+0x88>
 800e59e:	4610      	mov	r0, r2
 800e5a0:	9105      	str	r1, [sp, #20]
 800e5a2:	9204      	str	r2, [sp, #16]
 800e5a4:	f7ff fd84 	bl	800e0b0 <__hexdig_fun>
 800e5a8:	2800      	cmp	r0, #0
 800e5aa:	d143      	bne.n	800e634 <__hexnan+0xcc>
 800e5ac:	9a04      	ldr	r2, [sp, #16]
 800e5ae:	9905      	ldr	r1, [sp, #20]
 800e5b0:	2a20      	cmp	r2, #32
 800e5b2:	d818      	bhi.n	800e5e6 <__hexnan+0x7e>
 800e5b4:	9b02      	ldr	r3, [sp, #8]
 800e5b6:	459b      	cmp	fp, r3
 800e5b8:	dd13      	ble.n	800e5e2 <__hexnan+0x7a>
 800e5ba:	454c      	cmp	r4, r9
 800e5bc:	d206      	bcs.n	800e5cc <__hexnan+0x64>
 800e5be:	2d07      	cmp	r5, #7
 800e5c0:	dc04      	bgt.n	800e5cc <__hexnan+0x64>
 800e5c2:	462a      	mov	r2, r5
 800e5c4:	4649      	mov	r1, r9
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	f7ff ffa8 	bl	800e51c <L_shift>
 800e5cc:	4544      	cmp	r4, r8
 800e5ce:	d944      	bls.n	800e65a <__hexnan+0xf2>
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	f1a4 0904 	sub.w	r9, r4, #4
 800e5d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e5da:	f8cd b008 	str.w	fp, [sp, #8]
 800e5de:	464c      	mov	r4, r9
 800e5e0:	461d      	mov	r5, r3
 800e5e2:	9903      	ldr	r1, [sp, #12]
 800e5e4:	e7d7      	b.n	800e596 <__hexnan+0x2e>
 800e5e6:	2a29      	cmp	r2, #41	; 0x29
 800e5e8:	d14a      	bne.n	800e680 <__hexnan+0x118>
 800e5ea:	3102      	adds	r1, #2
 800e5ec:	f8ca 1000 	str.w	r1, [sl]
 800e5f0:	f1bb 0f00 	cmp.w	fp, #0
 800e5f4:	d044      	beq.n	800e680 <__hexnan+0x118>
 800e5f6:	454c      	cmp	r4, r9
 800e5f8:	d206      	bcs.n	800e608 <__hexnan+0xa0>
 800e5fa:	2d07      	cmp	r5, #7
 800e5fc:	dc04      	bgt.n	800e608 <__hexnan+0xa0>
 800e5fe:	462a      	mov	r2, r5
 800e600:	4649      	mov	r1, r9
 800e602:	4620      	mov	r0, r4
 800e604:	f7ff ff8a 	bl	800e51c <L_shift>
 800e608:	4544      	cmp	r4, r8
 800e60a:	d928      	bls.n	800e65e <__hexnan+0xf6>
 800e60c:	4643      	mov	r3, r8
 800e60e:	f854 2b04 	ldr.w	r2, [r4], #4
 800e612:	f843 2b04 	str.w	r2, [r3], #4
 800e616:	42a6      	cmp	r6, r4
 800e618:	d2f9      	bcs.n	800e60e <__hexnan+0xa6>
 800e61a:	2200      	movs	r2, #0
 800e61c:	f843 2b04 	str.w	r2, [r3], #4
 800e620:	429e      	cmp	r6, r3
 800e622:	d2fb      	bcs.n	800e61c <__hexnan+0xb4>
 800e624:	6833      	ldr	r3, [r6, #0]
 800e626:	b91b      	cbnz	r3, 800e630 <__hexnan+0xc8>
 800e628:	4546      	cmp	r6, r8
 800e62a:	d127      	bne.n	800e67c <__hexnan+0x114>
 800e62c:	2301      	movs	r3, #1
 800e62e:	6033      	str	r3, [r6, #0]
 800e630:	2005      	movs	r0, #5
 800e632:	e026      	b.n	800e682 <__hexnan+0x11a>
 800e634:	3501      	adds	r5, #1
 800e636:	2d08      	cmp	r5, #8
 800e638:	f10b 0b01 	add.w	fp, fp, #1
 800e63c:	dd06      	ble.n	800e64c <__hexnan+0xe4>
 800e63e:	4544      	cmp	r4, r8
 800e640:	d9cf      	bls.n	800e5e2 <__hexnan+0x7a>
 800e642:	2300      	movs	r3, #0
 800e644:	f844 3c04 	str.w	r3, [r4, #-4]
 800e648:	2501      	movs	r5, #1
 800e64a:	3c04      	subs	r4, #4
 800e64c:	6822      	ldr	r2, [r4, #0]
 800e64e:	f000 000f 	and.w	r0, r0, #15
 800e652:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e656:	6020      	str	r0, [r4, #0]
 800e658:	e7c3      	b.n	800e5e2 <__hexnan+0x7a>
 800e65a:	2508      	movs	r5, #8
 800e65c:	e7c1      	b.n	800e5e2 <__hexnan+0x7a>
 800e65e:	9b01      	ldr	r3, [sp, #4]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d0df      	beq.n	800e624 <__hexnan+0xbc>
 800e664:	f04f 32ff 	mov.w	r2, #4294967295
 800e668:	f1c3 0320 	rsb	r3, r3, #32
 800e66c:	fa22 f303 	lsr.w	r3, r2, r3
 800e670:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800e674:	401a      	ands	r2, r3
 800e676:	f847 2c04 	str.w	r2, [r7, #-4]
 800e67a:	e7d3      	b.n	800e624 <__hexnan+0xbc>
 800e67c:	3e04      	subs	r6, #4
 800e67e:	e7d1      	b.n	800e624 <__hexnan+0xbc>
 800e680:	2004      	movs	r0, #4
 800e682:	b007      	add	sp, #28
 800e684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e688 <__locale_ctype_ptr_l>:
 800e688:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800e68c:	4770      	bx	lr

0800e68e <__localeconv_l>:
 800e68e:	30f0      	adds	r0, #240	; 0xf0
 800e690:	4770      	bx	lr
	...

0800e694 <_localeconv_r>:
 800e694:	4b04      	ldr	r3, [pc, #16]	; (800e6a8 <_localeconv_r+0x14>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	6a18      	ldr	r0, [r3, #32]
 800e69a:	4b04      	ldr	r3, [pc, #16]	; (800e6ac <_localeconv_r+0x18>)
 800e69c:	2800      	cmp	r0, #0
 800e69e:	bf08      	it	eq
 800e6a0:	4618      	moveq	r0, r3
 800e6a2:	30f0      	adds	r0, #240	; 0xf0
 800e6a4:	4770      	bx	lr
 800e6a6:	bf00      	nop
 800e6a8:	2000004c 	.word	0x2000004c
 800e6ac:	200000b0 	.word	0x200000b0

0800e6b0 <__swhatbuf_r>:
 800e6b0:	b570      	push	{r4, r5, r6, lr}
 800e6b2:	460e      	mov	r6, r1
 800e6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6b8:	2900      	cmp	r1, #0
 800e6ba:	b096      	sub	sp, #88	; 0x58
 800e6bc:	4614      	mov	r4, r2
 800e6be:	461d      	mov	r5, r3
 800e6c0:	da07      	bge.n	800e6d2 <__swhatbuf_r+0x22>
 800e6c2:	2300      	movs	r3, #0
 800e6c4:	602b      	str	r3, [r5, #0]
 800e6c6:	89b3      	ldrh	r3, [r6, #12]
 800e6c8:	061a      	lsls	r2, r3, #24
 800e6ca:	d410      	bmi.n	800e6ee <__swhatbuf_r+0x3e>
 800e6cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e6d0:	e00e      	b.n	800e6f0 <__swhatbuf_r+0x40>
 800e6d2:	466a      	mov	r2, sp
 800e6d4:	f000 fef4 	bl	800f4c0 <_fstat_r>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	dbf2      	blt.n	800e6c2 <__swhatbuf_r+0x12>
 800e6dc:	9a01      	ldr	r2, [sp, #4]
 800e6de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e6e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e6e6:	425a      	negs	r2, r3
 800e6e8:	415a      	adcs	r2, r3
 800e6ea:	602a      	str	r2, [r5, #0]
 800e6ec:	e7ee      	b.n	800e6cc <__swhatbuf_r+0x1c>
 800e6ee:	2340      	movs	r3, #64	; 0x40
 800e6f0:	2000      	movs	r0, #0
 800e6f2:	6023      	str	r3, [r4, #0]
 800e6f4:	b016      	add	sp, #88	; 0x58
 800e6f6:	bd70      	pop	{r4, r5, r6, pc}

0800e6f8 <__smakebuf_r>:
 800e6f8:	898b      	ldrh	r3, [r1, #12]
 800e6fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e6fc:	079d      	lsls	r5, r3, #30
 800e6fe:	4606      	mov	r6, r0
 800e700:	460c      	mov	r4, r1
 800e702:	d507      	bpl.n	800e714 <__smakebuf_r+0x1c>
 800e704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e708:	6023      	str	r3, [r4, #0]
 800e70a:	6123      	str	r3, [r4, #16]
 800e70c:	2301      	movs	r3, #1
 800e70e:	6163      	str	r3, [r4, #20]
 800e710:	b002      	add	sp, #8
 800e712:	bd70      	pop	{r4, r5, r6, pc}
 800e714:	ab01      	add	r3, sp, #4
 800e716:	466a      	mov	r2, sp
 800e718:	f7ff ffca 	bl	800e6b0 <__swhatbuf_r>
 800e71c:	9900      	ldr	r1, [sp, #0]
 800e71e:	4605      	mov	r5, r0
 800e720:	4630      	mov	r0, r6
 800e722:	f000 fc9f 	bl	800f064 <_malloc_r>
 800e726:	b948      	cbnz	r0, 800e73c <__smakebuf_r+0x44>
 800e728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e72c:	059a      	lsls	r2, r3, #22
 800e72e:	d4ef      	bmi.n	800e710 <__smakebuf_r+0x18>
 800e730:	f023 0303 	bic.w	r3, r3, #3
 800e734:	f043 0302 	orr.w	r3, r3, #2
 800e738:	81a3      	strh	r3, [r4, #12]
 800e73a:	e7e3      	b.n	800e704 <__smakebuf_r+0xc>
 800e73c:	4b0d      	ldr	r3, [pc, #52]	; (800e774 <__smakebuf_r+0x7c>)
 800e73e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e740:	89a3      	ldrh	r3, [r4, #12]
 800e742:	6020      	str	r0, [r4, #0]
 800e744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e748:	81a3      	strh	r3, [r4, #12]
 800e74a:	9b00      	ldr	r3, [sp, #0]
 800e74c:	6163      	str	r3, [r4, #20]
 800e74e:	9b01      	ldr	r3, [sp, #4]
 800e750:	6120      	str	r0, [r4, #16]
 800e752:	b15b      	cbz	r3, 800e76c <__smakebuf_r+0x74>
 800e754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e758:	4630      	mov	r0, r6
 800e75a:	f000 fec3 	bl	800f4e4 <_isatty_r>
 800e75e:	b128      	cbz	r0, 800e76c <__smakebuf_r+0x74>
 800e760:	89a3      	ldrh	r3, [r4, #12]
 800e762:	f023 0303 	bic.w	r3, r3, #3
 800e766:	f043 0301 	orr.w	r3, r3, #1
 800e76a:	81a3      	strh	r3, [r4, #12]
 800e76c:	89a3      	ldrh	r3, [r4, #12]
 800e76e:	431d      	orrs	r5, r3
 800e770:	81a5      	strh	r5, [r4, #12]
 800e772:	e7cd      	b.n	800e710 <__smakebuf_r+0x18>
 800e774:	0800def1 	.word	0x0800def1

0800e778 <malloc>:
 800e778:	4b02      	ldr	r3, [pc, #8]	; (800e784 <malloc+0xc>)
 800e77a:	4601      	mov	r1, r0
 800e77c:	6818      	ldr	r0, [r3, #0]
 800e77e:	f000 bc71 	b.w	800f064 <_malloc_r>
 800e782:	bf00      	nop
 800e784:	2000004c 	.word	0x2000004c

0800e788 <__ascii_mbtowc>:
 800e788:	b082      	sub	sp, #8
 800e78a:	b901      	cbnz	r1, 800e78e <__ascii_mbtowc+0x6>
 800e78c:	a901      	add	r1, sp, #4
 800e78e:	b142      	cbz	r2, 800e7a2 <__ascii_mbtowc+0x1a>
 800e790:	b14b      	cbz	r3, 800e7a6 <__ascii_mbtowc+0x1e>
 800e792:	7813      	ldrb	r3, [r2, #0]
 800e794:	600b      	str	r3, [r1, #0]
 800e796:	7812      	ldrb	r2, [r2, #0]
 800e798:	1c10      	adds	r0, r2, #0
 800e79a:	bf18      	it	ne
 800e79c:	2001      	movne	r0, #1
 800e79e:	b002      	add	sp, #8
 800e7a0:	4770      	bx	lr
 800e7a2:	4610      	mov	r0, r2
 800e7a4:	e7fb      	b.n	800e79e <__ascii_mbtowc+0x16>
 800e7a6:	f06f 0001 	mvn.w	r0, #1
 800e7aa:	e7f8      	b.n	800e79e <__ascii_mbtowc+0x16>

0800e7ac <_Balloc>:
 800e7ac:	b570      	push	{r4, r5, r6, lr}
 800e7ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	460e      	mov	r6, r1
 800e7b4:	b93d      	cbnz	r5, 800e7c6 <_Balloc+0x1a>
 800e7b6:	2010      	movs	r0, #16
 800e7b8:	f7ff ffde 	bl	800e778 <malloc>
 800e7bc:	6260      	str	r0, [r4, #36]	; 0x24
 800e7be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e7c2:	6005      	str	r5, [r0, #0]
 800e7c4:	60c5      	str	r5, [r0, #12]
 800e7c6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e7c8:	68eb      	ldr	r3, [r5, #12]
 800e7ca:	b183      	cbz	r3, 800e7ee <_Balloc+0x42>
 800e7cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7ce:	68db      	ldr	r3, [r3, #12]
 800e7d0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e7d4:	b9b8      	cbnz	r0, 800e806 <_Balloc+0x5a>
 800e7d6:	2101      	movs	r1, #1
 800e7d8:	fa01 f506 	lsl.w	r5, r1, r6
 800e7dc:	1d6a      	adds	r2, r5, #5
 800e7de:	0092      	lsls	r2, r2, #2
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	f000 fbe2 	bl	800efaa <_calloc_r>
 800e7e6:	b160      	cbz	r0, 800e802 <_Balloc+0x56>
 800e7e8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e7ec:	e00e      	b.n	800e80c <_Balloc+0x60>
 800e7ee:	2221      	movs	r2, #33	; 0x21
 800e7f0:	2104      	movs	r1, #4
 800e7f2:	4620      	mov	r0, r4
 800e7f4:	f000 fbd9 	bl	800efaa <_calloc_r>
 800e7f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7fa:	60e8      	str	r0, [r5, #12]
 800e7fc:	68db      	ldr	r3, [r3, #12]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d1e4      	bne.n	800e7cc <_Balloc+0x20>
 800e802:	2000      	movs	r0, #0
 800e804:	bd70      	pop	{r4, r5, r6, pc}
 800e806:	6802      	ldr	r2, [r0, #0]
 800e808:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e80c:	2300      	movs	r3, #0
 800e80e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e812:	e7f7      	b.n	800e804 <_Balloc+0x58>

0800e814 <_Bfree>:
 800e814:	b570      	push	{r4, r5, r6, lr}
 800e816:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e818:	4606      	mov	r6, r0
 800e81a:	460d      	mov	r5, r1
 800e81c:	b93c      	cbnz	r4, 800e82e <_Bfree+0x1a>
 800e81e:	2010      	movs	r0, #16
 800e820:	f7ff ffaa 	bl	800e778 <malloc>
 800e824:	6270      	str	r0, [r6, #36]	; 0x24
 800e826:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e82a:	6004      	str	r4, [r0, #0]
 800e82c:	60c4      	str	r4, [r0, #12]
 800e82e:	b13d      	cbz	r5, 800e840 <_Bfree+0x2c>
 800e830:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e832:	686a      	ldr	r2, [r5, #4]
 800e834:	68db      	ldr	r3, [r3, #12]
 800e836:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e83a:	6029      	str	r1, [r5, #0]
 800e83c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e840:	bd70      	pop	{r4, r5, r6, pc}

0800e842 <__multadd>:
 800e842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e846:	690d      	ldr	r5, [r1, #16]
 800e848:	461f      	mov	r7, r3
 800e84a:	4606      	mov	r6, r0
 800e84c:	460c      	mov	r4, r1
 800e84e:	f101 0c14 	add.w	ip, r1, #20
 800e852:	2300      	movs	r3, #0
 800e854:	f8dc 0000 	ldr.w	r0, [ip]
 800e858:	b281      	uxth	r1, r0
 800e85a:	fb02 7101 	mla	r1, r2, r1, r7
 800e85e:	0c0f      	lsrs	r7, r1, #16
 800e860:	0c00      	lsrs	r0, r0, #16
 800e862:	fb02 7000 	mla	r0, r2, r0, r7
 800e866:	b289      	uxth	r1, r1
 800e868:	3301      	adds	r3, #1
 800e86a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e86e:	429d      	cmp	r5, r3
 800e870:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e874:	f84c 1b04 	str.w	r1, [ip], #4
 800e878:	dcec      	bgt.n	800e854 <__multadd+0x12>
 800e87a:	b1d7      	cbz	r7, 800e8b2 <__multadd+0x70>
 800e87c:	68a3      	ldr	r3, [r4, #8]
 800e87e:	42ab      	cmp	r3, r5
 800e880:	dc12      	bgt.n	800e8a8 <__multadd+0x66>
 800e882:	6861      	ldr	r1, [r4, #4]
 800e884:	4630      	mov	r0, r6
 800e886:	3101      	adds	r1, #1
 800e888:	f7ff ff90 	bl	800e7ac <_Balloc>
 800e88c:	6922      	ldr	r2, [r4, #16]
 800e88e:	3202      	adds	r2, #2
 800e890:	f104 010c 	add.w	r1, r4, #12
 800e894:	4680      	mov	r8, r0
 800e896:	0092      	lsls	r2, r2, #2
 800e898:	300c      	adds	r0, #12
 800e89a:	f7fc ffad 	bl	800b7f8 <memcpy>
 800e89e:	4621      	mov	r1, r4
 800e8a0:	4630      	mov	r0, r6
 800e8a2:	f7ff ffb7 	bl	800e814 <_Bfree>
 800e8a6:	4644      	mov	r4, r8
 800e8a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e8ac:	3501      	adds	r5, #1
 800e8ae:	615f      	str	r7, [r3, #20]
 800e8b0:	6125      	str	r5, [r4, #16]
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e8b8 <__s2b>:
 800e8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8bc:	460c      	mov	r4, r1
 800e8be:	4615      	mov	r5, r2
 800e8c0:	461f      	mov	r7, r3
 800e8c2:	2209      	movs	r2, #9
 800e8c4:	3308      	adds	r3, #8
 800e8c6:	4606      	mov	r6, r0
 800e8c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	2201      	movs	r2, #1
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	db20      	blt.n	800e916 <__s2b+0x5e>
 800e8d4:	4630      	mov	r0, r6
 800e8d6:	f7ff ff69 	bl	800e7ac <_Balloc>
 800e8da:	9b08      	ldr	r3, [sp, #32]
 800e8dc:	6143      	str	r3, [r0, #20]
 800e8de:	2d09      	cmp	r5, #9
 800e8e0:	f04f 0301 	mov.w	r3, #1
 800e8e4:	6103      	str	r3, [r0, #16]
 800e8e6:	dd19      	ble.n	800e91c <__s2b+0x64>
 800e8e8:	f104 0809 	add.w	r8, r4, #9
 800e8ec:	46c1      	mov	r9, r8
 800e8ee:	442c      	add	r4, r5
 800e8f0:	f819 3b01 	ldrb.w	r3, [r9], #1
 800e8f4:	4601      	mov	r1, r0
 800e8f6:	3b30      	subs	r3, #48	; 0x30
 800e8f8:	220a      	movs	r2, #10
 800e8fa:	4630      	mov	r0, r6
 800e8fc:	f7ff ffa1 	bl	800e842 <__multadd>
 800e900:	45a1      	cmp	r9, r4
 800e902:	d1f5      	bne.n	800e8f0 <__s2b+0x38>
 800e904:	eb08 0405 	add.w	r4, r8, r5
 800e908:	3c08      	subs	r4, #8
 800e90a:	1b2d      	subs	r5, r5, r4
 800e90c:	1963      	adds	r3, r4, r5
 800e90e:	42bb      	cmp	r3, r7
 800e910:	db07      	blt.n	800e922 <__s2b+0x6a>
 800e912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e916:	0052      	lsls	r2, r2, #1
 800e918:	3101      	adds	r1, #1
 800e91a:	e7d9      	b.n	800e8d0 <__s2b+0x18>
 800e91c:	340a      	adds	r4, #10
 800e91e:	2509      	movs	r5, #9
 800e920:	e7f3      	b.n	800e90a <__s2b+0x52>
 800e922:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e926:	4601      	mov	r1, r0
 800e928:	3b30      	subs	r3, #48	; 0x30
 800e92a:	220a      	movs	r2, #10
 800e92c:	4630      	mov	r0, r6
 800e92e:	f7ff ff88 	bl	800e842 <__multadd>
 800e932:	e7eb      	b.n	800e90c <__s2b+0x54>

0800e934 <__hi0bits>:
 800e934:	0c02      	lsrs	r2, r0, #16
 800e936:	0412      	lsls	r2, r2, #16
 800e938:	4603      	mov	r3, r0
 800e93a:	b9b2      	cbnz	r2, 800e96a <__hi0bits+0x36>
 800e93c:	0403      	lsls	r3, r0, #16
 800e93e:	2010      	movs	r0, #16
 800e940:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e944:	bf04      	itt	eq
 800e946:	021b      	lsleq	r3, r3, #8
 800e948:	3008      	addeq	r0, #8
 800e94a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e94e:	bf04      	itt	eq
 800e950:	011b      	lsleq	r3, r3, #4
 800e952:	3004      	addeq	r0, #4
 800e954:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e958:	bf04      	itt	eq
 800e95a:	009b      	lsleq	r3, r3, #2
 800e95c:	3002      	addeq	r0, #2
 800e95e:	2b00      	cmp	r3, #0
 800e960:	db06      	blt.n	800e970 <__hi0bits+0x3c>
 800e962:	005b      	lsls	r3, r3, #1
 800e964:	d503      	bpl.n	800e96e <__hi0bits+0x3a>
 800e966:	3001      	adds	r0, #1
 800e968:	4770      	bx	lr
 800e96a:	2000      	movs	r0, #0
 800e96c:	e7e8      	b.n	800e940 <__hi0bits+0xc>
 800e96e:	2020      	movs	r0, #32
 800e970:	4770      	bx	lr

0800e972 <__lo0bits>:
 800e972:	6803      	ldr	r3, [r0, #0]
 800e974:	f013 0207 	ands.w	r2, r3, #7
 800e978:	4601      	mov	r1, r0
 800e97a:	d00b      	beq.n	800e994 <__lo0bits+0x22>
 800e97c:	07da      	lsls	r2, r3, #31
 800e97e:	d423      	bmi.n	800e9c8 <__lo0bits+0x56>
 800e980:	0798      	lsls	r0, r3, #30
 800e982:	bf49      	itett	mi
 800e984:	085b      	lsrmi	r3, r3, #1
 800e986:	089b      	lsrpl	r3, r3, #2
 800e988:	2001      	movmi	r0, #1
 800e98a:	600b      	strmi	r3, [r1, #0]
 800e98c:	bf5c      	itt	pl
 800e98e:	600b      	strpl	r3, [r1, #0]
 800e990:	2002      	movpl	r0, #2
 800e992:	4770      	bx	lr
 800e994:	b298      	uxth	r0, r3
 800e996:	b9a8      	cbnz	r0, 800e9c4 <__lo0bits+0x52>
 800e998:	0c1b      	lsrs	r3, r3, #16
 800e99a:	2010      	movs	r0, #16
 800e99c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e9a0:	bf04      	itt	eq
 800e9a2:	0a1b      	lsreq	r3, r3, #8
 800e9a4:	3008      	addeq	r0, #8
 800e9a6:	071a      	lsls	r2, r3, #28
 800e9a8:	bf04      	itt	eq
 800e9aa:	091b      	lsreq	r3, r3, #4
 800e9ac:	3004      	addeq	r0, #4
 800e9ae:	079a      	lsls	r2, r3, #30
 800e9b0:	bf04      	itt	eq
 800e9b2:	089b      	lsreq	r3, r3, #2
 800e9b4:	3002      	addeq	r0, #2
 800e9b6:	07da      	lsls	r2, r3, #31
 800e9b8:	d402      	bmi.n	800e9c0 <__lo0bits+0x4e>
 800e9ba:	085b      	lsrs	r3, r3, #1
 800e9bc:	d006      	beq.n	800e9cc <__lo0bits+0x5a>
 800e9be:	3001      	adds	r0, #1
 800e9c0:	600b      	str	r3, [r1, #0]
 800e9c2:	4770      	bx	lr
 800e9c4:	4610      	mov	r0, r2
 800e9c6:	e7e9      	b.n	800e99c <__lo0bits+0x2a>
 800e9c8:	2000      	movs	r0, #0
 800e9ca:	4770      	bx	lr
 800e9cc:	2020      	movs	r0, #32
 800e9ce:	4770      	bx	lr

0800e9d0 <__i2b>:
 800e9d0:	b510      	push	{r4, lr}
 800e9d2:	460c      	mov	r4, r1
 800e9d4:	2101      	movs	r1, #1
 800e9d6:	f7ff fee9 	bl	800e7ac <_Balloc>
 800e9da:	2201      	movs	r2, #1
 800e9dc:	6144      	str	r4, [r0, #20]
 800e9de:	6102      	str	r2, [r0, #16]
 800e9e0:	bd10      	pop	{r4, pc}

0800e9e2 <__multiply>:
 800e9e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e6:	4614      	mov	r4, r2
 800e9e8:	690a      	ldr	r2, [r1, #16]
 800e9ea:	6923      	ldr	r3, [r4, #16]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	bfb8      	it	lt
 800e9f0:	460b      	movlt	r3, r1
 800e9f2:	4688      	mov	r8, r1
 800e9f4:	bfbc      	itt	lt
 800e9f6:	46a0      	movlt	r8, r4
 800e9f8:	461c      	movlt	r4, r3
 800e9fa:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e9fe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ea02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ea06:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ea0a:	eb07 0609 	add.w	r6, r7, r9
 800ea0e:	42b3      	cmp	r3, r6
 800ea10:	bfb8      	it	lt
 800ea12:	3101      	addlt	r1, #1
 800ea14:	f7ff feca 	bl	800e7ac <_Balloc>
 800ea18:	f100 0514 	add.w	r5, r0, #20
 800ea1c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800ea20:	462b      	mov	r3, r5
 800ea22:	2200      	movs	r2, #0
 800ea24:	4573      	cmp	r3, lr
 800ea26:	d316      	bcc.n	800ea56 <__multiply+0x74>
 800ea28:	f104 0214 	add.w	r2, r4, #20
 800ea2c:	f108 0114 	add.w	r1, r8, #20
 800ea30:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800ea34:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800ea38:	9300      	str	r3, [sp, #0]
 800ea3a:	9b00      	ldr	r3, [sp, #0]
 800ea3c:	9201      	str	r2, [sp, #4]
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d80c      	bhi.n	800ea5c <__multiply+0x7a>
 800ea42:	2e00      	cmp	r6, #0
 800ea44:	dd03      	ble.n	800ea4e <__multiply+0x6c>
 800ea46:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d05d      	beq.n	800eb0a <__multiply+0x128>
 800ea4e:	6106      	str	r6, [r0, #16]
 800ea50:	b003      	add	sp, #12
 800ea52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea56:	f843 2b04 	str.w	r2, [r3], #4
 800ea5a:	e7e3      	b.n	800ea24 <__multiply+0x42>
 800ea5c:	f8b2 b000 	ldrh.w	fp, [r2]
 800ea60:	f1bb 0f00 	cmp.w	fp, #0
 800ea64:	d023      	beq.n	800eaae <__multiply+0xcc>
 800ea66:	4689      	mov	r9, r1
 800ea68:	46ac      	mov	ip, r5
 800ea6a:	f04f 0800 	mov.w	r8, #0
 800ea6e:	f859 4b04 	ldr.w	r4, [r9], #4
 800ea72:	f8dc a000 	ldr.w	sl, [ip]
 800ea76:	b2a3      	uxth	r3, r4
 800ea78:	fa1f fa8a 	uxth.w	sl, sl
 800ea7c:	fb0b a303 	mla	r3, fp, r3, sl
 800ea80:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ea84:	f8dc 4000 	ldr.w	r4, [ip]
 800ea88:	4443      	add	r3, r8
 800ea8a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ea8e:	fb0b 840a 	mla	r4, fp, sl, r8
 800ea92:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ea96:	46e2      	mov	sl, ip
 800ea98:	b29b      	uxth	r3, r3
 800ea9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ea9e:	454f      	cmp	r7, r9
 800eaa0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800eaa4:	f84a 3b04 	str.w	r3, [sl], #4
 800eaa8:	d82b      	bhi.n	800eb02 <__multiply+0x120>
 800eaaa:	f8cc 8004 	str.w	r8, [ip, #4]
 800eaae:	9b01      	ldr	r3, [sp, #4]
 800eab0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800eab4:	3204      	adds	r2, #4
 800eab6:	f1ba 0f00 	cmp.w	sl, #0
 800eaba:	d020      	beq.n	800eafe <__multiply+0x11c>
 800eabc:	682b      	ldr	r3, [r5, #0]
 800eabe:	4689      	mov	r9, r1
 800eac0:	46a8      	mov	r8, r5
 800eac2:	f04f 0b00 	mov.w	fp, #0
 800eac6:	f8b9 c000 	ldrh.w	ip, [r9]
 800eaca:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800eace:	fb0a 440c 	mla	r4, sl, ip, r4
 800ead2:	445c      	add	r4, fp
 800ead4:	46c4      	mov	ip, r8
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800eadc:	f84c 3b04 	str.w	r3, [ip], #4
 800eae0:	f859 3b04 	ldr.w	r3, [r9], #4
 800eae4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800eae8:	0c1b      	lsrs	r3, r3, #16
 800eaea:	fb0a b303 	mla	r3, sl, r3, fp
 800eaee:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800eaf2:	454f      	cmp	r7, r9
 800eaf4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800eaf8:	d805      	bhi.n	800eb06 <__multiply+0x124>
 800eafa:	f8c8 3004 	str.w	r3, [r8, #4]
 800eafe:	3504      	adds	r5, #4
 800eb00:	e79b      	b.n	800ea3a <__multiply+0x58>
 800eb02:	46d4      	mov	ip, sl
 800eb04:	e7b3      	b.n	800ea6e <__multiply+0x8c>
 800eb06:	46e0      	mov	r8, ip
 800eb08:	e7dd      	b.n	800eac6 <__multiply+0xe4>
 800eb0a:	3e01      	subs	r6, #1
 800eb0c:	e799      	b.n	800ea42 <__multiply+0x60>
	...

0800eb10 <__pow5mult>:
 800eb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb14:	4615      	mov	r5, r2
 800eb16:	f012 0203 	ands.w	r2, r2, #3
 800eb1a:	4606      	mov	r6, r0
 800eb1c:	460f      	mov	r7, r1
 800eb1e:	d007      	beq.n	800eb30 <__pow5mult+0x20>
 800eb20:	3a01      	subs	r2, #1
 800eb22:	4c21      	ldr	r4, [pc, #132]	; (800eba8 <__pow5mult+0x98>)
 800eb24:	2300      	movs	r3, #0
 800eb26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb2a:	f7ff fe8a 	bl	800e842 <__multadd>
 800eb2e:	4607      	mov	r7, r0
 800eb30:	10ad      	asrs	r5, r5, #2
 800eb32:	d035      	beq.n	800eba0 <__pow5mult+0x90>
 800eb34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eb36:	b93c      	cbnz	r4, 800eb48 <__pow5mult+0x38>
 800eb38:	2010      	movs	r0, #16
 800eb3a:	f7ff fe1d 	bl	800e778 <malloc>
 800eb3e:	6270      	str	r0, [r6, #36]	; 0x24
 800eb40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb44:	6004      	str	r4, [r0, #0]
 800eb46:	60c4      	str	r4, [r0, #12]
 800eb48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eb4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb50:	b94c      	cbnz	r4, 800eb66 <__pow5mult+0x56>
 800eb52:	f240 2171 	movw	r1, #625	; 0x271
 800eb56:	4630      	mov	r0, r6
 800eb58:	f7ff ff3a 	bl	800e9d0 <__i2b>
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb62:	4604      	mov	r4, r0
 800eb64:	6003      	str	r3, [r0, #0]
 800eb66:	f04f 0800 	mov.w	r8, #0
 800eb6a:	07eb      	lsls	r3, r5, #31
 800eb6c:	d50a      	bpl.n	800eb84 <__pow5mult+0x74>
 800eb6e:	4639      	mov	r1, r7
 800eb70:	4622      	mov	r2, r4
 800eb72:	4630      	mov	r0, r6
 800eb74:	f7ff ff35 	bl	800e9e2 <__multiply>
 800eb78:	4639      	mov	r1, r7
 800eb7a:	4681      	mov	r9, r0
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	f7ff fe49 	bl	800e814 <_Bfree>
 800eb82:	464f      	mov	r7, r9
 800eb84:	106d      	asrs	r5, r5, #1
 800eb86:	d00b      	beq.n	800eba0 <__pow5mult+0x90>
 800eb88:	6820      	ldr	r0, [r4, #0]
 800eb8a:	b938      	cbnz	r0, 800eb9c <__pow5mult+0x8c>
 800eb8c:	4622      	mov	r2, r4
 800eb8e:	4621      	mov	r1, r4
 800eb90:	4630      	mov	r0, r6
 800eb92:	f7ff ff26 	bl	800e9e2 <__multiply>
 800eb96:	6020      	str	r0, [r4, #0]
 800eb98:	f8c0 8000 	str.w	r8, [r0]
 800eb9c:	4604      	mov	r4, r0
 800eb9e:	e7e4      	b.n	800eb6a <__pow5mult+0x5a>
 800eba0:	4638      	mov	r0, r7
 800eba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eba6:	bf00      	nop
 800eba8:	08010290 	.word	0x08010290

0800ebac <__lshift>:
 800ebac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebb0:	460c      	mov	r4, r1
 800ebb2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ebb6:	6923      	ldr	r3, [r4, #16]
 800ebb8:	6849      	ldr	r1, [r1, #4]
 800ebba:	eb0a 0903 	add.w	r9, sl, r3
 800ebbe:	68a3      	ldr	r3, [r4, #8]
 800ebc0:	4607      	mov	r7, r0
 800ebc2:	4616      	mov	r6, r2
 800ebc4:	f109 0501 	add.w	r5, r9, #1
 800ebc8:	42ab      	cmp	r3, r5
 800ebca:	db32      	blt.n	800ec32 <__lshift+0x86>
 800ebcc:	4638      	mov	r0, r7
 800ebce:	f7ff fded 	bl	800e7ac <_Balloc>
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	4680      	mov	r8, r0
 800ebd6:	f100 0114 	add.w	r1, r0, #20
 800ebda:	461a      	mov	r2, r3
 800ebdc:	4553      	cmp	r3, sl
 800ebde:	db2b      	blt.n	800ec38 <__lshift+0x8c>
 800ebe0:	6920      	ldr	r0, [r4, #16]
 800ebe2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ebe6:	f104 0314 	add.w	r3, r4, #20
 800ebea:	f016 021f 	ands.w	r2, r6, #31
 800ebee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ebf2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ebf6:	d025      	beq.n	800ec44 <__lshift+0x98>
 800ebf8:	f1c2 0e20 	rsb	lr, r2, #32
 800ebfc:	2000      	movs	r0, #0
 800ebfe:	681e      	ldr	r6, [r3, #0]
 800ec00:	468a      	mov	sl, r1
 800ec02:	4096      	lsls	r6, r2
 800ec04:	4330      	orrs	r0, r6
 800ec06:	f84a 0b04 	str.w	r0, [sl], #4
 800ec0a:	f853 0b04 	ldr.w	r0, [r3], #4
 800ec0e:	459c      	cmp	ip, r3
 800ec10:	fa20 f00e 	lsr.w	r0, r0, lr
 800ec14:	d814      	bhi.n	800ec40 <__lshift+0x94>
 800ec16:	6048      	str	r0, [r1, #4]
 800ec18:	b108      	cbz	r0, 800ec1e <__lshift+0x72>
 800ec1a:	f109 0502 	add.w	r5, r9, #2
 800ec1e:	3d01      	subs	r5, #1
 800ec20:	4638      	mov	r0, r7
 800ec22:	f8c8 5010 	str.w	r5, [r8, #16]
 800ec26:	4621      	mov	r1, r4
 800ec28:	f7ff fdf4 	bl	800e814 <_Bfree>
 800ec2c:	4640      	mov	r0, r8
 800ec2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec32:	3101      	adds	r1, #1
 800ec34:	005b      	lsls	r3, r3, #1
 800ec36:	e7c7      	b.n	800ebc8 <__lshift+0x1c>
 800ec38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ec3c:	3301      	adds	r3, #1
 800ec3e:	e7cd      	b.n	800ebdc <__lshift+0x30>
 800ec40:	4651      	mov	r1, sl
 800ec42:	e7dc      	b.n	800ebfe <__lshift+0x52>
 800ec44:	3904      	subs	r1, #4
 800ec46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec4a:	f841 2f04 	str.w	r2, [r1, #4]!
 800ec4e:	459c      	cmp	ip, r3
 800ec50:	d8f9      	bhi.n	800ec46 <__lshift+0x9a>
 800ec52:	e7e4      	b.n	800ec1e <__lshift+0x72>

0800ec54 <__mcmp>:
 800ec54:	6903      	ldr	r3, [r0, #16]
 800ec56:	690a      	ldr	r2, [r1, #16]
 800ec58:	1a9b      	subs	r3, r3, r2
 800ec5a:	b530      	push	{r4, r5, lr}
 800ec5c:	d10c      	bne.n	800ec78 <__mcmp+0x24>
 800ec5e:	0092      	lsls	r2, r2, #2
 800ec60:	3014      	adds	r0, #20
 800ec62:	3114      	adds	r1, #20
 800ec64:	1884      	adds	r4, r0, r2
 800ec66:	4411      	add	r1, r2
 800ec68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ec6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ec70:	4295      	cmp	r5, r2
 800ec72:	d003      	beq.n	800ec7c <__mcmp+0x28>
 800ec74:	d305      	bcc.n	800ec82 <__mcmp+0x2e>
 800ec76:	2301      	movs	r3, #1
 800ec78:	4618      	mov	r0, r3
 800ec7a:	bd30      	pop	{r4, r5, pc}
 800ec7c:	42a0      	cmp	r0, r4
 800ec7e:	d3f3      	bcc.n	800ec68 <__mcmp+0x14>
 800ec80:	e7fa      	b.n	800ec78 <__mcmp+0x24>
 800ec82:	f04f 33ff 	mov.w	r3, #4294967295
 800ec86:	e7f7      	b.n	800ec78 <__mcmp+0x24>

0800ec88 <__mdiff>:
 800ec88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec8c:	460d      	mov	r5, r1
 800ec8e:	4607      	mov	r7, r0
 800ec90:	4611      	mov	r1, r2
 800ec92:	4628      	mov	r0, r5
 800ec94:	4614      	mov	r4, r2
 800ec96:	f7ff ffdd 	bl	800ec54 <__mcmp>
 800ec9a:	1e06      	subs	r6, r0, #0
 800ec9c:	d108      	bne.n	800ecb0 <__mdiff+0x28>
 800ec9e:	4631      	mov	r1, r6
 800eca0:	4638      	mov	r0, r7
 800eca2:	f7ff fd83 	bl	800e7ac <_Balloc>
 800eca6:	2301      	movs	r3, #1
 800eca8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ecac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ecb0:	bfa4      	itt	ge
 800ecb2:	4623      	movge	r3, r4
 800ecb4:	462c      	movge	r4, r5
 800ecb6:	4638      	mov	r0, r7
 800ecb8:	6861      	ldr	r1, [r4, #4]
 800ecba:	bfa6      	itte	ge
 800ecbc:	461d      	movge	r5, r3
 800ecbe:	2600      	movge	r6, #0
 800ecc0:	2601      	movlt	r6, #1
 800ecc2:	f7ff fd73 	bl	800e7ac <_Balloc>
 800ecc6:	692b      	ldr	r3, [r5, #16]
 800ecc8:	60c6      	str	r6, [r0, #12]
 800ecca:	6926      	ldr	r6, [r4, #16]
 800eccc:	f105 0914 	add.w	r9, r5, #20
 800ecd0:	f104 0214 	add.w	r2, r4, #20
 800ecd4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ecd8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ecdc:	f100 0514 	add.w	r5, r0, #20
 800ece0:	f04f 0e00 	mov.w	lr, #0
 800ece4:	f852 ab04 	ldr.w	sl, [r2], #4
 800ece8:	f859 4b04 	ldr.w	r4, [r9], #4
 800ecec:	fa1e f18a 	uxtah	r1, lr, sl
 800ecf0:	b2a3      	uxth	r3, r4
 800ecf2:	1ac9      	subs	r1, r1, r3
 800ecf4:	0c23      	lsrs	r3, r4, #16
 800ecf6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ecfa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ecfe:	b289      	uxth	r1, r1
 800ed00:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ed04:	45c8      	cmp	r8, r9
 800ed06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ed0a:	4694      	mov	ip, r2
 800ed0c:	f845 3b04 	str.w	r3, [r5], #4
 800ed10:	d8e8      	bhi.n	800ece4 <__mdiff+0x5c>
 800ed12:	45bc      	cmp	ip, r7
 800ed14:	d304      	bcc.n	800ed20 <__mdiff+0x98>
 800ed16:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ed1a:	b183      	cbz	r3, 800ed3e <__mdiff+0xb6>
 800ed1c:	6106      	str	r6, [r0, #16]
 800ed1e:	e7c5      	b.n	800ecac <__mdiff+0x24>
 800ed20:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ed24:	fa1e f381 	uxtah	r3, lr, r1
 800ed28:	141a      	asrs	r2, r3, #16
 800ed2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ed2e:	b29b      	uxth	r3, r3
 800ed30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ed34:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ed38:	f845 3b04 	str.w	r3, [r5], #4
 800ed3c:	e7e9      	b.n	800ed12 <__mdiff+0x8a>
 800ed3e:	3e01      	subs	r6, #1
 800ed40:	e7e9      	b.n	800ed16 <__mdiff+0x8e>
	...

0800ed44 <__ulp>:
 800ed44:	4b12      	ldr	r3, [pc, #72]	; (800ed90 <__ulp+0x4c>)
 800ed46:	ee10 2a90 	vmov	r2, s1
 800ed4a:	401a      	ands	r2, r3
 800ed4c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	dd04      	ble.n	800ed5e <__ulp+0x1a>
 800ed54:	2000      	movs	r0, #0
 800ed56:	4619      	mov	r1, r3
 800ed58:	ec41 0b10 	vmov	d0, r0, r1
 800ed5c:	4770      	bx	lr
 800ed5e:	425b      	negs	r3, r3
 800ed60:	151b      	asrs	r3, r3, #20
 800ed62:	2b13      	cmp	r3, #19
 800ed64:	f04f 0000 	mov.w	r0, #0
 800ed68:	f04f 0100 	mov.w	r1, #0
 800ed6c:	dc04      	bgt.n	800ed78 <__ulp+0x34>
 800ed6e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ed72:	fa42 f103 	asr.w	r1, r2, r3
 800ed76:	e7ef      	b.n	800ed58 <__ulp+0x14>
 800ed78:	3b14      	subs	r3, #20
 800ed7a:	2b1e      	cmp	r3, #30
 800ed7c:	f04f 0201 	mov.w	r2, #1
 800ed80:	bfda      	itte	le
 800ed82:	f1c3 031f 	rsble	r3, r3, #31
 800ed86:	fa02 f303 	lslle.w	r3, r2, r3
 800ed8a:	4613      	movgt	r3, r2
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	e7e3      	b.n	800ed58 <__ulp+0x14>
 800ed90:	7ff00000 	.word	0x7ff00000

0800ed94 <__b2d>:
 800ed94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed96:	6905      	ldr	r5, [r0, #16]
 800ed98:	f100 0714 	add.w	r7, r0, #20
 800ed9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800eda0:	1f2e      	subs	r6, r5, #4
 800eda2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800eda6:	4620      	mov	r0, r4
 800eda8:	f7ff fdc4 	bl	800e934 <__hi0bits>
 800edac:	f1c0 0320 	rsb	r3, r0, #32
 800edb0:	280a      	cmp	r0, #10
 800edb2:	600b      	str	r3, [r1, #0]
 800edb4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800ee2c <__b2d+0x98>
 800edb8:	dc14      	bgt.n	800ede4 <__b2d+0x50>
 800edba:	f1c0 0e0b 	rsb	lr, r0, #11
 800edbe:	fa24 f10e 	lsr.w	r1, r4, lr
 800edc2:	42b7      	cmp	r7, r6
 800edc4:	ea41 030c 	orr.w	r3, r1, ip
 800edc8:	bf34      	ite	cc
 800edca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800edce:	2100      	movcs	r1, #0
 800edd0:	3015      	adds	r0, #21
 800edd2:	fa04 f000 	lsl.w	r0, r4, r0
 800edd6:	fa21 f10e 	lsr.w	r1, r1, lr
 800edda:	ea40 0201 	orr.w	r2, r0, r1
 800edde:	ec43 2b10 	vmov	d0, r2, r3
 800ede2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ede4:	42b7      	cmp	r7, r6
 800ede6:	bf3a      	itte	cc
 800ede8:	f1a5 0608 	subcc.w	r6, r5, #8
 800edec:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800edf0:	2100      	movcs	r1, #0
 800edf2:	380b      	subs	r0, #11
 800edf4:	d015      	beq.n	800ee22 <__b2d+0x8e>
 800edf6:	4084      	lsls	r4, r0
 800edf8:	f1c0 0520 	rsb	r5, r0, #32
 800edfc:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800ee00:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800ee04:	42be      	cmp	r6, r7
 800ee06:	fa21 fc05 	lsr.w	ip, r1, r5
 800ee0a:	ea44 030c 	orr.w	r3, r4, ip
 800ee0e:	bf8c      	ite	hi
 800ee10:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ee14:	2400      	movls	r4, #0
 800ee16:	fa01 f000 	lsl.w	r0, r1, r0
 800ee1a:	40ec      	lsrs	r4, r5
 800ee1c:	ea40 0204 	orr.w	r2, r0, r4
 800ee20:	e7dd      	b.n	800edde <__b2d+0x4a>
 800ee22:	ea44 030c 	orr.w	r3, r4, ip
 800ee26:	460a      	mov	r2, r1
 800ee28:	e7d9      	b.n	800edde <__b2d+0x4a>
 800ee2a:	bf00      	nop
 800ee2c:	3ff00000 	.word	0x3ff00000

0800ee30 <__d2b>:
 800ee30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ee34:	460e      	mov	r6, r1
 800ee36:	2101      	movs	r1, #1
 800ee38:	ec59 8b10 	vmov	r8, r9, d0
 800ee3c:	4615      	mov	r5, r2
 800ee3e:	f7ff fcb5 	bl	800e7ac <_Balloc>
 800ee42:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ee46:	4607      	mov	r7, r0
 800ee48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ee4c:	bb34      	cbnz	r4, 800ee9c <__d2b+0x6c>
 800ee4e:	9301      	str	r3, [sp, #4]
 800ee50:	f1b8 0300 	subs.w	r3, r8, #0
 800ee54:	d027      	beq.n	800eea6 <__d2b+0x76>
 800ee56:	a802      	add	r0, sp, #8
 800ee58:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ee5c:	f7ff fd89 	bl	800e972 <__lo0bits>
 800ee60:	9900      	ldr	r1, [sp, #0]
 800ee62:	b1f0      	cbz	r0, 800eea2 <__d2b+0x72>
 800ee64:	9a01      	ldr	r2, [sp, #4]
 800ee66:	f1c0 0320 	rsb	r3, r0, #32
 800ee6a:	fa02 f303 	lsl.w	r3, r2, r3
 800ee6e:	430b      	orrs	r3, r1
 800ee70:	40c2      	lsrs	r2, r0
 800ee72:	617b      	str	r3, [r7, #20]
 800ee74:	9201      	str	r2, [sp, #4]
 800ee76:	9b01      	ldr	r3, [sp, #4]
 800ee78:	61bb      	str	r3, [r7, #24]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	bf14      	ite	ne
 800ee7e:	2102      	movne	r1, #2
 800ee80:	2101      	moveq	r1, #1
 800ee82:	6139      	str	r1, [r7, #16]
 800ee84:	b1c4      	cbz	r4, 800eeb8 <__d2b+0x88>
 800ee86:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ee8a:	4404      	add	r4, r0
 800ee8c:	6034      	str	r4, [r6, #0]
 800ee8e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ee92:	6028      	str	r0, [r5, #0]
 800ee94:	4638      	mov	r0, r7
 800ee96:	b003      	add	sp, #12
 800ee98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eea0:	e7d5      	b.n	800ee4e <__d2b+0x1e>
 800eea2:	6179      	str	r1, [r7, #20]
 800eea4:	e7e7      	b.n	800ee76 <__d2b+0x46>
 800eea6:	a801      	add	r0, sp, #4
 800eea8:	f7ff fd63 	bl	800e972 <__lo0bits>
 800eeac:	9b01      	ldr	r3, [sp, #4]
 800eeae:	617b      	str	r3, [r7, #20]
 800eeb0:	2101      	movs	r1, #1
 800eeb2:	6139      	str	r1, [r7, #16]
 800eeb4:	3020      	adds	r0, #32
 800eeb6:	e7e5      	b.n	800ee84 <__d2b+0x54>
 800eeb8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800eebc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800eec0:	6030      	str	r0, [r6, #0]
 800eec2:	6918      	ldr	r0, [r3, #16]
 800eec4:	f7ff fd36 	bl	800e934 <__hi0bits>
 800eec8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800eecc:	e7e1      	b.n	800ee92 <__d2b+0x62>

0800eece <__ratio>:
 800eece:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed2:	4688      	mov	r8, r1
 800eed4:	4669      	mov	r1, sp
 800eed6:	4681      	mov	r9, r0
 800eed8:	f7ff ff5c 	bl	800ed94 <__b2d>
 800eedc:	a901      	add	r1, sp, #4
 800eede:	4640      	mov	r0, r8
 800eee0:	ec57 6b10 	vmov	r6, r7, d0
 800eee4:	f7ff ff56 	bl	800ed94 <__b2d>
 800eee8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eeec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800eef0:	eba3 0c02 	sub.w	ip, r3, r2
 800eef4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eef8:	1a9b      	subs	r3, r3, r2
 800eefa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800eefe:	ec5b ab10 	vmov	sl, fp, d0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	bfce      	itee	gt
 800ef06:	463a      	movgt	r2, r7
 800ef08:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ef0c:	465a      	movle	r2, fp
 800ef0e:	4659      	mov	r1, fp
 800ef10:	463d      	mov	r5, r7
 800ef12:	bfd4      	ite	le
 800ef14:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800ef18:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800ef1c:	4630      	mov	r0, r6
 800ef1e:	ee10 2a10 	vmov	r2, s0
 800ef22:	460b      	mov	r3, r1
 800ef24:	4629      	mov	r1, r5
 800ef26:	f7f1 fcb1 	bl	800088c <__aeabi_ddiv>
 800ef2a:	ec41 0b10 	vmov	d0, r0, r1
 800ef2e:	b003      	add	sp, #12
 800ef30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ef34 <__copybits>:
 800ef34:	3901      	subs	r1, #1
 800ef36:	b510      	push	{r4, lr}
 800ef38:	1149      	asrs	r1, r1, #5
 800ef3a:	6914      	ldr	r4, [r2, #16]
 800ef3c:	3101      	adds	r1, #1
 800ef3e:	f102 0314 	add.w	r3, r2, #20
 800ef42:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ef46:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ef4a:	42a3      	cmp	r3, r4
 800ef4c:	4602      	mov	r2, r0
 800ef4e:	d303      	bcc.n	800ef58 <__copybits+0x24>
 800ef50:	2300      	movs	r3, #0
 800ef52:	428a      	cmp	r2, r1
 800ef54:	d305      	bcc.n	800ef62 <__copybits+0x2e>
 800ef56:	bd10      	pop	{r4, pc}
 800ef58:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef5c:	f840 2b04 	str.w	r2, [r0], #4
 800ef60:	e7f3      	b.n	800ef4a <__copybits+0x16>
 800ef62:	f842 3b04 	str.w	r3, [r2], #4
 800ef66:	e7f4      	b.n	800ef52 <__copybits+0x1e>

0800ef68 <__any_on>:
 800ef68:	f100 0214 	add.w	r2, r0, #20
 800ef6c:	6900      	ldr	r0, [r0, #16]
 800ef6e:	114b      	asrs	r3, r1, #5
 800ef70:	4298      	cmp	r0, r3
 800ef72:	b510      	push	{r4, lr}
 800ef74:	db11      	blt.n	800ef9a <__any_on+0x32>
 800ef76:	dd0a      	ble.n	800ef8e <__any_on+0x26>
 800ef78:	f011 011f 	ands.w	r1, r1, #31
 800ef7c:	d007      	beq.n	800ef8e <__any_on+0x26>
 800ef7e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ef82:	fa24 f001 	lsr.w	r0, r4, r1
 800ef86:	fa00 f101 	lsl.w	r1, r0, r1
 800ef8a:	428c      	cmp	r4, r1
 800ef8c:	d10b      	bne.n	800efa6 <__any_on+0x3e>
 800ef8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d803      	bhi.n	800ef9e <__any_on+0x36>
 800ef96:	2000      	movs	r0, #0
 800ef98:	bd10      	pop	{r4, pc}
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	e7f7      	b.n	800ef8e <__any_on+0x26>
 800ef9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800efa2:	2900      	cmp	r1, #0
 800efa4:	d0f5      	beq.n	800ef92 <__any_on+0x2a>
 800efa6:	2001      	movs	r0, #1
 800efa8:	e7f6      	b.n	800ef98 <__any_on+0x30>

0800efaa <_calloc_r>:
 800efaa:	b538      	push	{r3, r4, r5, lr}
 800efac:	fb02 f401 	mul.w	r4, r2, r1
 800efb0:	4621      	mov	r1, r4
 800efb2:	f000 f857 	bl	800f064 <_malloc_r>
 800efb6:	4605      	mov	r5, r0
 800efb8:	b118      	cbz	r0, 800efc2 <_calloc_r+0x18>
 800efba:	4622      	mov	r2, r4
 800efbc:	2100      	movs	r1, #0
 800efbe:	f7fc fc26 	bl	800b80e <memset>
 800efc2:	4628      	mov	r0, r5
 800efc4:	bd38      	pop	{r3, r4, r5, pc}
	...

0800efc8 <_free_r>:
 800efc8:	b538      	push	{r3, r4, r5, lr}
 800efca:	4605      	mov	r5, r0
 800efcc:	2900      	cmp	r1, #0
 800efce:	d045      	beq.n	800f05c <_free_r+0x94>
 800efd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800efd4:	1f0c      	subs	r4, r1, #4
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	bfb8      	it	lt
 800efda:	18e4      	addlt	r4, r4, r3
 800efdc:	f000 faa4 	bl	800f528 <__malloc_lock>
 800efe0:	4a1f      	ldr	r2, [pc, #124]	; (800f060 <_free_r+0x98>)
 800efe2:	6813      	ldr	r3, [r2, #0]
 800efe4:	4610      	mov	r0, r2
 800efe6:	b933      	cbnz	r3, 800eff6 <_free_r+0x2e>
 800efe8:	6063      	str	r3, [r4, #4]
 800efea:	6014      	str	r4, [r2, #0]
 800efec:	4628      	mov	r0, r5
 800efee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eff2:	f000 ba9a 	b.w	800f52a <__malloc_unlock>
 800eff6:	42a3      	cmp	r3, r4
 800eff8:	d90c      	bls.n	800f014 <_free_r+0x4c>
 800effa:	6821      	ldr	r1, [r4, #0]
 800effc:	1862      	adds	r2, r4, r1
 800effe:	4293      	cmp	r3, r2
 800f000:	bf04      	itt	eq
 800f002:	681a      	ldreq	r2, [r3, #0]
 800f004:	685b      	ldreq	r3, [r3, #4]
 800f006:	6063      	str	r3, [r4, #4]
 800f008:	bf04      	itt	eq
 800f00a:	1852      	addeq	r2, r2, r1
 800f00c:	6022      	streq	r2, [r4, #0]
 800f00e:	6004      	str	r4, [r0, #0]
 800f010:	e7ec      	b.n	800efec <_free_r+0x24>
 800f012:	4613      	mov	r3, r2
 800f014:	685a      	ldr	r2, [r3, #4]
 800f016:	b10a      	cbz	r2, 800f01c <_free_r+0x54>
 800f018:	42a2      	cmp	r2, r4
 800f01a:	d9fa      	bls.n	800f012 <_free_r+0x4a>
 800f01c:	6819      	ldr	r1, [r3, #0]
 800f01e:	1858      	adds	r0, r3, r1
 800f020:	42a0      	cmp	r0, r4
 800f022:	d10b      	bne.n	800f03c <_free_r+0x74>
 800f024:	6820      	ldr	r0, [r4, #0]
 800f026:	4401      	add	r1, r0
 800f028:	1858      	adds	r0, r3, r1
 800f02a:	4282      	cmp	r2, r0
 800f02c:	6019      	str	r1, [r3, #0]
 800f02e:	d1dd      	bne.n	800efec <_free_r+0x24>
 800f030:	6810      	ldr	r0, [r2, #0]
 800f032:	6852      	ldr	r2, [r2, #4]
 800f034:	605a      	str	r2, [r3, #4]
 800f036:	4401      	add	r1, r0
 800f038:	6019      	str	r1, [r3, #0]
 800f03a:	e7d7      	b.n	800efec <_free_r+0x24>
 800f03c:	d902      	bls.n	800f044 <_free_r+0x7c>
 800f03e:	230c      	movs	r3, #12
 800f040:	602b      	str	r3, [r5, #0]
 800f042:	e7d3      	b.n	800efec <_free_r+0x24>
 800f044:	6820      	ldr	r0, [r4, #0]
 800f046:	1821      	adds	r1, r4, r0
 800f048:	428a      	cmp	r2, r1
 800f04a:	bf04      	itt	eq
 800f04c:	6811      	ldreq	r1, [r2, #0]
 800f04e:	6852      	ldreq	r2, [r2, #4]
 800f050:	6062      	str	r2, [r4, #4]
 800f052:	bf04      	itt	eq
 800f054:	1809      	addeq	r1, r1, r0
 800f056:	6021      	streq	r1, [r4, #0]
 800f058:	605c      	str	r4, [r3, #4]
 800f05a:	e7c7      	b.n	800efec <_free_r+0x24>
 800f05c:	bd38      	pop	{r3, r4, r5, pc}
 800f05e:	bf00      	nop
 800f060:	20000240 	.word	0x20000240

0800f064 <_malloc_r>:
 800f064:	b570      	push	{r4, r5, r6, lr}
 800f066:	1ccd      	adds	r5, r1, #3
 800f068:	f025 0503 	bic.w	r5, r5, #3
 800f06c:	3508      	adds	r5, #8
 800f06e:	2d0c      	cmp	r5, #12
 800f070:	bf38      	it	cc
 800f072:	250c      	movcc	r5, #12
 800f074:	2d00      	cmp	r5, #0
 800f076:	4606      	mov	r6, r0
 800f078:	db01      	blt.n	800f07e <_malloc_r+0x1a>
 800f07a:	42a9      	cmp	r1, r5
 800f07c:	d903      	bls.n	800f086 <_malloc_r+0x22>
 800f07e:	230c      	movs	r3, #12
 800f080:	6033      	str	r3, [r6, #0]
 800f082:	2000      	movs	r0, #0
 800f084:	bd70      	pop	{r4, r5, r6, pc}
 800f086:	f000 fa4f 	bl	800f528 <__malloc_lock>
 800f08a:	4a21      	ldr	r2, [pc, #132]	; (800f110 <_malloc_r+0xac>)
 800f08c:	6814      	ldr	r4, [r2, #0]
 800f08e:	4621      	mov	r1, r4
 800f090:	b991      	cbnz	r1, 800f0b8 <_malloc_r+0x54>
 800f092:	4c20      	ldr	r4, [pc, #128]	; (800f114 <_malloc_r+0xb0>)
 800f094:	6823      	ldr	r3, [r4, #0]
 800f096:	b91b      	cbnz	r3, 800f0a0 <_malloc_r+0x3c>
 800f098:	4630      	mov	r0, r6
 800f09a:	f000 f97d 	bl	800f398 <_sbrk_r>
 800f09e:	6020      	str	r0, [r4, #0]
 800f0a0:	4629      	mov	r1, r5
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	f000 f978 	bl	800f398 <_sbrk_r>
 800f0a8:	1c43      	adds	r3, r0, #1
 800f0aa:	d124      	bne.n	800f0f6 <_malloc_r+0x92>
 800f0ac:	230c      	movs	r3, #12
 800f0ae:	6033      	str	r3, [r6, #0]
 800f0b0:	4630      	mov	r0, r6
 800f0b2:	f000 fa3a 	bl	800f52a <__malloc_unlock>
 800f0b6:	e7e4      	b.n	800f082 <_malloc_r+0x1e>
 800f0b8:	680b      	ldr	r3, [r1, #0]
 800f0ba:	1b5b      	subs	r3, r3, r5
 800f0bc:	d418      	bmi.n	800f0f0 <_malloc_r+0x8c>
 800f0be:	2b0b      	cmp	r3, #11
 800f0c0:	d90f      	bls.n	800f0e2 <_malloc_r+0x7e>
 800f0c2:	600b      	str	r3, [r1, #0]
 800f0c4:	50cd      	str	r5, [r1, r3]
 800f0c6:	18cc      	adds	r4, r1, r3
 800f0c8:	4630      	mov	r0, r6
 800f0ca:	f000 fa2e 	bl	800f52a <__malloc_unlock>
 800f0ce:	f104 000b 	add.w	r0, r4, #11
 800f0d2:	1d23      	adds	r3, r4, #4
 800f0d4:	f020 0007 	bic.w	r0, r0, #7
 800f0d8:	1ac3      	subs	r3, r0, r3
 800f0da:	d0d3      	beq.n	800f084 <_malloc_r+0x20>
 800f0dc:	425a      	negs	r2, r3
 800f0de:	50e2      	str	r2, [r4, r3]
 800f0e0:	e7d0      	b.n	800f084 <_malloc_r+0x20>
 800f0e2:	428c      	cmp	r4, r1
 800f0e4:	684b      	ldr	r3, [r1, #4]
 800f0e6:	bf16      	itet	ne
 800f0e8:	6063      	strne	r3, [r4, #4]
 800f0ea:	6013      	streq	r3, [r2, #0]
 800f0ec:	460c      	movne	r4, r1
 800f0ee:	e7eb      	b.n	800f0c8 <_malloc_r+0x64>
 800f0f0:	460c      	mov	r4, r1
 800f0f2:	6849      	ldr	r1, [r1, #4]
 800f0f4:	e7cc      	b.n	800f090 <_malloc_r+0x2c>
 800f0f6:	1cc4      	adds	r4, r0, #3
 800f0f8:	f024 0403 	bic.w	r4, r4, #3
 800f0fc:	42a0      	cmp	r0, r4
 800f0fe:	d005      	beq.n	800f10c <_malloc_r+0xa8>
 800f100:	1a21      	subs	r1, r4, r0
 800f102:	4630      	mov	r0, r6
 800f104:	f000 f948 	bl	800f398 <_sbrk_r>
 800f108:	3001      	adds	r0, #1
 800f10a:	d0cf      	beq.n	800f0ac <_malloc_r+0x48>
 800f10c:	6025      	str	r5, [r4, #0]
 800f10e:	e7db      	b.n	800f0c8 <_malloc_r+0x64>
 800f110:	20000240 	.word	0x20000240
 800f114:	20000244 	.word	0x20000244

0800f118 <__sfputc_r>:
 800f118:	6893      	ldr	r3, [r2, #8]
 800f11a:	3b01      	subs	r3, #1
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	b410      	push	{r4}
 800f120:	6093      	str	r3, [r2, #8]
 800f122:	da08      	bge.n	800f136 <__sfputc_r+0x1e>
 800f124:	6994      	ldr	r4, [r2, #24]
 800f126:	42a3      	cmp	r3, r4
 800f128:	db01      	blt.n	800f12e <__sfputc_r+0x16>
 800f12a:	290a      	cmp	r1, #10
 800f12c:	d103      	bne.n	800f136 <__sfputc_r+0x1e>
 800f12e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f132:	f7fd bf03 	b.w	800cf3c <__swbuf_r>
 800f136:	6813      	ldr	r3, [r2, #0]
 800f138:	1c58      	adds	r0, r3, #1
 800f13a:	6010      	str	r0, [r2, #0]
 800f13c:	7019      	strb	r1, [r3, #0]
 800f13e:	4608      	mov	r0, r1
 800f140:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f144:	4770      	bx	lr

0800f146 <__sfputs_r>:
 800f146:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f148:	4606      	mov	r6, r0
 800f14a:	460f      	mov	r7, r1
 800f14c:	4614      	mov	r4, r2
 800f14e:	18d5      	adds	r5, r2, r3
 800f150:	42ac      	cmp	r4, r5
 800f152:	d101      	bne.n	800f158 <__sfputs_r+0x12>
 800f154:	2000      	movs	r0, #0
 800f156:	e007      	b.n	800f168 <__sfputs_r+0x22>
 800f158:	463a      	mov	r2, r7
 800f15a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f15e:	4630      	mov	r0, r6
 800f160:	f7ff ffda 	bl	800f118 <__sfputc_r>
 800f164:	1c43      	adds	r3, r0, #1
 800f166:	d1f3      	bne.n	800f150 <__sfputs_r+0xa>
 800f168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f16c <_vfiprintf_r>:
 800f16c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f170:	460c      	mov	r4, r1
 800f172:	b09d      	sub	sp, #116	; 0x74
 800f174:	4617      	mov	r7, r2
 800f176:	461d      	mov	r5, r3
 800f178:	4606      	mov	r6, r0
 800f17a:	b118      	cbz	r0, 800f184 <_vfiprintf_r+0x18>
 800f17c:	6983      	ldr	r3, [r0, #24]
 800f17e:	b90b      	cbnz	r3, 800f184 <_vfiprintf_r+0x18>
 800f180:	f7fe fed2 	bl	800df28 <__sinit>
 800f184:	4b7c      	ldr	r3, [pc, #496]	; (800f378 <_vfiprintf_r+0x20c>)
 800f186:	429c      	cmp	r4, r3
 800f188:	d158      	bne.n	800f23c <_vfiprintf_r+0xd0>
 800f18a:	6874      	ldr	r4, [r6, #4]
 800f18c:	89a3      	ldrh	r3, [r4, #12]
 800f18e:	0718      	lsls	r0, r3, #28
 800f190:	d55e      	bpl.n	800f250 <_vfiprintf_r+0xe4>
 800f192:	6923      	ldr	r3, [r4, #16]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d05b      	beq.n	800f250 <_vfiprintf_r+0xe4>
 800f198:	2300      	movs	r3, #0
 800f19a:	9309      	str	r3, [sp, #36]	; 0x24
 800f19c:	2320      	movs	r3, #32
 800f19e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f1a2:	2330      	movs	r3, #48	; 0x30
 800f1a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f1a8:	9503      	str	r5, [sp, #12]
 800f1aa:	f04f 0b01 	mov.w	fp, #1
 800f1ae:	46b8      	mov	r8, r7
 800f1b0:	4645      	mov	r5, r8
 800f1b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f1b6:	b10b      	cbz	r3, 800f1bc <_vfiprintf_r+0x50>
 800f1b8:	2b25      	cmp	r3, #37	; 0x25
 800f1ba:	d154      	bne.n	800f266 <_vfiprintf_r+0xfa>
 800f1bc:	ebb8 0a07 	subs.w	sl, r8, r7
 800f1c0:	d00b      	beq.n	800f1da <_vfiprintf_r+0x6e>
 800f1c2:	4653      	mov	r3, sl
 800f1c4:	463a      	mov	r2, r7
 800f1c6:	4621      	mov	r1, r4
 800f1c8:	4630      	mov	r0, r6
 800f1ca:	f7ff ffbc 	bl	800f146 <__sfputs_r>
 800f1ce:	3001      	adds	r0, #1
 800f1d0:	f000 80c2 	beq.w	800f358 <_vfiprintf_r+0x1ec>
 800f1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1d6:	4453      	add	r3, sl
 800f1d8:	9309      	str	r3, [sp, #36]	; 0x24
 800f1da:	f898 3000 	ldrb.w	r3, [r8]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	f000 80ba 	beq.w	800f358 <_vfiprintf_r+0x1ec>
 800f1e4:	2300      	movs	r3, #0
 800f1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f1ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1ee:	9304      	str	r3, [sp, #16]
 800f1f0:	9307      	str	r3, [sp, #28]
 800f1f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f1f6:	931a      	str	r3, [sp, #104]	; 0x68
 800f1f8:	46a8      	mov	r8, r5
 800f1fa:	2205      	movs	r2, #5
 800f1fc:	f818 1b01 	ldrb.w	r1, [r8], #1
 800f200:	485e      	ldr	r0, [pc, #376]	; (800f37c <_vfiprintf_r+0x210>)
 800f202:	f7f1 f80d 	bl	8000220 <memchr>
 800f206:	9b04      	ldr	r3, [sp, #16]
 800f208:	bb78      	cbnz	r0, 800f26a <_vfiprintf_r+0xfe>
 800f20a:	06d9      	lsls	r1, r3, #27
 800f20c:	bf44      	itt	mi
 800f20e:	2220      	movmi	r2, #32
 800f210:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f214:	071a      	lsls	r2, r3, #28
 800f216:	bf44      	itt	mi
 800f218:	222b      	movmi	r2, #43	; 0x2b
 800f21a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f21e:	782a      	ldrb	r2, [r5, #0]
 800f220:	2a2a      	cmp	r2, #42	; 0x2a
 800f222:	d02a      	beq.n	800f27a <_vfiprintf_r+0x10e>
 800f224:	9a07      	ldr	r2, [sp, #28]
 800f226:	46a8      	mov	r8, r5
 800f228:	2000      	movs	r0, #0
 800f22a:	250a      	movs	r5, #10
 800f22c:	4641      	mov	r1, r8
 800f22e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f232:	3b30      	subs	r3, #48	; 0x30
 800f234:	2b09      	cmp	r3, #9
 800f236:	d969      	bls.n	800f30c <_vfiprintf_r+0x1a0>
 800f238:	b360      	cbz	r0, 800f294 <_vfiprintf_r+0x128>
 800f23a:	e024      	b.n	800f286 <_vfiprintf_r+0x11a>
 800f23c:	4b50      	ldr	r3, [pc, #320]	; (800f380 <_vfiprintf_r+0x214>)
 800f23e:	429c      	cmp	r4, r3
 800f240:	d101      	bne.n	800f246 <_vfiprintf_r+0xda>
 800f242:	68b4      	ldr	r4, [r6, #8]
 800f244:	e7a2      	b.n	800f18c <_vfiprintf_r+0x20>
 800f246:	4b4f      	ldr	r3, [pc, #316]	; (800f384 <_vfiprintf_r+0x218>)
 800f248:	429c      	cmp	r4, r3
 800f24a:	bf08      	it	eq
 800f24c:	68f4      	ldreq	r4, [r6, #12]
 800f24e:	e79d      	b.n	800f18c <_vfiprintf_r+0x20>
 800f250:	4621      	mov	r1, r4
 800f252:	4630      	mov	r0, r6
 800f254:	f7fd fec4 	bl	800cfe0 <__swsetup_r>
 800f258:	2800      	cmp	r0, #0
 800f25a:	d09d      	beq.n	800f198 <_vfiprintf_r+0x2c>
 800f25c:	f04f 30ff 	mov.w	r0, #4294967295
 800f260:	b01d      	add	sp, #116	; 0x74
 800f262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f266:	46a8      	mov	r8, r5
 800f268:	e7a2      	b.n	800f1b0 <_vfiprintf_r+0x44>
 800f26a:	4a44      	ldr	r2, [pc, #272]	; (800f37c <_vfiprintf_r+0x210>)
 800f26c:	1a80      	subs	r0, r0, r2
 800f26e:	fa0b f000 	lsl.w	r0, fp, r0
 800f272:	4318      	orrs	r0, r3
 800f274:	9004      	str	r0, [sp, #16]
 800f276:	4645      	mov	r5, r8
 800f278:	e7be      	b.n	800f1f8 <_vfiprintf_r+0x8c>
 800f27a:	9a03      	ldr	r2, [sp, #12]
 800f27c:	1d11      	adds	r1, r2, #4
 800f27e:	6812      	ldr	r2, [r2, #0]
 800f280:	9103      	str	r1, [sp, #12]
 800f282:	2a00      	cmp	r2, #0
 800f284:	db01      	blt.n	800f28a <_vfiprintf_r+0x11e>
 800f286:	9207      	str	r2, [sp, #28]
 800f288:	e004      	b.n	800f294 <_vfiprintf_r+0x128>
 800f28a:	4252      	negs	r2, r2
 800f28c:	f043 0302 	orr.w	r3, r3, #2
 800f290:	9207      	str	r2, [sp, #28]
 800f292:	9304      	str	r3, [sp, #16]
 800f294:	f898 3000 	ldrb.w	r3, [r8]
 800f298:	2b2e      	cmp	r3, #46	; 0x2e
 800f29a:	d10e      	bne.n	800f2ba <_vfiprintf_r+0x14e>
 800f29c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800f2a0:	2b2a      	cmp	r3, #42	; 0x2a
 800f2a2:	d138      	bne.n	800f316 <_vfiprintf_r+0x1aa>
 800f2a4:	9b03      	ldr	r3, [sp, #12]
 800f2a6:	1d1a      	adds	r2, r3, #4
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	9203      	str	r2, [sp, #12]
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	bfb8      	it	lt
 800f2b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f2b4:	f108 0802 	add.w	r8, r8, #2
 800f2b8:	9305      	str	r3, [sp, #20]
 800f2ba:	4d33      	ldr	r5, [pc, #204]	; (800f388 <_vfiprintf_r+0x21c>)
 800f2bc:	f898 1000 	ldrb.w	r1, [r8]
 800f2c0:	2203      	movs	r2, #3
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	f7f0 ffac 	bl	8000220 <memchr>
 800f2c8:	b140      	cbz	r0, 800f2dc <_vfiprintf_r+0x170>
 800f2ca:	2340      	movs	r3, #64	; 0x40
 800f2cc:	1b40      	subs	r0, r0, r5
 800f2ce:	fa03 f000 	lsl.w	r0, r3, r0
 800f2d2:	9b04      	ldr	r3, [sp, #16]
 800f2d4:	4303      	orrs	r3, r0
 800f2d6:	f108 0801 	add.w	r8, r8, #1
 800f2da:	9304      	str	r3, [sp, #16]
 800f2dc:	f898 1000 	ldrb.w	r1, [r8]
 800f2e0:	482a      	ldr	r0, [pc, #168]	; (800f38c <_vfiprintf_r+0x220>)
 800f2e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f2e6:	2206      	movs	r2, #6
 800f2e8:	f108 0701 	add.w	r7, r8, #1
 800f2ec:	f7f0 ff98 	bl	8000220 <memchr>
 800f2f0:	2800      	cmp	r0, #0
 800f2f2:	d037      	beq.n	800f364 <_vfiprintf_r+0x1f8>
 800f2f4:	4b26      	ldr	r3, [pc, #152]	; (800f390 <_vfiprintf_r+0x224>)
 800f2f6:	bb1b      	cbnz	r3, 800f340 <_vfiprintf_r+0x1d4>
 800f2f8:	9b03      	ldr	r3, [sp, #12]
 800f2fa:	3307      	adds	r3, #7
 800f2fc:	f023 0307 	bic.w	r3, r3, #7
 800f300:	3308      	adds	r3, #8
 800f302:	9303      	str	r3, [sp, #12]
 800f304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f306:	444b      	add	r3, r9
 800f308:	9309      	str	r3, [sp, #36]	; 0x24
 800f30a:	e750      	b.n	800f1ae <_vfiprintf_r+0x42>
 800f30c:	fb05 3202 	mla	r2, r5, r2, r3
 800f310:	2001      	movs	r0, #1
 800f312:	4688      	mov	r8, r1
 800f314:	e78a      	b.n	800f22c <_vfiprintf_r+0xc0>
 800f316:	2300      	movs	r3, #0
 800f318:	f108 0801 	add.w	r8, r8, #1
 800f31c:	9305      	str	r3, [sp, #20]
 800f31e:	4619      	mov	r1, r3
 800f320:	250a      	movs	r5, #10
 800f322:	4640      	mov	r0, r8
 800f324:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f328:	3a30      	subs	r2, #48	; 0x30
 800f32a:	2a09      	cmp	r2, #9
 800f32c:	d903      	bls.n	800f336 <_vfiprintf_r+0x1ca>
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d0c3      	beq.n	800f2ba <_vfiprintf_r+0x14e>
 800f332:	9105      	str	r1, [sp, #20]
 800f334:	e7c1      	b.n	800f2ba <_vfiprintf_r+0x14e>
 800f336:	fb05 2101 	mla	r1, r5, r1, r2
 800f33a:	2301      	movs	r3, #1
 800f33c:	4680      	mov	r8, r0
 800f33e:	e7f0      	b.n	800f322 <_vfiprintf_r+0x1b6>
 800f340:	ab03      	add	r3, sp, #12
 800f342:	9300      	str	r3, [sp, #0]
 800f344:	4622      	mov	r2, r4
 800f346:	4b13      	ldr	r3, [pc, #76]	; (800f394 <_vfiprintf_r+0x228>)
 800f348:	a904      	add	r1, sp, #16
 800f34a:	4630      	mov	r0, r6
 800f34c:	f7fc fafc 	bl	800b948 <_printf_float>
 800f350:	f1b0 3fff 	cmp.w	r0, #4294967295
 800f354:	4681      	mov	r9, r0
 800f356:	d1d5      	bne.n	800f304 <_vfiprintf_r+0x198>
 800f358:	89a3      	ldrh	r3, [r4, #12]
 800f35a:	065b      	lsls	r3, r3, #25
 800f35c:	f53f af7e 	bmi.w	800f25c <_vfiprintf_r+0xf0>
 800f360:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f362:	e77d      	b.n	800f260 <_vfiprintf_r+0xf4>
 800f364:	ab03      	add	r3, sp, #12
 800f366:	9300      	str	r3, [sp, #0]
 800f368:	4622      	mov	r2, r4
 800f36a:	4b0a      	ldr	r3, [pc, #40]	; (800f394 <_vfiprintf_r+0x228>)
 800f36c:	a904      	add	r1, sp, #16
 800f36e:	4630      	mov	r0, r6
 800f370:	f7fc fda0 	bl	800beb4 <_printf_i>
 800f374:	e7ec      	b.n	800f350 <_vfiprintf_r+0x1e4>
 800f376:	bf00      	nop
 800f378:	08010150 	.word	0x08010150
 800f37c:	0801029c 	.word	0x0801029c
 800f380:	08010170 	.word	0x08010170
 800f384:	08010130 	.word	0x08010130
 800f388:	080102a2 	.word	0x080102a2
 800f38c:	080102a6 	.word	0x080102a6
 800f390:	0800b949 	.word	0x0800b949
 800f394:	0800f147 	.word	0x0800f147

0800f398 <_sbrk_r>:
 800f398:	b538      	push	{r3, r4, r5, lr}
 800f39a:	4c06      	ldr	r4, [pc, #24]	; (800f3b4 <_sbrk_r+0x1c>)
 800f39c:	2300      	movs	r3, #0
 800f39e:	4605      	mov	r5, r0
 800f3a0:	4608      	mov	r0, r1
 800f3a2:	6023      	str	r3, [r4, #0]
 800f3a4:	f7f6 f8f4 	bl	8005590 <_sbrk>
 800f3a8:	1c43      	adds	r3, r0, #1
 800f3aa:	d102      	bne.n	800f3b2 <_sbrk_r+0x1a>
 800f3ac:	6823      	ldr	r3, [r4, #0]
 800f3ae:	b103      	cbz	r3, 800f3b2 <_sbrk_r+0x1a>
 800f3b0:	602b      	str	r3, [r5, #0]
 800f3b2:	bd38      	pop	{r3, r4, r5, pc}
 800f3b4:	20009484 	.word	0x20009484

0800f3b8 <__sread>:
 800f3b8:	b510      	push	{r4, lr}
 800f3ba:	460c      	mov	r4, r1
 800f3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3c0:	f000 f8b4 	bl	800f52c <_read_r>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	bfab      	itete	ge
 800f3c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f3ca:	89a3      	ldrhlt	r3, [r4, #12]
 800f3cc:	181b      	addge	r3, r3, r0
 800f3ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f3d2:	bfac      	ite	ge
 800f3d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f3d6:	81a3      	strhlt	r3, [r4, #12]
 800f3d8:	bd10      	pop	{r4, pc}

0800f3da <__swrite>:
 800f3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3de:	461f      	mov	r7, r3
 800f3e0:	898b      	ldrh	r3, [r1, #12]
 800f3e2:	05db      	lsls	r3, r3, #23
 800f3e4:	4605      	mov	r5, r0
 800f3e6:	460c      	mov	r4, r1
 800f3e8:	4616      	mov	r6, r2
 800f3ea:	d505      	bpl.n	800f3f8 <__swrite+0x1e>
 800f3ec:	2302      	movs	r3, #2
 800f3ee:	2200      	movs	r2, #0
 800f3f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3f4:	f000 f886 	bl	800f504 <_lseek_r>
 800f3f8:	89a3      	ldrh	r3, [r4, #12]
 800f3fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f402:	81a3      	strh	r3, [r4, #12]
 800f404:	4632      	mov	r2, r6
 800f406:	463b      	mov	r3, r7
 800f408:	4628      	mov	r0, r5
 800f40a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f40e:	f000 b835 	b.w	800f47c <_write_r>

0800f412 <__sseek>:
 800f412:	b510      	push	{r4, lr}
 800f414:	460c      	mov	r4, r1
 800f416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f41a:	f000 f873 	bl	800f504 <_lseek_r>
 800f41e:	1c43      	adds	r3, r0, #1
 800f420:	89a3      	ldrh	r3, [r4, #12]
 800f422:	bf15      	itete	ne
 800f424:	6560      	strne	r0, [r4, #84]	; 0x54
 800f426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f42a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f42e:	81a3      	strheq	r3, [r4, #12]
 800f430:	bf18      	it	ne
 800f432:	81a3      	strhne	r3, [r4, #12]
 800f434:	bd10      	pop	{r4, pc}

0800f436 <__sclose>:
 800f436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f43a:	f000 b831 	b.w	800f4a0 <_close_r>

0800f43e <strncmp>:
 800f43e:	b510      	push	{r4, lr}
 800f440:	b16a      	cbz	r2, 800f45e <strncmp+0x20>
 800f442:	3901      	subs	r1, #1
 800f444:	1884      	adds	r4, r0, r2
 800f446:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f44a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f44e:	4293      	cmp	r3, r2
 800f450:	d103      	bne.n	800f45a <strncmp+0x1c>
 800f452:	42a0      	cmp	r0, r4
 800f454:	d001      	beq.n	800f45a <strncmp+0x1c>
 800f456:	2b00      	cmp	r3, #0
 800f458:	d1f5      	bne.n	800f446 <strncmp+0x8>
 800f45a:	1a98      	subs	r0, r3, r2
 800f45c:	bd10      	pop	{r4, pc}
 800f45e:	4610      	mov	r0, r2
 800f460:	e7fc      	b.n	800f45c <strncmp+0x1e>

0800f462 <__ascii_wctomb>:
 800f462:	b149      	cbz	r1, 800f478 <__ascii_wctomb+0x16>
 800f464:	2aff      	cmp	r2, #255	; 0xff
 800f466:	bf85      	ittet	hi
 800f468:	238a      	movhi	r3, #138	; 0x8a
 800f46a:	6003      	strhi	r3, [r0, #0]
 800f46c:	700a      	strbls	r2, [r1, #0]
 800f46e:	f04f 30ff 	movhi.w	r0, #4294967295
 800f472:	bf98      	it	ls
 800f474:	2001      	movls	r0, #1
 800f476:	4770      	bx	lr
 800f478:	4608      	mov	r0, r1
 800f47a:	4770      	bx	lr

0800f47c <_write_r>:
 800f47c:	b538      	push	{r3, r4, r5, lr}
 800f47e:	4c07      	ldr	r4, [pc, #28]	; (800f49c <_write_r+0x20>)
 800f480:	4605      	mov	r5, r0
 800f482:	4608      	mov	r0, r1
 800f484:	4611      	mov	r1, r2
 800f486:	2200      	movs	r2, #0
 800f488:	6022      	str	r2, [r4, #0]
 800f48a:	461a      	mov	r2, r3
 800f48c:	f7f6 f82f 	bl	80054ee <_write>
 800f490:	1c43      	adds	r3, r0, #1
 800f492:	d102      	bne.n	800f49a <_write_r+0x1e>
 800f494:	6823      	ldr	r3, [r4, #0]
 800f496:	b103      	cbz	r3, 800f49a <_write_r+0x1e>
 800f498:	602b      	str	r3, [r5, #0]
 800f49a:	bd38      	pop	{r3, r4, r5, pc}
 800f49c:	20009484 	.word	0x20009484

0800f4a0 <_close_r>:
 800f4a0:	b538      	push	{r3, r4, r5, lr}
 800f4a2:	4c06      	ldr	r4, [pc, #24]	; (800f4bc <_close_r+0x1c>)
 800f4a4:	2300      	movs	r3, #0
 800f4a6:	4605      	mov	r5, r0
 800f4a8:	4608      	mov	r0, r1
 800f4aa:	6023      	str	r3, [r4, #0]
 800f4ac:	f7f6 f83b 	bl	8005526 <_close>
 800f4b0:	1c43      	adds	r3, r0, #1
 800f4b2:	d102      	bne.n	800f4ba <_close_r+0x1a>
 800f4b4:	6823      	ldr	r3, [r4, #0]
 800f4b6:	b103      	cbz	r3, 800f4ba <_close_r+0x1a>
 800f4b8:	602b      	str	r3, [r5, #0]
 800f4ba:	bd38      	pop	{r3, r4, r5, pc}
 800f4bc:	20009484 	.word	0x20009484

0800f4c0 <_fstat_r>:
 800f4c0:	b538      	push	{r3, r4, r5, lr}
 800f4c2:	4c07      	ldr	r4, [pc, #28]	; (800f4e0 <_fstat_r+0x20>)
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	4608      	mov	r0, r1
 800f4ca:	4611      	mov	r1, r2
 800f4cc:	6023      	str	r3, [r4, #0]
 800f4ce:	f7f6 f836 	bl	800553e <_fstat>
 800f4d2:	1c43      	adds	r3, r0, #1
 800f4d4:	d102      	bne.n	800f4dc <_fstat_r+0x1c>
 800f4d6:	6823      	ldr	r3, [r4, #0]
 800f4d8:	b103      	cbz	r3, 800f4dc <_fstat_r+0x1c>
 800f4da:	602b      	str	r3, [r5, #0]
 800f4dc:	bd38      	pop	{r3, r4, r5, pc}
 800f4de:	bf00      	nop
 800f4e0:	20009484 	.word	0x20009484

0800f4e4 <_isatty_r>:
 800f4e4:	b538      	push	{r3, r4, r5, lr}
 800f4e6:	4c06      	ldr	r4, [pc, #24]	; (800f500 <_isatty_r+0x1c>)
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	4605      	mov	r5, r0
 800f4ec:	4608      	mov	r0, r1
 800f4ee:	6023      	str	r3, [r4, #0]
 800f4f0:	f7f6 f835 	bl	800555e <_isatty>
 800f4f4:	1c43      	adds	r3, r0, #1
 800f4f6:	d102      	bne.n	800f4fe <_isatty_r+0x1a>
 800f4f8:	6823      	ldr	r3, [r4, #0]
 800f4fa:	b103      	cbz	r3, 800f4fe <_isatty_r+0x1a>
 800f4fc:	602b      	str	r3, [r5, #0]
 800f4fe:	bd38      	pop	{r3, r4, r5, pc}
 800f500:	20009484 	.word	0x20009484

0800f504 <_lseek_r>:
 800f504:	b538      	push	{r3, r4, r5, lr}
 800f506:	4c07      	ldr	r4, [pc, #28]	; (800f524 <_lseek_r+0x20>)
 800f508:	4605      	mov	r5, r0
 800f50a:	4608      	mov	r0, r1
 800f50c:	4611      	mov	r1, r2
 800f50e:	2200      	movs	r2, #0
 800f510:	6022      	str	r2, [r4, #0]
 800f512:	461a      	mov	r2, r3
 800f514:	f7f6 f82e 	bl	8005574 <_lseek>
 800f518:	1c43      	adds	r3, r0, #1
 800f51a:	d102      	bne.n	800f522 <_lseek_r+0x1e>
 800f51c:	6823      	ldr	r3, [r4, #0]
 800f51e:	b103      	cbz	r3, 800f522 <_lseek_r+0x1e>
 800f520:	602b      	str	r3, [r5, #0]
 800f522:	bd38      	pop	{r3, r4, r5, pc}
 800f524:	20009484 	.word	0x20009484

0800f528 <__malloc_lock>:
 800f528:	4770      	bx	lr

0800f52a <__malloc_unlock>:
 800f52a:	4770      	bx	lr

0800f52c <_read_r>:
 800f52c:	b538      	push	{r3, r4, r5, lr}
 800f52e:	4c07      	ldr	r4, [pc, #28]	; (800f54c <_read_r+0x20>)
 800f530:	4605      	mov	r5, r0
 800f532:	4608      	mov	r0, r1
 800f534:	4611      	mov	r1, r2
 800f536:	2200      	movs	r2, #0
 800f538:	6022      	str	r2, [r4, #0]
 800f53a:	461a      	mov	r2, r3
 800f53c:	f7f5 ffba 	bl	80054b4 <_read>
 800f540:	1c43      	adds	r3, r0, #1
 800f542:	d102      	bne.n	800f54a <_read_r+0x1e>
 800f544:	6823      	ldr	r3, [r4, #0]
 800f546:	b103      	cbz	r3, 800f54a <_read_r+0x1e>
 800f548:	602b      	str	r3, [r5, #0]
 800f54a:	bd38      	pop	{r3, r4, r5, pc}
 800f54c:	20009484 	.word	0x20009484

0800f550 <_init>:
 800f550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f552:	bf00      	nop
 800f554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f556:	bc08      	pop	{r3}
 800f558:	469e      	mov	lr, r3
 800f55a:	4770      	bx	lr

0800f55c <_fini>:
 800f55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f55e:	bf00      	nop
 800f560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f562:	bc08      	pop	{r3}
 800f564:	469e      	mov	lr, r3
 800f566:	4770      	bx	lr
